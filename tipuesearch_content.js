var tipuesearch = {"pages":[{"title":"Ace Your Technical Interview Using Python","text":"video slide Technical Interview Process Recruiter phone screen Technical phone screen with an engineer Take-home assessment Onsite interviews' Non-technical skill matters (a lot) problem solving ask good questions How to Ask Good Questions understand assumption Code (obviously) matters collections time complexity recursion base case progress object-oriented programming data structure & algorithm Coding challenges: quality over quantity Mindset is key Failure and rejection are part of the process You don't need every company to want to hire you","tags":"PyCon US 2019","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python"},{"title":"API Evolution the Right Way","text":"video article Avoid Bad Features Minimize Features Keep Feature Narrow Mark Experimental Features \"Provisional\" Delete Feature Gently Deprecated warning Instructive error Maintain a Change Log Choose a Version Scheme Semantic Versioning Time-based Versioning Write an Upgrade Guide Add parameter compatibly ï¼ˆand fail loudly!ï¼‰ Add default value for new added parameter that preserve old behavior Use * <- all parameters after it can only be passed by name Changing Behavior without Changing API Add a flag default False but warn if it's False Phrase 2. Change default to True, deprecate flag Phrase 3. Remove flag","tags":"PyCon US 2019","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way"},{"title":"Break the Cycle: Three excellent Python tools to automate repetitive tasks","text":"video goal reduce toil (redundant boring stuff) tools tox for automating python package testing nox flexible test automation the configuration file is python noxfile.py invoke task execution tool a tool framework","tags":"PyCon US 2019","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks"},{"title":"Escape from auto-manual testing with Hypothesis!","text":"video slide Property-based testing User Describes valid input Writes tests that passes for any valid input Strategies and Tactics strategies ( st ) values collections map and filter methods complicated data recursive strategies combine strategies builds() : custom object inferring strategies hypothesis.extra st.data() tactics: what do we tests? auto-manual testing: output == expected oracle tests (full specification) partial specification \"Does not crash\" Just call your function with valid input Round trip e.g., json.dumps / json.loads Metamorphic Relation Although we don't know the relation between input and output, we might know how output should change. Stateful Testing (N)DFA RuleBasedStateMachine Observability --hypothesis-show-statistics timing stats perf breakdown exit reasons Use note() if you like print-debugging","tags":"PyCon US 2019","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis"},{"title":"Getting Started Testing in Data Science","text":"video slide-origin slide-flatten Data Science Workflows One-off analysis Exploratory Well defined problem Data Science Domain Problem Working with Pandas DataFrames Pandas built-in testing methods from pandas.util.testing import assert_frame_equal check_like check_dtype Working with DB mock data that should be get from database and test only behavior Generating Dataframe for Testing hypothesis","tags":"PyCon US 2019","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science"},{"title":"Practical decorators","text":"video usage examples timing limited call (e.g., function can be called once per minute) memoization (i.e. caching) add class attribute (e.g., better __repr__ )","tags":"PyCon US 2019","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/practical-decorators","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/practical-decorators"},{"title":"Scraping a Million Pokemon Battles: Distributed Systems By Example","text":"video slide Scalability and 3 \"Pillars\" Concurrency of Resources Asserting for Correctness Resilience against Failures New Problems Loss of determinism Long startup times (e.g., initialize message queue) Increases flakiness Correctness Resilience","tags":"PyCon US 2019","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example"},{"title":"Solve Your Problem With Sloppy Python","text":"video Personal Description It's an introduction for how to use python as the shell script The rules fail early and noisily stop writing the shell script The guidelines try automating even more try new libraries/technologies","tags":"PyCon AU 2018","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-au-2018/2019/08/solve-your-problem-with-sloppy-python","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-au-2018/2019/08/solve-your-problem-with-sloppy-python"},{"title":"The Zen of Python Teams","text":"video Beautiful is better than ugly. Be kind Accelerate Explicit is better than implicit Documenting process makes it easier for others to join you. resource onboard guide how to contribute where to get help Keep your conversation about work in public Document your peoeple I enjoy working on ... I get excited by ... I struggle when ... I feel appreciated when ... Ask me for help with ... Simple is better than complex. Build meaningful relationships with small interactions Error should never pass silently With humans, we have to rely on other humans to tell us when we broke them. In the face of ambiguity, refuse the temptation to guess. Now is better than never. Doing and being wrong is a lot better than not doing at all.","tags":"PyCon US 2019","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams"},{"title":"Time to take out the rubbish: garbage collector","text":"video We do not use __del__() to clean up. Use with instead","tags":"PyCon US 2019","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector"},{"title":"Watch out for Safety Bandits!","text":"video The \"Essential Two\" security problems Problems someone else made safety Problems you made bandit","tags":"PyCon AU 2018","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits"},{"title":"Why you should care about types: How Python typing helped my team scale","text":"video Are Python types Pythonic? import this >>> Explicit is better than implicit . >>> Readability counts >>> In the face of ambiguity , refuse the temptation to guess . If nothing else, because Guido said so ðŸ˜† Type 101 Collection, Union, Optional, Type from typing import Type , TypeVar class BaseClass : pass class DerivedClass ( BaseClass ): pass T = TypeVar ( \"T\" , bound = BaseClass ) def factory ( clazz : Type [ T ]) -> T : return claszz () Tool GitHub - Instagram/MonkeyType: A system for Python that generates static type annotations by collecting runtime types","tags":"PyCon AU 2018","url":"https://lee-w.github.io/PyCon-Note/posts/pycon-au-2018/2019/08/why-you-should-care-about-types","loc":"https://lee-w.github.io/PyCon-Note/posts/pycon-au-2018/2019/08/why-you-should-care-about-types"}]};