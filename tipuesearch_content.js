var tipuesearch = {"pages":[{"title":"About","text":"Just my note after watching PyCon videos.","tags":"pages","url":"https://lee-w.github.io/pycon-note/pages/about.html","loc":"https://lee-w.github.io/pycon-note/pages/about.html"},{"title":"1 + 1 = 1 or Record Deduplication with Python","text":"Speaker Flávio Juvenal da Silva Junior Material video slide Note fingerprinting and bloacking string order tokens common tokens first N tokens N-chars prefix-suffix Acronym Phonetic encoding lat-lng Grid Geohash Number order of magnitude Set Any common element max element min element classification cluster","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/1+1=1-or-record-deduplication-with-python","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/1+1=1-or-record-deduplication-with-python"},{"title":"Transitioning from developing software to developing people","text":"Speaker Matthew Knapp Bachmann Material video slide Note Success becomes fuzzier I made a cool thing → I enabled my team to make a cool thing Busy is not the same as productive Develop a task management system (e.g., GTD) Meetings should have a goal should have action items can end early small meetings are for decisions large meetings are for brainstorming/broadcasting Politics Relationships are critical for doing anything Looking for collaborative solutions Process Find projects that the business values and fit/expand your team's skill set Keep your team interested and working at a sustainable pace Work with your team to estimate tasks and measure capacity People Over Process","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/transitioning-from-developing-software-to-developing-people","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/transitioning-from-developing-software-to-developing-people"},{"title":"Let's talk Databases in Python: SQLAlchemy and Alembic","text":"Speaker Hannah Stepanek Material video slide Note Building models Types of indexing Multiple Column Index Partial Index Functional/Expression Indexing e.g., SELECT * FROM Annotation WHERE reference[0] = ann Connecting to the database Session Scoping Connection pools Keep alives Building queries Database Migrations","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/let-s-talk-databases-in-python-SQLAlchemy-and-alembic","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/let-s-talk-databases-in-python-SQLAlchemy-and-alembic"},{"title":"From 0 to 60 in 2,592,000 seconds: How to quickly get engineers up to speed on your team","text":"Speaker Alexandra Sunderland Material video Note Onboarding a new member Step 0: Empathy Step 1: Focus on relationships set them up with a buddy Step 2: Write knowledge down Step 3: Create a FAQ Step 4: Set goals & milestones Step 5: Setup their physical space Step 6: Ask for feedback","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/from-0-to-60-in-2592000-seconds","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/from-0-to-60-in-2592000-seconds"},{"title":"Write Less and Test More with Data Regression Testing","text":"Speaker Igor T. Ghisi Material video repo Note Data Regression Testing pytest-regressions fixtures num_regression : dict of 1-D array file_regression : text data_regression : basic python types image_regression : image binary Tips and tricks regenerate all regression files pytest --force-regen num_regression and image_regression dependencies are not automatically installed num_regression : pandas image_regression : pillow plugins used in this project pytest-datadir serialchemy","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/write-less-and-test-more-with-data-regression-testing","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/write-less-and-test-more-with-data-regression-testing"},{"title":"Building Docs like Code: Continuous Integration for Documentation","text":"Speaker Mason Egger Materials video article Note Types of docs Long form documentation: User Guides, Getting Started, FAQs, etc. Functional documentation: RESTful APIs, SDKs, man pages Tools Static site generators Source code based documentation generators e.g., pydoc System documentation generator ronn Mkdocs Markdown based documentation yaml based config file Python based → Easy to extend Extension UML Sphinx reStructured Text based documentation with support for Markdown Most common tool for creating SDK from in-code documentatoin Documentation Testing","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/building-docs-like-code-continuous-integration-for-documentation","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/building-docs-like-code-continuous-integration-for-documentation"},{"title":"Multiply your Testing Effectiveness with Parameterized Testing","text":"Speaker Brian K Okken Material video repo Note metafunc pytest_generate_tests Basic pytest_generate_tests example indirect parameter Apply indirect on particular arguments","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/multiply-your-testing-effectiveness-with-parameterized-testing","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/multiply-your-testing-effectiveness-with-parameterized-testing"},{"title":"Goodbye Print, Hello Debugger!","text":"Speaker Nina Zakharenko Material video post Note cli debuggers pdb ipdb export PYTHONBREAKPOINT=ipdb.set_trace (after Python 3.7) 5 most important commands l [ist] n [ext]: next line s [tep]: into c [ontinue]: util next breakpoint h [help] Tip and Tricks .pdbrc gotcha Don't use breakpoints in production code use debug-statements from pre-commit-hooks","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/goodbye-print-hello-debugger","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/goodbye-print-hello-debugger"},{"title":"Docker and Python: making them play nicely and securely for Data Science and ML","text":"Speaker Tania Allard Material video slide Note common pain points in DS and ML complex setup / deps reliance on data / database fast evolving projects are containers secure enough? how is it different from web apps? not every deliverable is an app or a model relies on data Mixture of wheels and compiled packages Security access levels - for data and software Mixture of stakeholders: data scientists software engineers ML engineers best practices Split complex RUN statements and sort them Prefer COPY to add files install only necessary packages explicitly ignore files documentations never add data secrets cookiecutter template docker-science/cookiecutter-docker-science Top Tips Rebuild your images frequently - get security updates for system packages Never work as root / minimize the privileges run as non-root user minimize capability You do not want to use Alpine Linux (go for buster, stretch or the Jupyter stack) pin / version EVERYTHING (use pip-tools, conda, poetry or pipenv) Leverage build cache Use one Dockerfile per project Use multi-stage builds fetch and manage secrets in an intermediate layer creates smaller image Make your images identifiable (test, production, R&D) - also be careful when accessing databases and using ENV variables / build variables Provide context with LABELS Do not reinvent the wheel! Use repo2docker Automate - no need to build and push manually Use a linter","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/docker-and-python-making-them-play-nicely-and-securely-for-data-science-and-ml","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/docker-and-python-making-them-play-nicely-and-securely-for-data-science-and-ml"},{"title":"Static Typing in Python","text":"Speaker Dustin Ingram Material video Note PEPs PEP 3107 PEP 483 PEP 484 Types Gradual typing not do it all at once Special type consturcts Existing types e.g., int , float , str , NoneType New types: ( from typing import ... ) Any Union[t1, t2, ...] Optional[t1] Tuple[t1, t2, ...] Callable[[t1, t2, ...], tr] Container types e.g., List[int] Generic types e.g., from typing import Iterable Type aliases e.g., Number = Union[int, float, complex, Decimal] When you shouldn't use static typing basically never not a replacement for unit tests When you should use static typing basically always especially if your project is for public consumption before migrating or refactoring How Migrate to Python >= 3.6 [Optional] Install a typechecker locally Start optionally typing your codebase Run a typecheker with your linting and CI Convince all your coworkers to join you","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/static-typing-in-python","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/static-typing-in-python"},{"title":"What is deployment, anyway?","text":"Speaker Katie McLaughlin Material video Note What is django deployment anyway? copy code to host update database, if needed update static, if needed start web server 1. Run Django Host Platform as a Service your responsibility: django app, data managed for you: web server, os, hardware, storage, networking e.g., Heroku Infrastructure as a Service your responsibility: django app, data, web server os managed for you: hardware, storage, networking e.g., AWS 2. Connect to a database No opinion? Use postgres Database hosting DBaaS your responsibility: django's responsibility: migrations managed for you: storage, backups, persistence, maintenance 3. Serve static file simple assets cloud storage django-storages media uploads asset compilation","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/what-is-deployment-anyway","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/what-is-deployment-anyway"},{"title":"Beautiful Python Refactoring","text":"Speaker Conor Hoekstra Material video slide code Note Just follow the refactor process in the video","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/04/beautiful-python-refactoring","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/04/beautiful-python-refactoring"},{"title":"Snakes in a case: Packaging Python apps for distribution","text":"Speaker Russell Keith-Magee Material video Note Breifcase What it is? PEP518 compliant build tool multiple platform support What it isn't Dependent on the rest of beeware suite A solution for cli tool How? ship a full independent Python interpreter What's the different? Doesn't try to be clever PyInstallers try to make Python something it isn't Crossplatform supports iOS and Android What's bad Some platform support could be improved Support packages are large Use support_package to specify custom support package","tags":"PyCon US 2020","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/04/snakes-in-a-case-packaging-python-apps-for-distribution","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/04/snakes-in-a-case-packaging-python-apps-for-distribution"},{"title":"Software patterns for productive teams","text":"Speaker Radoslav Georgiev Material video Note Team Leader's perspective Productivity Confidence (keep product stable) Independence Well-being Less context switching Someone being blocked Morale Software Development constant regression constant merge conflicts split python modules by domain split big test files into test file per thing that you are testing local setup accounts make sure everyone has an account/access/keys for everything needed before they need it keep a spreadsheet of accounts & 3td parties documentation relentlessly document test it onboarding new people is your final test setup scripts speed of tests pytest-xdist Features Clients often don't know the exact details of the things they want, so ask them a lot of questions! Make sure everyone on your team reads the features description fully, before starting to work. Explicit is better than implicit Bug Have an explicitly \"firefighter\" for the week Rotate everyone on that position Explicit Git & GitHub workflows Refactoring PRs separated from feature PRs Team rules Better visibility at explicit expeetation Onboard new people Have an explicit team lead leads should focus on enabling their teams do their job well Rotate team leads every week, so everyone knows what its' like to be on that position. Conflict over communicate with all parties involved Read books on management & leadership Adapt Establish processes but don't follow them blindly. Things change.","tags":"EuroPython 2019","url":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/04/software-patterns-for-productive-teams","loc":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/04/software-patterns-for-productive-teams"},{"title":"What is a Python Core Developer?","text":"Speaker Mariatta Wijaya Material video slide Note Python Core Developers commit right to CPython Responsibilities Review / Accept / Reject PRs Face the consequence Help contributors Be the representative for Python F.A.Q. How can I be involved in the community? * Help your local meetup * No meetup? Start one. * Blog about Python or your fav library * Volunteer at conferences * Be open, considerate, and respectful How can I contribute? Join the communication channels Report bugs Propose ideas Improve documentation Review pull requests Be open, considerate, and respectful How can I contribute code? Read the contribution guide Work on issue Propose a pull request How can I contribute code to CPython? Read the Dev guide Join core-mentorship and python-dev Find issue in bugs.python.org Propose pull request How to find an issue to work on? Follow the repo Choose an issue based on your interest and skillset Do your own research on the issue How to become a core developer? Earn the trust from existing core devs Accept responsibilities Be open, considerate, and respectful","tags":"PyCon US 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/04/what-is-python-core-developer","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/04/what-is-python-core-developer"},{"title":"Dial M For Mentor","text":"Speaker Mariatta Wijaya Material video slide Note Myths Only newbies need help Nobody's perfect I'm wasting people's time Mentors learn from you too I don't deserve any help Impostor Syndrome I'm a failure for needing help Asking for help is not a failure Where to find mentors? Meetups and Python User Group Open Source Project Maintainers Python Core Mentorship After finding a mentor Commitment Respect Thank your mentor through mentoring others","tags":"PyCon US 2017","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2017/2020/04/dial-m-for-mentor","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2017/2020/04/dial-m-for-mentor"},{"title":"Static typing: beyond the basics of def foo(x: int) -str:","text":"Speaker Vita Smid Material video slide Note 1. Strategy: how to approach a large code base try to start with strict configuration # Ensure full coverage disallow_untyped_calls = True disallow_untyped_defs = True disallow_incomplete_defs = True disallow_untyped_decorators = True # Restrict dynamic typing disallow_any_generics = True disallow_subclassing_any = True warn_return_any = True # Know exactly what you're doing warn_redundant_casts = True warn_unused_ignores = True warn_unused_configs = True # imports ignore_missing_imports = True follow_imports = silent # do not use 'follow_import = skip' gradual coverage opt-in: only explicitly listed modules are checked tests use # type: ignore on mocks and monkey patching don't give up on test code completely [mypy-*.tests.*] disallow_untyped_decorators = False # pytest decorators are untyped. disallow_untyped_defs = False # Properly typing *all* fixtures disallow_incomplete_defs = False # and tests is hard and noisy. your own package setup ( ... , package_data = { 'your_package' : [ 'py.typed' ], }, ... , ) 3rd party packages explicitly ignore those are not typed [mypy-\"package.to.ignore\"] ignore_missing_imports = True follow_imports = silent 2. Tactics: Dealing with complex code Generics and type variables TypeVar with restriction (e.g., AlgebraType = TypeVar('AlgebraType', float, Decimal) ) nominal typing v.s. structural typing Structural typing: describe capabilities, not ancestry Defining you own types NewType write your own mypy plugin e.g., github.com/qntln/fastenum/fastenum/mypy_plugin.py overloading functions","tags":"EuroPython 2019","url":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/static-typing-beyond-the-basics-of-def-foo-x-int-str","loc":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/static-typing-beyond-the-basics-of-def-foo-x-int-str"},{"title":"The Black Magic of Python Wheels","text":"Speaker Elana Hashman Material video slide Note The Wheel PEP 427 Follow PEP 376 (standard of distribution), PEP 426 (metadata) 3 types of wheels Pure wheels Only Python code May target specific version of Python Universal wheels Python 2/3 compatible pure wheels Extension wheels Extension: this library extends Python's functionality with non-Python code Users now can install pre-built Python wheels. How to ship compiled Python extensions on many operating systems manylinux (Symbol Versioning) auditwheel[https://github.com/pypa/auditwheel] (Dependency Bundling)","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/03/the-black-magic-of-python-wheels","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/03/the-black-magic-of-python-wheels"},{"title":"Inside the Cheeseshop: How Python Packaging Works","text":"Speaker Dustin Ingram Material video slide Note History of packaging distuils sdist -> source distribution bdist -> build distribution PyPI (Pie-P-I) setuptools easy_intall egg pyinstall pip (a.k.a. python install package) requirements.txt PyPI hosts distribution (PEP 427) egg -> wheel (from wheel cheese) wheel has specification no one reinvents the wheel twine Problem Nowadays Packaging is hard Python Packaging User Guide pypa/sampleproject need more than Python conda reproducible environment pipenv arbitrary code in setup.py PEP 517 / 518 pyproject.toml","tags":"PyCon US 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/03/inside-the-cheeseshop-how-python-packaging-works","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/03/inside-the-cheeseshop-how-python-packaging-works"},{"title":"From Python script to Open Source Project","text":"Speaker Michał Karzyński Material video slide article Note Stages Code Prep Automate CI Specs PEP8 GNU/POSIX PyPA PyCQA pip install pytest mypy docopt setuptools tox virtualenv wheel black pre-commit flake8 Services GitHub TravisCI Coverall.io Dependabot codeclimate.com codacy.com mergify.io pyup.io Check list CLI: docopt Code directory layout Code Structure meaningful name single responsibility up to 2 parameters preferably no side-effects write unit tests Define your main function Preparing your setup.py file Using your setup.py python setup.py sdist (source package) python setup.py bdist_wheel (binary wheel for distribution) Add entry_points to setup.py entry_points={\"console_scripts\": [\"my-command = my_module.main:main\"]} Create a requirements.txt requirements.txt requirements_dev.txt Use Black to format you code Use pre-commit to run formatter Use flake8 to check your code Use MyPy for static type analysis Use tox to test all the things Write unit tests (pytest) Setup a Git repository Setup continuous integration Requirements updater pyup dependbot Test coverage checker Automated code review Automated PR merge add rules Publish your project on PyPI (twine)","tags":"EuroPython 2019","url":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/from-python-script-to-open-source-project","loc":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/from-python-script-to-open-source-project"},{"title":"Zen of Python Dependency Management ... and package release automation","text":"Speaker Justin Mayer Material video slide Note Why is it important? reproducible builds PEP 518: pyproject.toml e.g., [build-system] requires = [\"setuptools\", \"wheel\"] [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.mansonry.api\" [tool.poerty.dependencies] python = \"&#94;3.7\" Dependency Management Tools Release Early and Often tools pip-tools pipenv poetry DepHell Release Management Auto-Publish Releases Upon PR Merge AutoPub","tags":"EuroPython 2019","url":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/zen-of-python-dependency-management","loc":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/zen-of-python-dependency-management"},{"title":"Optimizing Docker builds for Python applications","text":"Speaker Dmitry Figol Material video slide Note Docker Concept Optimize Goal Reducing image size Reducing build time Priority Fast build during development → Use slim-stretch Small size during production → Use alpine build deps are only needed when compiling but not runtimeImprovement Use specific COPY statement instead of COPY .. .dockerignore delete build deps doesn't shrink image size Docker Layer Instructions create read-only layers A new layer can't be smaller than the previous layer Layers are cached and can be re-used for subsequent builds Layers introduce some overhead Tips Combine multiple RUN statements into one delete files in the same layer (instruction) where they were added arrangement statement from the least changing to the most changing (system-level -> tools -> Python deps -> source code) don't save deps to cache pip: --no-cache-dir apk: --no-cache complicate Dockerfile and no cache during build Docker multi-stage Build an intermediate image with all build deps and install your app Copy the result to a fresh image Other Tips Bind mount source code instead of COPY in local dev env PYTHONUNBUFFERED=1 -> print to stdout without buffering PYTHONDONTWRITEBYTECODE=1 -> no *.pyc files","tags":"EuroPython 2019","url":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/optimizing-docker-builds-for-python-applications","loc":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/optimizing-docker-builds-for-python-applications"},{"title":"Publish a (Perfect) Python Package on PyPI","text":"Speaker Mark Smith Material video resource Note Basic Usage minimal setup.py from setuptools import setup setup ( name = \"helloworld\" , version = \"0.0.1\" , description = \"Say hello!\" , py_modules = [ \"helloworld\" ], package_dir = { '' : 'src' }, ) build wheel python setup.py bdist_wheel test installation locally Links to the code instead of add it to site-packages pip install -e . Documentation Compare ReStructured Text and markdown ReStructured Text Markdown Pythonic More Widespread Powerful Simply Sphinx mkdocs keys added to setup.py classifiers long_description long_description_content_type=\"text/markdown\" Dependencies install_required extras_require production dependencies optional requirements relaxed versions (users can install without conflicts with other packages) specific versions (developers can have identical develop environment) keys added to setup.py install_requires extras_require dev install package with extras_require pip install -e . [ dev ] Source Distribution python setup.py sdist keys added to setup.py url author author_email Ideally, everything should be included for source distribution Use check-manifest check-manifest --create Publish python setup.py bdist_wheel sdist twine upload dist/* Other Stuffs to add Must Do tox Continuous Integration Nice to have badges code coverage quality metrics test on macOS & windows more document contributors section Code of Conduct Don't do any thing mention above Use cookiecutter cookiecutter-pylibrary Things are changing move metadata from setup.py to setup.cfg move to pyprojec.toml poetry flit hatch","tags":"EuroPython 2019","url":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/publish-a-perfetc-python-package-on-pypi","loc":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/publish-a-perfetc-python-package-on-pypi"},{"title":"Why You Should Pursue Public Speaking and How to Get There","text":"Speaker Yenny Cheung Material video slide Note Why? Present better in front of the company Being a software engineer is much more than coding, its about good communication Getting better at crucial conversation Great trick for introverts to meet people Overcoming our fear nervous find your harbor forget something to say practice your comeback if you forget what to say rehearse potential problem (e.g., projector not working) blank out on stage \"Let's skip this for now\" Drink water being exposed as a fraud the art of saying \"I don't know\" not being good enough imposter syndrome But, how good is good enough? Attend conference talks. You need reference. How to get better? The Lean Startup model Build Measure Learn Repeat Building the proposal and the talk Pick topics you're truly interested in Check the call for proposal from first also show how you can modify your talk for a short slot Who, what and how tell about your own experience apply again Measure / Learn Gather feedback from audience Watch your presentation Take notes on what questions are being asked. They're what people interested in. Repeat reuse your talk in different occasions","tags":"EuroPython 2019","url":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/02/why-you-should-pursue-public-speaking-and-how-to-get-there","loc":"https://lee-w.github.io/pycon-note/posts/europython-2019/2020/02/why-you-should-pursue-public-speaking-and-how-to-get-there"},{"title":"Recursion for Beginners: A Beginner's Guide to Recursion","text":"Speaker Al Sweigart Material video slide Note To understand recursion, first understand stacks. Recursive function at least one base case recursive case When should we use recursion? (both requirements needed) tree-like structure backtracking Tail Call Optimization/Elimination It's a compiler trick But CPython doesn't implement and never will ( \"If you want a short answer, it's simply unpythonic\" - Guido ) Memoization (Cache) functools.lru_cache (least recently used)","tags":"NorthBay Python 2018","url":"https://lee-w.github.io/pycon-note/posts/northbay-python-2018/2020/02/recursion-for-beginners-a-beginner-s-guide-to-recursion","loc":"https://lee-w.github.io/pycon-note/posts/northbay-python-2018/2020/02/recursion-for-beginners-a-beginner-s-guide-to-recursion"},{"title":"Readability Counts","text":"Speaker Trey Hunner Material video slide Note PEP 8 Read it every 6 month It's not your project style guide It's just a start point Naming things Don't be afraid of using long variable names Use tuple unpacking in for loop Optimize for accuracy instead of short variable names Instead of commenting operation, consider using descriptive variables. Programming idioms duplicated code around other code → context manager → contextlib list from list → list comprehension Operator Overloading, Abstract Base Classes Functions with shared data → class Readability checklist Can I modify line breaks to improve clarity? Can I create a variable name for unnamed code? Can I add a comment to improve clarity? Can I turn a comment into a better variable name? Can I use a more specific programming construct? Have I stated detailed preferences in a style guide?","tags":"PyCon US 2017","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2017/2020/02/readbility-counts","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2017/2020/02/readbility-counts"},{"title":"Mocking and Patching Pitfalls","text":"Speaker Edwin Jung Material video Note Mock hell complex patch targets numerous mocks or patches mocks with brittle assertions mocks with complex setup deep mocks/recursive mocks/mocks returning mocks tests that test nothing using the debugger to reverse-engineer mocks mocks that prevent refactoring How to test without mock mocks aren't stubs test doubles name behavior mock records calls to the object stub returns canned data, no logic fake implements fake version of production logic dummy does nothing spy records and delegates to the real thing alternatives fake patch fake injection tactical questions Which test doubles (mock or other)? Mockist or classical? Patch or inject? tactics Find a Seam, Patch a Fake mock roles not objects Dependency Injection Inject the Collaborator Go Functional Conclusion always be refactoring consider other test doubles patching should be rare, and the last tool you use mocks (if you use them) should target roles and not objects are not just for test isolation","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/02/mocking-and-patching-pitfalls","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/02/mocking-and-patching-pitfalls"},{"title":"Maintaining a Python Project When It's Not Your Job","text":"Speaker Hynek Schlawack Material video slide article (highly recommend) Note Act 1: Development .github/CONTRIBUTING.rst Example - attrs/.github/CONTRIBUTING.rst Encouragement → Everyone can contribute. Workflow outline Code, test, docs and changelog standards Local development environment setup .github/CODE_OF_CONDUCT.rst Expectation in behavior GitHub - Adding a code of conduct to your project Run test through tox : test on different environment make sure that the user runs exactly the same test commands as the CI Having a high test coverage Checkers flake8 mypy check-manifest twine : check pypi long description Example setup Autoformatters black isort Example setup pre-commit Example setup Documentation Sphinx slice and dice your README in your Sphinx docs to avoid information duplication rst .. include:: ../README.rst :start-after: string-1 :end-before: string-2 * Read the Docs Act 2: Pull Request .github/PULL_REQUEST_TEMPLATE.md checklist Example Continuous Integration Community Stack Overflow async community searchable Maintainer Say thank you to your contributors Act 3: Release Use ISO 8601 (e.g., 1986-03-19 ) for datetime test.pypi How to maintain release information? attrs example setup.py init .py","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/02/maintaining-a-python-project-when-It-s-not-your-job","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/02/maintaining-a-python-project-when-It-s-not-your-job"},{"title":"5 Steps to Build Python Native GUI Widgets for BeeWare","text":"Speaker Dan Yeaw Material slide article video Note toga Rubicon Python -> Objective C VOC Python -> Java Batavia Python -> Java Script Step 0 : Development Platform macOS and GTK are the most developed Step 1 : Research Your Widget Step 2 : Write Docs Write API documentation first Document Driven Development Step 3 : Implement TOGA_CORE (with TDD) Step 4 : Implement TOGA_IMPL (Dummy Backend) Dummy is for automatic testing without a native platform Step 5 : Implement TOGA_IMPL (Your platform)","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/01/5-steps-to-build-python-native-GUI-widgets-for-BeeWare","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/01/5-steps-to-build-python-native-GUI-widgets-for-BeeWare"},{"title":"Dataclasses: The code generator to end all code generators","text":"Speaker Raymond Hettinger Material video site Note What are dataclasses for ? mutable data holder simplifying the process of writing the class Comparison with Named Tuples dataclass mutable unhashable more memory usage more efficient named tuple immutable hashable less memory usage less efficient Freezing and Ordering @dataclass(order=True, frozen=True) Custom Field Specifications field(default_factory=list) field(hash=False) field(repr=False) field(compare=False)","tags":"PyCon US 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/dataclasses-the-code-generator-to-end-all-code-generators","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/dataclasses-the-code-generator-to-end-all-code-generators"},{"title":"Awesome Command Line Tools","text":"Speaker Amjith Ramanujam Material video slide Note Core Concepts Discoverability Be forthcoming Eschew special key example pgcli (tab completion) fish shell (ctrl - r: search through the history) User Focus User come first, implementation later example mycli bpython Configurability subjective options only (e.g., color) Checklist Persistent history History search Emacs Keybindings Paged Output Auto-Completion Minimal Config Syntax Coloring Toolkit python-prompt-toolkit prompt hisotry auto_suggest completer lexer pygements lexers","tags":"PyCon US 2017","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2017/2020/01/awesome-command-line-tools","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2017/2020/01/awesome-command-line-tools"},{"title":"Memory Management in Python - The Basics","text":"Speaker Nina Zakharenko Material video slide Note How does Python store object in memory name -> reference -> object Python Object Types Simple (e.g., numbers, strings) Containers (dict, list, user defined-class) Every Python object holds type value ref count Reference Count Decrease ref count del remove the name as a reference instead of delete the object decrease the reference count by 1 going out of scope Global Namespace never go out of scope → refcount never reach 0 Avoid putting large or complex objects in the global namespace Common Garbage Collection Techniques Reference Counting Concept add / remove ref delete object if refcount reaches 0 The good Easy to implement When refcount is 0 objects are immediately delete. The bad space overhead execution overhead The ugly not thread safe doesn't detect cyclical ref Tracing (mark and sweep) What algorithm does Python use? Reference Counting + Generational __slot__ Attribute Declarations When to use If we're going to create lots of instances If we know the properties in advance","tags":"PyCon US 2016","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2016/2020/01/memory-management-in-python-the-basics","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2016/2020/01/memory-management-in-python-the-basics"},{"title":"Elegant Solutions For Everyday Python Problems","text":"Speaker Nina Zaharenko (@nnja) Material video slide Note Magic methods: __func__ Custom iterator __iter__ : Make classes iterable returns an iterator __next__ : Make class iterator raises StopIteration when there is no more items to return Use a generator when your iterator doesn't need to maintain a lot of state Method magic getattr(object, name, default) call function by name string use case cli tool with dynamic commands functool.partial(func, *args, **kwargs) Context manager perform an action before and/or after an operation use case close a resource (e.g., file, network, database) perform clean up before/after function call feature flags: turn feature of your application on and off easily A/B Testing Rolling Releases from contextlib import contextmanager Decorators Wrap a function in another function to do something before the call after the call with provided arguments Problem: lost context using a decorator Solution: from contextlib import wraps Use case logging timing validation rate limiting mocking/patching ConextDecorator By use it, you can write classes that can be used both as decorator and context managers It's included if implemented through from contextlib import contextmanger .","tags":"PyCon US 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/elegant-solutions-for-everyday-python-problems","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/elegant-solutions-for-everyday-python-problems"},{"title":"Demystifying the Patch Function","text":"Speaker Lisa Roach Material video Note Patch: temporarily replace your target with MagicMock() Target: 'package.module.ClassName' When should you mock? When you don't want to actually call an object e.g., database, system call What makes it so confusing? Identifying the target Multiple ways to call Patch Target must be importable Patch where the object is used # module.py from db import db_write # test_module.py @patch ( \"module.db_write\" ) How to call Patch Context Manager Function / Class Decorators Manual start/stop Spec The spec arguments: spec , autospec , spec_set Mock Problems that spec can solve Misspelled asserts look like attributes Mocked objects called incorrectly pass silently A MagicMock dir() assert_any_call assert_called assert_called_once assert_called_once_with assert_called_with ... return_value side_effect A Specced MagicMock spec=True The attribute of patched object is now in MagicMock. We can now only get attribute that exists. It does not know the attribute of your attribute → autospec=True However, autospec can be dangerous. It will run the code that will be triggered when introspected. It doesn't know dynamically created attribute (including the ones in __init__ ) → manually create it spec_set=True prevent you from setting attribute that does not exist Other arguments new_callable Common Use case: Mocking property object new create kwargs return_value set attribute Readmore patch.object patch.dict patch.multiple","tags":"PyCon US 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python"},{"title":"Wily Python: Writing simpler and more maintainable Python","text":"Speaker Anthony Shaw Material video slide wily Note Program Complexity Cyclomatic Complexity Halstead Metrics Maintainability Index radon : tool to calculate program complexity wily : tool to track complexity change over time wily build <path> wily report <path> wily graph <path> Take away Make sure you have good behavioral test coverage Refactor often Divide and Conquer → Spread complexity","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/01/wily-python-writing-simpler-and-more-maintainable-python","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/01/wily-python-writing-simpler-and-more-maintainable-python"},{"title":"Improving PyPI's security with Two Factor Authentication","text":"Speaker William Woodruff Material video Note PyPI now supports two factor authentication Two factor authentication First factor: your password or something you know Second Factor: something that you (and only you) have Why 2FA? Adding a second factor prevents/mitigates data leak but 2FA isn't panacea 2 FA methods SMS/voice Don't use it Problem: Nothing about the phone network is secure e.g., SS7 attacks, SIM ports & jacking, SMS interception do not use it in new service HOTP-based physical keys Special device high cost TOTP (Time-based one-time passwords ): your baseline 2FA Symmetric cryptography with a single shared secret design suggestion do: require users to enter a TOTP code provide both a provisioning URI and a QR code don't use uncommon TOTP parameters (bad client support) nag users for TOTP codes on every single action WebAuthn (U2F) Asymmetric, public-key crpyography Hardware agnostic Supported by most browser (W3C standard) design suggestion do allow anonymous attestation (ECDAA) (e.g., TouchID) support multiple WebAuthn keys per user force user to tag/label their keys don't make users choose between TOTP and WebAuthn → Let them do both use us2.js or any other pre-WebAuthn lib Conclusion You should add 2FA to your services and phasing out SMS 2FA TOTP pyca/crptography WebAuthn Py_webauthn is a little rough, but production ready","tags":"PyGotham 2019","url":"https://lee-w.github.io/pycon-note/posts/pygotham-2019/2019/12/improving-pypi-s-security-with-two-factor-authentication","loc":"https://lee-w.github.io/pycon-note/posts/pygotham-2019/2019/12/improving-pypi-s-security-with-two-factor-authentication"},{"title":"Keynote - Russell Keith-Magee","text":"Speaker Russell Keith-Magee Material video Where do you see Python in 10 years? Python's Black Swan Black Swan 1: Everyone uses a laptop? What happens to Python when laptop no longer exist? 2: Python can stay on the server 3: Installation is a solved problem 4: Code distribution doesn't matter America Cup Lesson 1: It's not enough to just follow the rules. You have to ensure the competition is fair. Lesson 2: Watch out for Black Swans Challenge the assumption Lesson 3: The team matters Lesson 4: Money makes things happen Expertise costs 5 Call to action Start thinking about Black swans (before it's too late) Improve resourcing of maintenance and R&D efforts Value contributors and their contributions Get out your wallet xD Contribute","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/12/Keynote-Russell-Keith-Magee","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/12/Keynote-Russell-Keith-Magee"},{"title":"Python Dependency Management","text":"Speaker Patrick Muehlbauer Material video Note Problems multiple tools for the whole workflow no real dependency resolution in pip multiple files needed for reproducible env (e.g., requirements.txt , dev-requirements.txt ) Possible Solutions reproducible env Pipfile, Pipfile.lock distutils/setuptools limitations pyproject.toml Python dependency managers pipenv pip-tools poetry hatch conda Bento flit pants/ pex Which to choose? It depends. Questions to ask Are building a library or an application? Doest it fit my infra? pip-tools pip-compile : generates requirements.txt from setup.py or requirements.in pip-sync : dependency synchronization Pipenv wrapper around pip and virtual environments use Pipfile , Pipfile.lock for applications rather than libraries separate sections for dev and man dependencies Poetry tool to manage dependencies, build and publish packasge use pyproject.toml , poetry.lock hatch simplifies development workflow warps multiple tools ( pip , virtualenv , twine , pytest , coverage.py ) setup.py , requirements.txt","tags":"PyCon DE 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-de-2018/2019/12/python-dependency-management","loc":"https://lee-w.github.io/pycon-note/posts/pycon-de-2018/2019/12/python-dependency-management"},{"title":"How to Level Up","text":"Speaker Leta Montopoli GitHub Material slide Note Be Curious What curiosity looks like ask question ← showing not ok with not understanding be open to learning from anyone contemplate if there is a better way focus on learning goals learn about the tools you use experimenting Be Brave When you get that nervous / excited feeling in your stomach, that's a sign you gotta continue. What bravery looks like Volunteer for things that scare you Teach others, even if you aren't an \"expert\" ask basic and dumb questions read things you don't understand Be Dissatisfied What dissatisfaction looks like Hunting for inefficiencies Have pet projects Make thins faster Be reflective Bing reflective helps us learn through experience What being reflective looks like Journal everyday Learn from your successes and your failures","tags":"PyCon CA 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/how-to-level-up","loc":"https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/how-to-level-up"},{"title":"From days to minutes, from minutes to milliseconds with SQLAlchemy","text":"Speaker Leonardo Rochael Almeida Material video Note SQLAlchemy SQL Expression Language (a Python DSL) Object Relational Mapper (ORM) The ORM Trap Sensible Python Code → Bad SQL access patterns unnoticeable at low data volumes e.g., dev and early production The Fix: Let the DB do its job Be aware of implicit queries especially from relationships Aim for O(1) queries per request/job/activity Avoid looping through model instances","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/from-days-to-minutes-from-minutes-to-milliseconds-with-SQLAlchemy","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/from-days-to-minutes-from-minutes-to-milliseconds-with-SQLAlchemy"},{"title":"Programmatic Notebooks with papermill","text":"Speaker Matthew Seal Material video slide Note papermill scrapbook The bad side of Jupyter notebook Lack of history Difficult to test Mutable document Hard to parameterize Live collaboration Filling the Gaps - papermill Things to preserve results linked to code good visuals easy to share Things to improve not versioned mutable state templating New Users & Extensions Easy to extend They're all component","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/programmatic-notebooks-with-papermill","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/programmatic-notebooks-with-papermill"},{"title":"Everything at Once: Python's Many Concurrency Models","text":"Speaker Jess Shapiro Material video Note available options in Python asyncio Python threads GIL-released thread multiprocessing distributed tasks parallelism Do things actually happen simultaneously? How does performance scale when you add more CPUs? minimum schedulable unit How big are the code can be run independently? data sharing and isolation how isolated is data between tasks? how long does data stay the same for? what tools can be used to share data? asyncio one coroutine runs at a time event loop global state is shared and consistent within each block Python threads One thread runs (GIL) Global state is shared but consistent only for single bytecodes ops e.g, single bytecodes ops: func(**kw) , non-single bytecodes ops: x += 1 , dict,items() combined scheduling GIL-released threads multiple threads run simultaneously Global state is shared but unreliable OS-scheduled multiprocessing multiple processes run simultaneously global state starts the same as parent, but evolves independently OS-scheduled Distributed Tasks Multiple tasks run simultaneously Global state totally independent Central orchestrator","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/everything-at-once-python-s-many-concurrency-models","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/everything-at-once-python-s-many-concurrency-models"},{"title":"Does remote work really work?","text":"Speaker Lauren Schaefer Material video slide Note Think about a time you were fabulously productive. Open offices spaces , Working remotely and Cubeland all can be THE WORST. Why do you want to work remotely? unable to relocate lengthy commutes availability for children or aging parents distracting office environments travel the world Why do employers offer remote job? attract and retain top talent increate employee morale save money increase employee productivity Fewer sick days Shorter breaks Fewer distractions What does the research say? The more experience you have, the more likely you can have a remote job. The down side professional isolation negatively impacts job performance having a remote manager may negatively impact you remote employees fear stalling careers isolation distractions blurred lines between work and home life remote work encourages employees to \"overwork and to allow their work to infringe on their family role\" How to convince your boss to let you work remotely? Propose an experiment But what about collaboration and water-cooler conversations? When all else fails, talk about the bottom line. How to be a successful remote employee ( Important ) Join the right team e.g., fully distributed team consider the communication styles schedule one-on-one for each member Show picture of yourself For becoming the real person Be productive Set daily goal Create a work space suitable Don't work on your couch Communicate with you team Make sure you're making thing person as you're in office Be a great PR agent for yourself Travel Get out your home office Get a chance to meet a coworker in person Actively prevent burnout Take a lunch break Stretch before meeting Turn off your computer after work Include notifications","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/does-remote-work-really-work","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/does-remote-work-really-work"},{"title":"Life Is Better Painted Black, or: How to Stop Worrying and Embrace Auto-Formatting","text":"Speaker Łukasz Langa Material video Note Problem Statement From Style Guide (PEP 8) to Code Style Sol 1: Linters It still has human labor involves. Sol 2: Auto-formatting Why people don't like auto-formatting? → too destructive What we can learn from Go Community? → Uniformity Trumps Perfection The good enough uniform format style is better than having a lot of different formatting that are locally better but is inconsistence Auto-formatter in different languages gofmt for go Prettier for javascript black for Python Design and implementation Goal Opinionated Deterministic Consistent Fast Tips for adoption git-hyper-blame pre-commit","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting"},{"title":"Pipenv: The Future of Python Dependency Management","text":"Speaker Kenneth Reitz Material video Note Packaging History unzip and install from setup.py easy_install pip , virtualenv , requirements.txt Python has no lock files! Pipenv Pipfile TOML: easy to read/ write manually Two groups: [package] , [dev-package] Pipfile.lock JSON: machine readable transitive dependencies pinned with all acceptable hashes for each releases Two groups: default , develop Install packages concurrently Support multiple source pipenv --venv : show you the venv created pipenv --graph : show dependency tree pipenv check : check the vulnerability of packages e.g., pipenv install django==1.4.2 pipenv install --deploy pipenv install --ignore-pipfile pipenv --python <version> : automatically install certain python version if you have pyenv installed pipenv lock -r : generate requirements.txt We should put the lock file on source control. pipenv uninstall uninstall only the package. pipenv sync is needed to uninstall all its transitive dependencies. Pipenv finds created venv through path of the directory. Thus, if you move the directory, you'll have to create a new virtual environment. Pipenv won't be a replacement for setup.py Pipenv is for application. setup.py is for lib.","tags":"PyCon US 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management"},{"title":"Pytest: Rapid Simple Testing","text":"Speaker Florian Bruhin Material video Note Why pytest assertion rewrite parameterize fixtures built-in fixtures tmpdir monkeypatch plugins pytest-cov pytest-bdd pytest-sugar","tags":"Swiss Python Summit 2016","url":"https://lee-w.github.io/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing","loc":"https://lee-w.github.io/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing"},{"title":"Python Security Tool","text":"Speaker Terri Oda Material video Detecting Known Vulnerability CVE : database with known software vulnerability Tools safety Free db: update monthly Paid db: update realtime pipenv check Safety vs Pipenv: Which one is better? Neither! They use the same database Code Quality pylint Security Value: Low bandit Goal: find security issues Security Value: High Sometimes you don't want to fix all your Bandit warnings Use them as a way to focus code review instead Code Quality - some anti-patterns What Errors Are Included in the Top 25 Software Errors? Use these tools CI During code review Before release How do I secure python? Check for known vulnerabilities safety check or pipenv check Check for code quality pylint for basic linting bandit for security linting other static analysis for more Review secure coding guidelines for python to improve code reviews","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool"},{"title":"這樣的開發環境沒問題嗎？","text":"Speaker Tzu-ping Chung Material video slide Note interpreter → tools → dependencies → application Dependencies Try Pipenv Tools pipsi can be an option. But, it has not been updated for a while. mkdir -p ~/.local/bin ~/.local/venvs python3 -m venv ~/.local/venvs/pipenv ~/.local/venvs/pipenv/bin/pip install pipenv ln -s ~/.local/venvs/pipenv/bin/pipenv ~/.local/bin pipenv --version Rule of Thumb Do not use sudo . Ever. Always use virtual environements Use --user when desperate Interpreter Linux Ubuntu: use \"deadsnakes\" PPA macOS Do not use System Python, Homebrew Python Must compile your own Windows Just download it from python.org or use pythonup","tags":"PyCon TW 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-tw-2018/2019/10/is-your-dev-env-alright","loc":"https://lee-w.github.io/pycon-note/posts/pycon-tw-2018/2019/10/is-your-dev-env-alright"},{"title":"Modern development environments for Pythonistas","text":"Speaker Dustin Ingram Material video Note Speaker Dustin Ingram ( twitter ) Organize PyTexas PyPi contributor Topics dev, test env dependency workflows linting & autoformatting go to prod Focus: anything that's not code and will be check into code base dev, test environment Your development environment. \"But it works on my machine\" You laptop is not production. Problem: virtualenv only isolate Python. Platform-level stuff are still shared. Fully isolate a reproducible environments containerization (e.g., docker) Dockerfile docker-compose A modern workflow for dependencies Problems: When install a new package and it depends on newer version of old dependency, it might upgrade unnoticeably. Don't pip freeze > requirements.txt anymore Bad Get everything from your system Good Version pinning Managing sub-dependencies pip-tools pip-tools Pin and compile the dependencies and sub-dependencies sh pip-compile requirements.in Pinning and compiling only get 90% Artifact hashing pip compile --generate-hashes requirements.in pip install --require-hashes -r requirements.txt Now our deps are 100% frozen When / How to upgrade dependencies When: early and often How: automated dependency services → scan you repo and see your deps pyup.io dependabot Linting and autoformatting Use black Taking your env to prod Through services that supports deployment through container Conclusion Use docker Use docker-compose Use pip-compile from pip-tools Use dependabot / pyup.io for auto-upgrade deps Use dependabot Deploy your docker container to prod Q & A Q: pipenv, poetry or pip-tools A: Personal preference","tags":"PyCon JP 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-jp-2019/2019/10/modern-development-environments-for-pythonistas","loc":"https://lee-w.github.io/pycon-note/posts/pycon-jp-2019/2019/10/modern-development-environments-for-pythonistas"},{"title":"Automating Code Quality","text":"Speaker Kyle Knapp Materials video Note example aws/chalice Steps to automation tools flake8 pycodestyle → style pyflakes → bug mccabe → complexity flake8 --max-complexity ... pylint similar but stricter and more optional than flake8 coverage other tools: mypy , doc8 , pydocstyle automation on local env Makefile requirements-dev.txt atuomation on prod env Makefile requirements-prod.txt Best practices Always improve quality check Avoid compromising existing quality checks Be aware automated quality checks does not guarantee code quality","tags":"PyCon US 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality"},{"title":"Ace Your Technical Interview Using Python","text":"Speaker Erin Allard Material video slide Note Technical Interview Process Recruiter phone screen Technical phone screen with an engineer Take-home assessment Onsite interviews' Non-technical skill matters (a lot) problem solving ask good questions How to Ask Good Questions understand assumption Code (obviously) matters collections time complexity recursion base case progress object-oriented programming data structure & algorithm Coding challenges: quality over quantity Mindset is key Failure and rejection are part of the process You don't need every company to want to hire you","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python"},{"title":"API Evolution the Right Way","text":"Speaker A. Jesse Jiryu Davis Material video article Note Avoid Bad Features Minimize Features Keep Feature Narrow Mark Experimental Features \"Provisional\" Delete Feature Gently Deprecated warning Instructive error Maintain a Change Log Choose a Version Scheme Semantic Versioning Time-based Versioning Write an Upgrade Guide Add parameter compatibly （and fail loudly!） Add default value for new added parameter that preserve old behavior Use * <- all parameters after it can only be passed by name Changing Behavior without Changing API Add a flag default False but warn if it's False Phrase 2. Change default to True, deprecate flag Phrase 3. Remove flag","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way"},{"title":"Break the Cycle: Three excellent Python tools to automate repetitive tasks","text":"Speaker Thea Flowers Material video Note goal reduce toil (redundant boring stuff) tools tox for automating python package testing nox flexible test automation the configuration file is python noxfile.py invoke task execution tool a tool framework invoke example from invoke import task @task def authors ( ctx ): \"\"\"Print all the authors in this project\"\"\" result = ctx . run ( \"git log --pretty=format: \\\" %a n < %a e> \\\" \" , encoding = \"utf-8\" , hide = True ) authors = set ( result . stdout . splitlines ()) authors = sorted ( authors ) for author in authors : print ( author ) @task def changelog ( ctx , since ): \"\"\"Print the changelog since given git ref\"\"\" result = ctx . run ( f \"git log {since} ..HEAD --format= %s \" , encoding = \"utf-8\" , hide = True ) changes = result . stdout . splitlines () print ( f \"Changelog sine {since} :\" ) for change in changes : print ( f \"- {change} \" )","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks"},{"title":"Escape from auto-manual testing with Hypothesis!","text":"Speaker Zac Hatfield-Dodds Material video slide Note Property-based testing User Describes valid input Writes tests that passes for any valid input Strategies and Tactics strategies ( st ) values collections map and filter methods complicated data recursive strategies combine strategies builds() : custom object inferring strategies hypothesis.extra st.data() tactics: what do we tests? auto-manual testing: output == expected oracle tests (full specification) partial specification \"Does not crash\" Just call your function with valid input Round trip e.g., json.dumps / json.loads Metamorphic Relation Although we don't know the relation between input and output, we might know how output should change. Stateful Testing (N)DFA RuleBasedStateMachine Observability --hypothesis-show-statistics timing stats perf breakdown exit reasons Use note() if you like print-debugging","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis"},{"title":"Getting Started Testing in Data Science","text":"Speaker Jes Ford Material video slide-origin slide-flatten Note Data Science Workflows One-off analysis Exploratory Well defined problem Data Science Domain Problem Working with Pandas DataFrames Pandas built-in testing methods from pandas.util.testing import assert_frame_equal check_like check_dtype Working with DB mock data that should be get from database and test only behavior Generating Dataframe for Testing hypothesis","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science"},{"title":"Practical decorators","text":"Speaker Reuven M. Lerner Material video Note usage examples timing limited call (e.g., function can be called once per minute) memoization (i.e. caching) add class attribute (e.g., better __repr__ )","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/practical-decorators","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/practical-decorators"},{"title":"Scraping a Million Pokemon Battles: Distributed Systems By Example","text":"Speaker Duy Nguyen Material video slide Note Scalability and 3 \"Pillars\" Concurrency of Resources Asserting for Correctness Resilience against Failures New Problems Loss of determinism Long startup times (e.g., initialize message queue) Increases flakiness Correctness Resilience","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example"},{"title":"Solve Your Problem With Sloppy Python","text":"Speaker Larry Hastings Material video Note Personal Description It's an introduction for how to use python as the shell script The rules fail early and noisily stop writing the shell script The guidelines try automating even more try new libraries/technologies","tags":"PyCon AU 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/solve-your-problem-with-sloppy-python","loc":"https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/solve-your-problem-with-sloppy-python"},{"title":"The Zen of Python Teams","text":"Speaker Adrienne Lowe Leading with Spoons adriennefriend Material video Note Beautiful is better than ugly. Be kind Accelerate Explicit is better than implicit Documenting process makes it easier for others to join you. resource onboard guide how to contribute where to get help Keep your conversation about work in public Document your peoeple I enjoy working on ... I get excited by ... I struggle when ... I feel appreciated when ... Ask me for help with ... Simple is better than complex. Build meaningful relationships with small interactions Error should never pass silently With humans, we have to rely on other humans to tell us when we broke them. In the face of ambiguity, refuse the temptation to guess. Now is better than never. Doing and being wrong is a lot better than not doing at all.","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams"},{"title":"Time to take out the rubbish: garbage collector","text":"Speaker Material video Note We do not use __del__() to clean up. Use with instead","tags":"PyCon US 2019","url":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector","loc":"https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector"},{"title":"Watch out for Safety Bandits!","text":"Speaker Tennessee Leeuwenburg Material video Note The \"Essential Two\" security problems Problems someone else made safety : Dependency Checking You can use pip install insecure-package to try it. Problems you made bandit : Static Analysis (e.g., rule-based syntax / style)","tags":"PyCon AU 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits","loc":"https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits"},{"title":"Why you should care about types: How Python typing helped my team scale","text":"Speaker Luka Sterbic Material video Note Are Python types Pythonic? import this >>> Explicit is better than implicit . >>> Readability counts >>> In the face of ambiguity , refuse the temptation to guess . If nothing else, because Guido said so 😆 Type 101 Collection, Union, Optional, Type from typing import Type , TypeVar class BaseClass : pass class DerivedClass ( BaseClass ): pass T = TypeVar ( \"T\" , bound = BaseClass ) def factory ( clazz : Type [ T ]) -> T : return claszz () Tool GitHub - Instagram/MonkeyType: A system for Python that generates static type annotations by collecting runtime types","tags":"PyCon AU 2018","url":"https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/why-you-should-care-about-types","loc":"https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/why-you-should-care-about-types"}]};