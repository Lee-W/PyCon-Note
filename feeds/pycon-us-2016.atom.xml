<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note - PyCon US 2016</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/pycon-us-2016.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2020-01-20T18:20:00+08:00</updated><entry><title>Memory Management in Python - The Basics</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2016/2020/01/memory-management-in-python-the-basics" rel="alternate"></link><published>2020-01-20T18:20:00+08:00</published><updated>2020-01-20T18:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-20:/pycon-note/posts/pycon-us-2016/2020/01/memory-management-in-python-the-basics</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zakharenko&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=F6u5rhUQ6dU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2016/nina-zakharenko-memory-management-in-python-the-basics"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How does Python store object in memory&lt;ul&gt;
&lt;li&gt;name -&amp;gt; reference -&amp;gt; object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python Object Types&lt;ul&gt;
&lt;li&gt;Simple (e.g., numbers, strings)&lt;/li&gt;
&lt;li&gt;Containers (dict, list, user defined-class)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every Python object holds&lt;ul&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;ref count&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference Count&lt;ul&gt;
&lt;li&gt;Decrease ref count&lt;ul&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;remove the name as a reference …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zakharenko&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=F6u5rhUQ6dU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2016/nina-zakharenko-memory-management-in-python-the-basics"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How does Python store object in memory&lt;ul&gt;
&lt;li&gt;name -&amp;gt; reference -&amp;gt; object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python Object Types&lt;ul&gt;
&lt;li&gt;Simple (e.g., numbers, strings)&lt;/li&gt;
&lt;li&gt;Containers (dict, list, user defined-class)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every Python object holds&lt;ul&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;ref count&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference Count&lt;ul&gt;
&lt;li&gt;Decrease ref count&lt;ul&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;remove the name as a reference instead of delete the object&lt;/li&gt;
&lt;li&gt;decrease the reference count by 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;going out of scope&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Global Namespace&lt;ul&gt;
&lt;li&gt;never go out of scope → refcount never reach 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid putting large or complex objects in the global namespace&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Common Garbage Collection Techniques&lt;ul&gt;
&lt;li&gt;Reference Counting&lt;ul&gt;
&lt;li&gt;Concept&lt;ul&gt;
&lt;li&gt;add / remove ref&lt;/li&gt;
&lt;li&gt;delete object if refcount reaches 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The good&lt;ul&gt;
&lt;li&gt;Easy to implement&lt;/li&gt;
&lt;li&gt;When refcount is 0 objects are immediately delete.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The bad&lt;ul&gt;
&lt;li&gt;space overhead&lt;/li&gt;
&lt;li&gt;execution overhead&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The ugly&lt;ul&gt;
&lt;li&gt;not thread safe&lt;/li&gt;
&lt;li&gt;doesn't detect cyclical ref&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracing (mark and sweep)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What algorithm does Python use?&lt;ul&gt;
&lt;li&gt;Reference Counting + Generational&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__slot__&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Attribute Declarations&lt;/li&gt;
&lt;li&gt;When to use&lt;ul&gt;
&lt;li&gt;If we're going to create lots of instances&lt;/li&gt;
&lt;li&gt;If we know the properties in advance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="memory management"></category></entry></feed>