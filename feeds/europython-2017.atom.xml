<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note - EuroPython 2017</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/europython-2017.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2020-10-01T12:03:00+08:00</updated><entry><title>Why you don't need design patterns in Python?</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2017/2020/10/why-you-don't-need-design-patterns-in-python" rel="alternate"></link><published>2020-10-01T12:03:00+08:00</published><updated>2020-10-01T12:03:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-10-01:/pycon-note/posts/europython-2017/2020/10/why-you-don't-need-design-patterns-in-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Sebastian Buczyński&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G5OeYHCJuv0"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ep2017.europython.eu/media/conference/slides/why-you-dont-need-design-patterns-in-python.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;p&gt;As the speaker stated in youtube comments, &lt;strong&gt;"Why you don't need SOME design patterns in Python?"&lt;/strong&gt; could be a better title for this talk.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Singleton Pattern&lt;ul&gt;
&lt;li&gt;using a module may be a better solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facade Pattern&lt;ul&gt;
&lt;li&gt;Helpful to organize code, no need for …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Sebastian Buczyński&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G5OeYHCJuv0"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ep2017.europython.eu/media/conference/slides/why-you-dont-need-design-patterns-in-python.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;p&gt;As the speaker stated in youtube comments, &lt;strong&gt;"Why you don't need SOME design patterns in Python?"&lt;/strong&gt; could be a better title for this talk.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Singleton Pattern&lt;ul&gt;
&lt;li&gt;using a module may be a better solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Facade Pattern&lt;ul&gt;
&lt;li&gt;Helpful to organize code, no need for a class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command Pattern (object oriented callback)&lt;ul&gt;
&lt;li&gt;just use plain function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visitor Pattern&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getattr&lt;/code&gt; or &lt;code&gt;from functools import singledispatch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decorator Pattern&lt;ul&gt;
&lt;li&gt;Decorator pattern is not &lt;code&gt;@decorator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def __getattr__(self)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2017"></category><category term="design pattern"></category></entry></feed>