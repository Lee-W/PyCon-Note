<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note - EuroPython 2020</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/europython-2020.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2020-07-31T12:00:00+08:00</updated><entry><title>Making Pandas Fly</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2020/2020/07/making-pandas-fly" rel="alternate"></link><published>2020-07-31T12:00:00+08:00</published><updated>2020-07-31T12:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-07-31:/pycon-note/posts/europython-2020/2020/07/making-pandas-fly</id><summary type="html">
&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ianozsvald.com/"&gt;Ian Ozsvald&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ep2020.europython.eu/media/conference/slides/A7TniMV-making-pandas-fly.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="pandas"&gt;pandas&lt;/h3&gt;
&lt;h4&gt;saving RAM&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Stings are expensive and slow → &lt;a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html"&gt;Categorical&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;df.CompanyCategory.astype('category')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cheap and faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float64&lt;/code&gt; is default and a bit expensive&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float32&lt;/code&gt; "half-price" and a bit faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ianozsvald/dtype_diet/"&gt;dtype_diet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;drop to numpy if you know you can&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;df['age_years' …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">
&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ianozsvald.com/"&gt;Ian Ozsvald&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ep2020.europython.eu/media/conference/slides/A7TniMV-making-pandas-fly.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="pandas"&gt;pandas&lt;/h3&gt;
&lt;h4&gt;saving RAM&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Stings are expensive and slow → &lt;a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html"&gt;Categorical&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;df.CompanyCategory.astype('category')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cheap and faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float64&lt;/code&gt; is default and a bit expensive&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float32&lt;/code&gt; "half-price" and a bit faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ianozsvald/dtype_diet/"&gt;dtype_diet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;drop to numpy if you know you can&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;df['age_years'].sum()&lt;/code&gt; is much slower than &lt;code&gt;df['age_years'].values.sum()&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;bypass a lots of method searching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;install optional pandas dependencies&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pydata/numexpr"&gt;numexpr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pydata/bottleneck"&gt;bottleneck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;mistakes slow us down&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;try nullable Int64, boolean, forthcoming Float64&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ianozsvald/notes_to_self"&gt;ianozsvald/note_to_self&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="other-than-pandas"&gt;Other than pandas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;compile to Numba&lt;/li&gt;
&lt;li&gt;Dask for multi-core&lt;ul&gt;
&lt;li&gt;make plain-python code multi-core&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vaexio/vaex"&gt;Vaex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/modin-project/modin"&gt;Modin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2020"></category><category term="data"></category><category term="WIP"></category></entry><entry><title>Practical Optimisations for Pandas</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2020/2020/07/practical-optimisations-for-pandas" rel="alternate"></link><published>2020-07-29T15:44:00+08:00</published><updated>2020-07-29T15:44:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-07-29:/pycon-note/posts/europython-2020/2020/07/practical-optimisations-for-pandas</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/eyaltra"&gt;Eyal Trabelsi&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ep2020.europython.eu/media/conference/slides/8pANAid-practical-optimisations-for-pandas.html"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use what you need&lt;ul&gt;
&lt;li&gt;keep needed columns and rows only&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;avoid loop&lt;ul&gt;
&lt;li&gt;use vectorized operations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type matters&lt;ul&gt;
&lt;li&gt;supported types&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objects&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;datetime64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Category&lt;/li&gt;
&lt;li&gt;Sparse Types&lt;/li&gt;
&lt;li&gt;Nullable Integer / Nullable boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pandas usage&lt;ul&gt;
&lt;li&gt;chunks&lt;/li&gt;
&lt;li&gt;query&lt;ul&gt;
&lt;li&gt;use &lt;a href="https://github.com/pydata/numexpr"&gt;numexpr&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;df[df.col == "val …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/eyaltra"&gt;Eyal Trabelsi&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ep2020.europython.eu/media/conference/slides/8pANAid-practical-optimisations-for-pandas.html"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use what you need&lt;ul&gt;
&lt;li&gt;keep needed columns and rows only&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;avoid loop&lt;ul&gt;
&lt;li&gt;use vectorized operations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type matters&lt;ul&gt;
&lt;li&gt;supported types&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objects&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;datetime64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Category&lt;/li&gt;
&lt;li&gt;Sparse Types&lt;/li&gt;
&lt;li&gt;Nullable Integer / Nullable boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pandas usage&lt;ul&gt;
&lt;li&gt;chunks&lt;/li&gt;
&lt;li&gt;query&lt;ul&gt;
&lt;li&gt;use &lt;a href="https://github.com/pydata/numexpr"&gt;numexpr&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;df[df.col == "val"]&lt;/code&gt; → &lt;code&gt;df.query("col=='val'")&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;concat&lt;/code&gt; instead op &lt;code&gt;append&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;groupby&lt;ul&gt;
&lt;li&gt;filter early&lt;/li&gt;
&lt;li&gt;custom functions are slow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;merge&lt;ul&gt;
&lt;li&gt;filter / aggregate early&lt;/li&gt;
&lt;li&gt;join on index&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;compiled code&lt;ul&gt;
&lt;li&gt;Cython&lt;/li&gt;
&lt;li&gt;Numba&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General Python techniques&lt;ul&gt;
&lt;li&gt;cache&lt;/li&gt;
&lt;li&gt;use intermediate variables&lt;/li&gt;
&lt;li&gt;concurrency And parallelism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2020"></category><category term="data"></category><category term="WIP"></category></entry><entry><title>Clean Architectures in Python</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2020/2020/07/clean-architectures-in-python" rel="alternate"></link><published>2020-07-29T15:28:00+08:00</published><updated>2020-07-29T15:28:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-07-29:/pycon-note/posts/europython-2020/2020/07/clean-architectures-in-python</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Leonardo Giordani&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ep2020.europython.eu/media/conference/slides/9kugWub-clean-architectures-in-python.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;requirement of architectures&lt;ul&gt;
&lt;li&gt;durability&lt;/li&gt;
&lt;li&gt;utility&lt;/li&gt;
&lt;li&gt;beauty&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is clean?&lt;ul&gt;
&lt;li&gt;you know&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;where&lt;/strong&gt; things are,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;why&lt;/strong&gt; components are there,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;what&lt;/strong&gt; something is.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leanpub.com/clean-architectures-in-python"&gt;Clean Architectures in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="clean-artichecture" src="https://lee-w.github.io/pycon-note/images/post-images/clean-architectures-in-python/clean-artichecture.jpg"&gt;&lt;/p&gt;</content><category term="EuroPython 2020"></category><category term="architecture"></category></entry></feed>