<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note - PyCon US 2018</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/pycon-us-2018.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2020-04-01T17:20:00+08:00</updated><entry><title>What is a Python Core Developer?</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/04/what-is-python-core-developer" rel="alternate"></link><published>2020-04-01T17:20:00+08:00</published><updated>2020-04-01T17:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-04-01:/pycon-note/posts/pycon-us-2018/2020/04/what-is-python-core-developer</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Mariatta Wijaya&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hhj7eb6TrtI"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://noti.st/mariatta/FVuRAR/slides"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python Core Developers&lt;ul&gt;
&lt;li&gt;commit right to CPython&lt;/li&gt;
&lt;li&gt;Responsibilities&lt;ul&gt;
&lt;li&gt;Review / Accept / Reject PRs&lt;/li&gt;
&lt;li&gt;Face the consequence&lt;/li&gt;
&lt;li&gt;Help contributors&lt;/li&gt;
&lt;li&gt;Be the representative for Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;F.A.Q.&lt;/li&gt;
&lt;li&gt;How can I be involved in the community?&lt;br&gt;
        * Help your local meetup&lt;br&gt;
        * No meetup? Start one.&lt;br&gt;
        * Blog about …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Mariatta Wijaya&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hhj7eb6TrtI"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://noti.st/mariatta/FVuRAR/slides"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python Core Developers&lt;ul&gt;
&lt;li&gt;commit right to CPython&lt;/li&gt;
&lt;li&gt;Responsibilities&lt;ul&gt;
&lt;li&gt;Review / Accept / Reject PRs&lt;/li&gt;
&lt;li&gt;Face the consequence&lt;/li&gt;
&lt;li&gt;Help contributors&lt;/li&gt;
&lt;li&gt;Be the representative for Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;F.A.Q.&lt;/li&gt;
&lt;li&gt;How can I be involved in the community?&lt;br&gt;
        * Help your local meetup&lt;br&gt;
        * No meetup? Start one.&lt;br&gt;
        * Blog about Python or your fav library&lt;br&gt;
        * Volunteer at conferences&lt;br&gt;
        * Be open, considerate, and respectful&lt;ul&gt;
&lt;li&gt;How can I contribute?&lt;ul&gt;
&lt;li&gt;Join the communication channels&lt;/li&gt;
&lt;li&gt;Report bugs&lt;/li&gt;
&lt;li&gt;Propose ideas&lt;/li&gt;
&lt;li&gt;Improve documentation&lt;/li&gt;
&lt;li&gt;Review pull requests&lt;/li&gt;
&lt;li&gt;Be open, considerate, and respectful&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can I contribute code?&lt;ul&gt;
&lt;li&gt;Read the contribution guide&lt;/li&gt;
&lt;li&gt;Work on issue&lt;/li&gt;
&lt;li&gt;Propose a pull request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can I contribute code to CPython?&lt;ul&gt;
&lt;li&gt;Read the Dev guide&lt;/li&gt;
&lt;li&gt;Join core-mentorship and python-dev&lt;/li&gt;
&lt;li&gt;Find issue in &lt;a href="https://bugs.python.org/"&gt;bugs.python.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Propose pull request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to find an issue to work on?&lt;ul&gt;
&lt;li&gt;Follow the repo&lt;/li&gt;
&lt;li&gt;Choose an issue based on your interest and skillset&lt;/li&gt;
&lt;li&gt;Do your own research on the issue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to become a core developer?&lt;ul&gt;
&lt;li&gt;Earn the trust from existing core devs&lt;/li&gt;
&lt;li&gt;Accept responsibilities&lt;/li&gt;
&lt;li&gt;Be open, considerate, and respectful&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="Core"></category></entry><entry><title>Inside the Cheeseshop: How Python Packaging Works</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/03/inside-the-cheeseshop-how-python-packaging-works" rel="alternate"></link><published>2020-03-18T17:52:00+08:00</published><updated>2020-03-18T17:52:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-03-18:/pycon-note/posts/pycon-us-2018/2020/03/inside-the-cheeseshop-how-python-packaging-works</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/di_codes"&gt;Dustin Ingram&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AQsZsgJ30AE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dustingram.com/talks/2018/10/23/inside-the-cheeseshop/"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;History of packaging&lt;ul&gt;
&lt;li&gt;&lt;code&gt;distuils&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sdist&lt;/code&gt; -&amp;gt; source distribution&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bdist&lt;/code&gt; -&amp;gt; build distribution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyPI&lt;/code&gt; (Pie-P-I)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setuptools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;easy_intall&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;egg&lt;/li&gt;
&lt;li&gt;&lt;del&gt;pyinstall&lt;/del&gt; &lt;code&gt;pip&lt;/code&gt; (a.k.a. python install package)&lt;/li&gt;
&lt;li&gt;requirements.txt&lt;/li&gt;
&lt;li&gt;PyPI hosts distribution (PEP 427)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;egg&lt;/del&gt; -&amp;gt; wheel (from wheel cheese)&lt;ul&gt;
&lt;li&gt;wheel has specification&lt;/li&gt;
&lt;li&gt;no one reinvents the wheel …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/di_codes"&gt;Dustin Ingram&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AQsZsgJ30AE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dustingram.com/talks/2018/10/23/inside-the-cheeseshop/"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;History of packaging&lt;ul&gt;
&lt;li&gt;&lt;code&gt;distuils&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sdist&lt;/code&gt; -&amp;gt; source distribution&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bdist&lt;/code&gt; -&amp;gt; build distribution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyPI&lt;/code&gt; (Pie-P-I)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setuptools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;easy_intall&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;egg&lt;/li&gt;
&lt;li&gt;&lt;del&gt;pyinstall&lt;/del&gt; &lt;code&gt;pip&lt;/code&gt; (a.k.a. python install package)&lt;/li&gt;
&lt;li&gt;requirements.txt&lt;/li&gt;
&lt;li&gt;PyPI hosts distribution (PEP 427)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;egg&lt;/del&gt; -&amp;gt; wheel (from wheel cheese)&lt;ul&gt;
&lt;li&gt;wheel has specification&lt;/li&gt;
&lt;li&gt;no one reinvents the wheel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Problem Nowadays&lt;ul&gt;
&lt;li&gt;Packaging is hard&lt;ul&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/"&gt;Python Packaging User Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/sampleproject"&gt;pypa/sampleproject&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;need more than Python&lt;ul&gt;
&lt;li&gt;conda&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;reproducible environement&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;arbitrary code in &lt;code&gt;setup.py&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;PEP 517 / 518&lt;/li&gt;
&lt;li&gt;pyproject.toml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="packaging"></category></entry><entry><title>Dataclasses: The code generator to end all code generators</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/dataclasses-the-code-generator-to-end-all-code-generators" rel="alternate"></link><published>2020-01-29T11:32:00+08:00</published><updated>2020-01-29T11:32:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-29:/pycon-note/posts/pycon-us-2018/2020/01/dataclasses-the-code-generator-to-end-all-code-generators</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Raymond Hettinger&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/hettinger.html"&gt;site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What are dataclasses for ?&lt;ul&gt;
&lt;li&gt;mutable data holder&lt;/li&gt;
&lt;li&gt;simplifying the process of writing the class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/basic.html#comparison-with-named-tuples"&gt;Comparison with Named Tuples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;dataclass&lt;ul&gt;
&lt;li&gt;mutable&lt;/li&gt;
&lt;li&gt;unhashable&lt;/li&gt;
&lt;li&gt;more memory usage&lt;/li&gt;
&lt;li&gt;more efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;named tuple&lt;ul&gt;
&lt;li&gt;immutable&lt;/li&gt;
&lt;li&gt;hashable&lt;/li&gt;
&lt;li&gt;less memory usage&lt;/li&gt;
&lt;li&gt;less efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Freezing and Ordering&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@dataclass(order=True, frozen=True …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Raymond Hettinger&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/hettinger.html"&gt;site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What are dataclasses for ?&lt;ul&gt;
&lt;li&gt;mutable data holder&lt;/li&gt;
&lt;li&gt;simplifying the process of writing the class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/basic.html#comparison-with-named-tuples"&gt;Comparison with Named Tuples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;dataclass&lt;ul&gt;
&lt;li&gt;mutable&lt;/li&gt;
&lt;li&gt;unhashable&lt;/li&gt;
&lt;li&gt;more memory usage&lt;/li&gt;
&lt;li&gt;more efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;named tuple&lt;ul&gt;
&lt;li&gt;immutable&lt;/li&gt;
&lt;li&gt;hashable&lt;/li&gt;
&lt;li&gt;less memory usage&lt;/li&gt;
&lt;li&gt;less efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Freezing and Ordering&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@dataclass(order=True, frozen=True)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/custom_fields.html"&gt;Custom Field Specifications&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;field(default_factory=list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field(hash=False)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field(repr=False)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field(compare=False)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="Core"></category></entry><entry><title>Elegant Solutions For Everyday Python Problems</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/elegant-solutions-for-everyday-python-problems" rel="alternate"></link><published>2020-01-13T10:16:00+08:00</published><updated>2020-01-13T10:16:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-13:/pycon-note/posts/pycon-us-2018/2020/01/elegant-solutions-for-everyday-python-problems</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zaharenko (@nnja)&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WiQqqB9MlkA&amp;amp;t=1474s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/nnja/elegant-solutions-for-everyday-python-problems-pycon-2018"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="magic-methods-__func__"&gt;Magic methods: &lt;code&gt;__func__&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Custom iterator&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__iter__&lt;/code&gt;: Make classes &lt;code&gt;iterable&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;returns an iterator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__next__&lt;/code&gt;: Make class &lt;code&gt;iterator&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;raises &lt;code&gt;StopIteration&lt;/code&gt; when there is no more items to return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use a generator when your iterator doesn't need to maintain a lot of state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method magic …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zaharenko (@nnja)&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WiQqqB9MlkA&amp;amp;t=1474s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/nnja/elegant-solutions-for-everyday-python-problems-pycon-2018"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="magic-methods-__func__"&gt;Magic methods: &lt;code&gt;__func__&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Custom iterator&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__iter__&lt;/code&gt;: Make classes &lt;code&gt;iterable&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;returns an iterator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__next__&lt;/code&gt;: Make class &lt;code&gt;iterator&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;raises &lt;code&gt;StopIteration&lt;/code&gt; when there is no more items to return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use a generator when your iterator doesn't need to maintain a lot of state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method magic&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getattr(object, name, default)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;call function by &lt;code&gt;name&lt;/code&gt; string&lt;/li&gt;
&lt;li&gt;use case&lt;ul&gt;
&lt;li&gt;cli tool with dynamic commands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;functool.partial(func, *args, **kwargs)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="context-manager"&gt;Context manager&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;perform an action before and/or after an operation&lt;/li&gt;
&lt;li&gt;use case&lt;ul&gt;
&lt;li&gt;close a resource (e.g., file, network, database)&lt;/li&gt;
&lt;li&gt;perform clean up before/after function call&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feature flags: turn feature of your application on and off easily&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;A/B Testing&lt;/li&gt;
&lt;li&gt;Rolling Releases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from contextlib import contextmanager&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="decorators"&gt;Decorators&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Wrap a function in another function to do something&lt;ul&gt;
&lt;li&gt;before the call&lt;/li&gt;
&lt;li&gt;after the call&lt;/li&gt;
&lt;li&gt;with provided arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Problem: lost context using a decorator&lt;ul&gt;
&lt;li&gt;Solution: &lt;code&gt;from contextlib import wraps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use case&lt;ul&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;li&gt;timing&lt;/li&gt;
&lt;li&gt;validation&lt;/li&gt;
&lt;li&gt;rate limiting&lt;/li&gt;
&lt;li&gt;mocking/patching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="conextdecorator"&gt;ConextDecorator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;By use it, you can write classes that can be used both as decorator and context managers&lt;ul&gt;
&lt;li&gt;It's included if implemented through &lt;code&gt;from contextlib import contextmanger&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="best practices"></category></entry><entry><title>Demystifying the Patch Function</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python" rel="alternate"></link><published>2020-01-08T11:00:00+08:00</published><updated>2020-01-08T11:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-08:/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Lisa Roach&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ww1UsGZV8fQ"&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patch: temporarily replace your target with &lt;code&gt;MagicMock()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Target: &lt;code&gt;'package.modeul.ClassName'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When should you mock?&lt;ul&gt;
&lt;li&gt;When you don't want to actually call an object&lt;ul&gt;
&lt;li&gt;e.g., database, system call&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What makes it so confusing?&lt;ol&gt;
&lt;li&gt;Identifying the target&lt;/li&gt;
&lt;li&gt;Multiple ways to call&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="patch"&gt;Patch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Target must …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Lisa Roach&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ww1UsGZV8fQ"&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patch: temporarily replace your target with &lt;code&gt;MagicMock()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Target: &lt;code&gt;'package.modeul.ClassName'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When should you mock?&lt;ul&gt;
&lt;li&gt;When you don't want to actually call an object&lt;ul&gt;
&lt;li&gt;e.g., database, system call&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What makes it so confusing?&lt;ol&gt;
&lt;li&gt;Identifying the target&lt;/li&gt;
&lt;li&gt;Multiple ways to call&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="patch"&gt;Patch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Target must be importable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Patch where the object is used&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# module.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db_write&lt;/span&gt;

&lt;span class="c1"&gt;# test_module.py&lt;/span&gt;
&lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;module.db_write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How to call Patch&lt;ul&gt;
&lt;li&gt;Context Manager&lt;/li&gt;
&lt;li&gt;Function / Class Decorators&lt;/li&gt;
&lt;li&gt;Manual start/stop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="spec"&gt;Spec&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;spec&lt;/code&gt; arguments: &lt;code&gt;spec&lt;/code&gt;, &lt;code&gt;autospec&lt;/code&gt;, &lt;code&gt;spec_set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mock Problems that &lt;code&gt;spec&lt;/code&gt; can solve&lt;ol&gt;
&lt;li&gt;Misspelled asserts look like attributes&lt;/li&gt;
&lt;li&gt;Mocked objects called incorrectly pass silently&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;A MagicMock&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assert_any_call&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_called&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_called_once&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_called_once_with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_called_with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A Specced MagicMock&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec=True&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The attribute of patched object is now in MagicMock.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We can now only get attribute that exists.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It does not know the attribute of your attribute → &lt;code&gt;autospec=True&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;However, &lt;code&gt;autospec&lt;/code&gt; can be dangerous. It will run the code that will be triggered when introspected.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It doesn't know dynamicaly created attribute (including the ones in &lt;code&gt;__init__&lt;/code&gt;) → manually create it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec_set=True&lt;/code&gt; prevent you from setting attribute that does not exist&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="other-arguments"&gt;Other arguments&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new_callable&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Common Use case: Mocking property object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kwargs&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="readmore"&gt;Readmore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;patch.object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;patch.dict&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;patch.multiple&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="test"></category></entry><entry><title>Pipenv: The Future of Python Dependency Management</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management" rel="alternate"></link><published>2019-11-06T13:21:00+08:00</published><updated>2019-11-06T13:21:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-06:/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kenneth Reitz&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GBQAKldqgZs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Packaging History&lt;ol&gt;
&lt;li&gt;unzip and install from &lt;code&gt;setup.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;easy_install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Python has no lock files!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv-fork.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pipfile&lt;ul&gt;
&lt;li&gt;TOML: easy to read/ write manually&lt;/li&gt;
&lt;li&gt;Two groups: &lt;code&gt;[package]&lt;/code&gt;, &lt;code&gt;[dev-package]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipfile.lock&lt;ul&gt;
&lt;li&gt;JSON: machine readible&lt;/li&gt;
&lt;li&gt;transitive dependencies pinned with all acceptable hashes for each …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kenneth Reitz&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GBQAKldqgZs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Packaging History&lt;ol&gt;
&lt;li&gt;unzip and install from &lt;code&gt;setup.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;easy_install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Python has no lock files!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv-fork.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pipfile&lt;ul&gt;
&lt;li&gt;TOML: easy to read/ write manually&lt;/li&gt;
&lt;li&gt;Two groups: &lt;code&gt;[package]&lt;/code&gt;, &lt;code&gt;[dev-package]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipfile.lock&lt;ul&gt;
&lt;li&gt;JSON: machine readible&lt;/li&gt;
&lt;li&gt;transitive dependencies pinned with all acceptable hashes for each releases&lt;/li&gt;
&lt;li&gt;Two groups: &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install packages concurrently&lt;/li&gt;
&lt;li&gt;Support multiple source&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv --venv&lt;/code&gt;: show you the venv created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv --graph&lt;/code&gt;: show dependency tree&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;: check the vulnerability of packages&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;pipenv install django==1.4.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv install --deploy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv install --ignore-pipfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv --python &amp;lt;version&amp;gt;&lt;/code&gt;: automatically install certain python version if you have &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; installed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv lock -r&lt;/code&gt;: generate &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We should put the lock file on source control.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv uninstall&lt;/code&gt; uninstall only the package. &lt;code&gt;pipenv sync&lt;/code&gt; is needed to uninstall all its transitive dependencies.&lt;/li&gt;
&lt;li&gt;Pipenv finds created venv through path of the directory. Thus, if you move the directory, you'll have to create a new virtual environment.&lt;/li&gt;
&lt;li&gt;Pipenv won't be a replacement for &lt;code&gt;setup.py&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Pipenv is for application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup.py&lt;/code&gt; is for lib.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="dependencies"></category><category term="virtual environment"></category></entry><entry><title>Automating Code Quality</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality" rel="alternate"></link><published>2019-09-30T18:55:00+08:00</published><updated>2019-09-30T18:55:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-09-30:/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kyle Knapp&lt;/p&gt;
&lt;h2 id="materials"&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G1lDk_WKXvY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/chalice"&gt;aws/chalice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steps to automation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;flake8&lt;ul&gt;
&lt;li&gt;pycodestyle → style&lt;/li&gt;
&lt;li&gt;pyflakes → bug&lt;/li&gt;
&lt;li&gt;mccabe → complexity&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flake8 --max-complexity ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pylint&lt;ul&gt;
&lt;li&gt;similar but stricter and more optional than flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;li&gt;other tools: &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;doc8&lt;/code&gt;, &lt;code&gt;pydocstyle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;automation on local env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-dev.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;atuomation on prod env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-prod …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kyle Knapp&lt;/p&gt;
&lt;h2 id="materials"&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G1lDk_WKXvY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/chalice"&gt;aws/chalice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steps to automation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;flake8&lt;ul&gt;
&lt;li&gt;pycodestyle → style&lt;/li&gt;
&lt;li&gt;pyflakes → bug&lt;/li&gt;
&lt;li&gt;mccabe → complexity&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flake8 --max-complexity ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pylint&lt;ul&gt;
&lt;li&gt;similar but stricter and more optional than flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;li&gt;other tools: &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;doc8&lt;/code&gt;, &lt;code&gt;pydocstyle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;automation on local env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-dev.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;atuomation on prod env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-prod.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="pylint-vs-flake8" src="https://lee-w.github.io/pycon-note/images/post-images/automating-code-quality/15698391534086.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best practices&lt;ol&gt;
&lt;li&gt;Always improve quality check&lt;/li&gt;
&lt;li&gt;Avoid compromising existing quality checks&lt;/li&gt;
&lt;li&gt;Be aware automated quality checks does not guarantee code quality&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="code quality"></category><category term="automation"></category></entry></feed>