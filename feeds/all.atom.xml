<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/all.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2019-11-07T10:51:00+08:00</updated><entry><title>Life Is Better Painted Black, or: How to Stop Worrying and Embrace Auto-Formatting</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-uw-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting" rel="alternate"></link><published>2019-11-07T10:51:00+08:00</published><updated>2019-11-07T10:51:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-uw-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Łukasz Langa&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=esZLCuWs_2Y"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Problem Statement&lt;ul&gt;
&lt;li&gt;From Style Guide (PEP 8) to Code Style&lt;ul&gt;
&lt;li&gt;Sol 1: Linters&lt;ul&gt;
&lt;li&gt;It still has human labor involves.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sol 2: Auto-formatting&lt;ul&gt;
&lt;li&gt;Why people don't like auto-formatting? → too destructive&lt;/li&gt;
&lt;li&gt;What we can learn from Go Community? → &lt;code&gt;Uniformity Trumps Perfection&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The good enough uniform format …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Łukasz Langa&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=esZLCuWs_2Y"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Problem Statement&lt;ul&gt;
&lt;li&gt;From Style Guide (PEP 8) to Code Style&lt;ul&gt;
&lt;li&gt;Sol 1: Linters&lt;ul&gt;
&lt;li&gt;It still has human labor involves.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sol 2: Auto-formatting&lt;ul&gt;
&lt;li&gt;Why people don't like auto-formatting? → too destructive&lt;/li&gt;
&lt;li&gt;What we can learn from Go Community? → &lt;code&gt;Uniformity Trumps Perfection&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The good enough uniform format style is better than having a lot of different formatting that are locally better but is inconsistence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Auto-formatter in different languages&lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;gofmt&lt;/a&gt; for go&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; for javascript&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; for Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design and implementation&lt;ul&gt;
&lt;li&gt;Goal&lt;ul&gt;
&lt;li&gt;Opinionated&lt;/li&gt;
&lt;li&gt;Deterministic&lt;/li&gt;
&lt;li&gt;Consistent&lt;/li&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tips for adoption&lt;ul&gt;
&lt;li&gt;&lt;a href="https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/git-hyper-blame.html"&gt;git-hyper-blame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="code quality"></category><category term="automation"></category></entry><entry><title>Pipenv: The Future of Python Dependency Management</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management" rel="alternate"></link><published>2019-11-06T13:21:00+08:00</published><updated>2019-11-06T13:21:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-06:/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kenneth Reitz&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GBQAKldqgZs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Packaging History&lt;ol&gt;
&lt;li&gt;unzip and install from &lt;code&gt;setup.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;easy_install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Python has no lock files!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv-fork.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pipfile&lt;ul&gt;
&lt;li&gt;TOML: easy to read/ write manually&lt;/li&gt;
&lt;li&gt;Two groups: &lt;code&gt;[package]&lt;/code&gt;, &lt;code&gt;[dev-package]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipfile.lock&lt;ul&gt;
&lt;li&gt;JSON: machine readible&lt;/li&gt;
&lt;li&gt;transitive dependencies pinned with all acceptable hashes for each …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kenneth Reitz&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GBQAKldqgZs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Packaging History&lt;ol&gt;
&lt;li&gt;unzip and install from &lt;code&gt;setup.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;easy_install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Python has no lock files!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv-fork.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pipfile&lt;ul&gt;
&lt;li&gt;TOML: easy to read/ write manually&lt;/li&gt;
&lt;li&gt;Two groups: &lt;code&gt;[package]&lt;/code&gt;, &lt;code&gt;[dev-package]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipfile.lock&lt;ul&gt;
&lt;li&gt;JSON: machine readible&lt;/li&gt;
&lt;li&gt;transitive dependencies pinned with all acceptable hashes for each releases&lt;/li&gt;
&lt;li&gt;Two groups: &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install packages concurrently&lt;/li&gt;
&lt;li&gt;Support multiple source&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv --venv&lt;/code&gt;: show you the venv created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv --graph&lt;/code&gt;: show dependency tree&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;: check the vulnerability of packages&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;pipenv install django==1.4.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv install --deploy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv install --ignore-pipfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv --python &amp;lt;version&amp;gt;&lt;/code&gt;: automatically install certain python version if you have &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; installed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv lock -r&lt;/code&gt;: generate &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We should put the lock file on source control.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv uninstall&lt;/code&gt; uninstall only the package. &lt;code&gt;pipenv sync&lt;/code&gt; is needed to uninstall all its transitive dependencies.&lt;/li&gt;
&lt;li&gt;Pipenv finds created venv through path of the directory. Thus, if you move the directory, you'll have to create a new virtual environment.&lt;/li&gt;
&lt;li&gt;Pipenv won't be a replacement for &lt;code&gt;setup.py&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Pipenv is for application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup.py&lt;/code&gt; is for lib.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="dependencies"></category><category term="virtual environment"></category></entry><entry><title>Pytest: Rapid Simple Testing</title><link href="https://lee-w.github.io/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing" rel="alternate"></link><published>2019-11-06T12:00:00+08:00</published><updated>2019-11-06T12:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-06:/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Florian Bruhin&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rCBHkQ_LVIs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why pytest&lt;ul&gt;
&lt;li&gt;assertion rewrite&lt;/li&gt;
&lt;li&gt;parameterize&lt;/li&gt;
&lt;li&gt;fixtures&lt;ul&gt;
&lt;li&gt;build-in fixtures&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmpdir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monkeypatch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;plugins&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-bdd"&gt;pytest-bdd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pivotfinland.com/pytest-sugar/"&gt;pytest-sugar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Florian Bruhin&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rCBHkQ_LVIs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why pytest&lt;ul&gt;
&lt;li&gt;assertion rewrite&lt;/li&gt;
&lt;li&gt;parameterize&lt;/li&gt;
&lt;li&gt;fixtures&lt;ul&gt;
&lt;li&gt;build-in fixtures&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmpdir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monkeypatch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;plugins&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-bdd"&gt;pytest-bdd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pivotfinland.com/pytest-sugar/"&gt;pytest-sugar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="test"></category></entry><entry><title>Python Security Tool</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool" rel="alternate"></link><published>2019-10-26T11:10:00+08:00</published><updated>2019-10-26T11:10:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-10-26:/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Terri Oda&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=e7zzdl8OXCU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="detecting-known-vulnerability"&gt;Detecting Known Vulnerability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cve.mitre.org"&gt;CVE&lt;/a&gt;: database with known software vulerability&lt;/li&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Free db: update monthly&lt;/li&gt;
&lt;li&gt;Paid db: update realtime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Safety vs Pipenv: Which one is better?&lt;ul&gt;
&lt;li&gt;Neither! They use the same database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-quality"&gt;Code Quality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/search?client=firefox-b-d&amp;amp;q=pylint"&gt;pylint&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Security Value: Low&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Goal: find security issues …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Terri Oda&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=e7zzdl8OXCU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="detecting-known-vulnerability"&gt;Detecting Known Vulnerability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cve.mitre.org"&gt;CVE&lt;/a&gt;: database with known software vulerability&lt;/li&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Free db: update monthly&lt;/li&gt;
&lt;li&gt;Paid db: update realtime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Safety vs Pipenv: Which one is better?&lt;ul&gt;
&lt;li&gt;Neither! They use the same database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-quality"&gt;Code Quality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/search?client=firefox-b-d&amp;amp;q=pylint"&gt;pylint&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Security Value: Low&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Goal: find security issues&lt;/li&gt;
&lt;li&gt;Security Value: High&lt;/li&gt;
&lt;li&gt;Sometimes you don't want to fix all your Bandit warnings&lt;/li&gt;
&lt;li&gt;Use them as a way to focus code review instead&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-quality-some-anti-patterns"&gt;Code Quality - some anti-patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sans.org/top25-software-errors/"&gt;What Errors Are Included in the Top 25 Software Errors?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-these-tools"&gt;Use these tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;li&gt;During code review&lt;/li&gt;
&lt;li&gt;Before release&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="how-do-i-secure-python"&gt;How do I secure python?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Check for known vulnerabilities&lt;ul&gt;
&lt;li&gt;&lt;code&gt;safety check&lt;/code&gt; or &lt;code&gt;pipenv check&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for code quality&lt;ul&gt;
&lt;li&gt;pylint for basic linting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bandit&lt;/code&gt; for security linting&lt;/li&gt;
&lt;li&gt;other static analysis for more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review secure coding guidelines for python to improve code reviews&lt;/li&gt;
&lt;/ul&gt;</content><category term="security"></category></entry><entry><title>這樣的開發環境沒問題嗎？</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-tw-2018/2019/10/is-your-dev-env-alright" rel="alternate"></link><published>2019-10-18T23:59:00+08:00</published><updated>2019-10-18T23:59:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-10-18:/pycon-note/posts/pycon-tw-2018/2019/10/is-your-dev-env-alright</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Tzu-ping Chung&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6Nl0IYkU0hU&amp;amp;t=204s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/uranusjr/zhe-yang-de-kai-fa-huan-jing-mei-wen-ti-ma"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;interpreter → tools → dependencies → application&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Try Pipenv&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tools"&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mitsuhiko/pipsi"&gt;pipsi&lt;/a&gt; can be an option. But, it has not been updated for a while.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.local/bin ~/.local/venvs
python3 -m venv ~/.local/venvs/pipenv
~/.local/venvs/pipenv/bin/pip install pipenv
ln -s …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Tzu-ping Chung&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6Nl0IYkU0hU&amp;amp;t=204s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/uranusjr/zhe-yang-de-kai-fa-huan-jing-mei-wen-ti-ma"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;interpreter → tools → dependencies → application&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Try Pipenv&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tools"&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mitsuhiko/pipsi"&gt;pipsi&lt;/a&gt; can be an option. But, it has not been updated for a while.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.local/bin ~/.local/venvs
python3 -m venv ~/.local/venvs/pipenv
~/.local/venvs/pipenv/bin/pip install pipenv
ln -s ~/.local/venvs/pipenv/bin/pipenv ~/.local/bin
pipenv --version
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Rule of Thumb&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Do not use &lt;code&gt;sudo&lt;/code&gt;. Ever.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Always use virtual environements&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;--user&lt;/code&gt; when desperate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="interpreter"&gt;Interpreter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;Ubuntu: use "deadsnakes" PPA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;macOS&lt;ul&gt;
&lt;li&gt;Do not use System Python, Homebrew Python&lt;/li&gt;
&lt;li&gt;Must compile your own&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;Just download it from &lt;a href="https://www.python.org/"&gt;python.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or use &lt;a href="https://github.com/uranusjr/pythonup-windows"&gt;pythonup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="virtual environment"></category></entry><entry><title>Modern development environments for Pythonistas</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-jp-2019/2019/10/modern-development-environments-for-pythonistas" rel="alternate"></link><published>2019-10-02T16:20:00+08:00</published><updated>2019-10-02T16:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-10-02:/pycon-note/posts/pycon-jp-2019/2019/10/modern-development-environments-for-pythonistas</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dustin Ingram&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=d3cj4f63u-A"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Speaker&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dustin Ingram (&lt;a href="https://twitter.com/di_codes"&gt;twitter&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Organize PyTexas&lt;/li&gt;
&lt;li&gt;PyPi contributor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dev, test env&lt;/li&gt;
&lt;li&gt;dependency workflows&lt;/li&gt;
&lt;li&gt;linting &amp;amp; autoformatting&lt;/li&gt;
&lt;li&gt;go to prod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Focus: anything that's not code and will be check into code base&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dev-test-environment"&gt;dev, test environment&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Your development environment.&lt;br&gt;
"But it works on my machine"&lt;/p&gt;
&lt;p&gt;You …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dustin Ingram&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=d3cj4f63u-A"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Speaker&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dustin Ingram (&lt;a href="https://twitter.com/di_codes"&gt;twitter&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Organize PyTexas&lt;/li&gt;
&lt;li&gt;PyPi contributor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dev, test env&lt;/li&gt;
&lt;li&gt;dependency workflows&lt;/li&gt;
&lt;li&gt;linting &amp;amp; autoformatting&lt;/li&gt;
&lt;li&gt;go to prod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Focus: anything that's not code and will be check into code base&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dev-test-environment"&gt;dev, test environment&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Your development environment.&lt;br&gt;
"But it works on my machine"&lt;/p&gt;
&lt;p&gt;You laptop is not production.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Problem: &lt;code&gt;virtualenv&lt;/code&gt; only isolate Python. Platform-level stuff are still shared.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fully isolate a reproducible environments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;containerization (e.g., docker)&lt;ul&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-modern-workflow-for-dependencies"&gt;A modern workflow for dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Problems: When install a new package and it depends on newer version of old dependency, it might upgrade unnoticeably.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; anymore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bad&lt;ul&gt;
&lt;li&gt;Get everything from your system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Good&lt;ul&gt;
&lt;li&gt;Version pinning&lt;/li&gt;
&lt;li&gt;Managing sub-dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pip-tools"&gt;pip-tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jazzband/pip-tools/"&gt;pip-tools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pin and compile the dependencies and sub-dependencies&lt;br&gt;
&lt;code&gt;sh
    pip-compile requirements.in&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Pinning and compiling only get 90%&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Artifact hashing&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip compile --generate-hashes requirements.in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install --require-hashes -r requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Now our deps are 100% frozen&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="when-how-to-upgrade-dependencies"&gt;When / How to upgrade dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When: early and often&lt;/li&gt;
&lt;li&gt;How: automated dependency services → scan you repo and see your deps&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pyup.io"&gt;pyup.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dependabot.com"&gt;dependabot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="linting-and-autoformatting"&gt;Linting and autoformatting&lt;/h2&gt;
&lt;p&gt;Use &lt;a href="https://github.com/ambv/black"&gt;black&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="taking-your-env-to-prod"&gt;Taking your env to prod&lt;/h2&gt;
&lt;p&gt;Through services that supports deployment through container&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Use docker&lt;/li&gt;
&lt;li&gt;Use docker-compose&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;pip-compile&lt;/code&gt; from &lt;code&gt;pip-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://dependabot.com"&gt;dependabot&lt;/a&gt; / &lt;a href="https://pyup.io"&gt;pyup.io&lt;/a&gt;&lt;br&gt;
 for auto-upgrade deps&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://dependabot.com"&gt;dependabot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deploy your docker container to prod&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="q-a"&gt;Q &amp;amp; A&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Q: pipenv, poetry or pip-tools&lt;ul&gt;
&lt;li&gt;A: Personal perference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="best practices"></category></entry><entry><title>Automating Code Quality</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality" rel="alternate"></link><published>2019-09-30T18:55:00+08:00</published><updated>2019-09-30T18:55:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-09-30:/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kyle Knapp&lt;/p&gt;
&lt;h2 id="materials"&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G1lDk_WKXvY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/chalice"&gt;aws/chalice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steps to automation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;flake8&lt;ul&gt;
&lt;li&gt;pycodestyle → style&lt;/li&gt;
&lt;li&gt;pyflakes → bug&lt;/li&gt;
&lt;li&gt;mccabe → complexity&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flake8 --max-complexity ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pylint&lt;ul&gt;
&lt;li&gt;similar but stricter and more optional than flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;li&gt;other tools: &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;doc8&lt;/code&gt;, &lt;code&gt;pydocstyle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;automation on local env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-dev.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;atuomation on prod env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-prod …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kyle Knapp&lt;/p&gt;
&lt;h2 id="materials"&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G1lDk_WKXvY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/chalice"&gt;aws/chalice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steps to automation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;flake8&lt;ul&gt;
&lt;li&gt;pycodestyle → style&lt;/li&gt;
&lt;li&gt;pyflakes → bug&lt;/li&gt;
&lt;li&gt;mccabe → complexity&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flake8 --max-complexity ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pylint&lt;ul&gt;
&lt;li&gt;similar but stricter and more optional than flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;li&gt;other tools: &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;doc8&lt;/code&gt;, &lt;code&gt;pydocstyle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;automation on local env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-dev.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;atuomation on prod env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-prod.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="pylint-vs-flake8" src="https://lee-w.github.io/pycon-note/images/post-images/automating-code-quality/15698391534086.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best practices&lt;ol&gt;
&lt;li&gt;Always improve quality check&lt;/li&gt;
&lt;li&gt;Avoid compromising existing quality checks&lt;/li&gt;
&lt;li&gt;Be aware automated quality checks does not guarantee code quality&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="code quality"></category><category term="automation"></category></entry><entry><title>Ace Your Technical Interview Using Python</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Erin Allard&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NltGUUi23zc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/100ZV3WoR4xMH489AdGLNF6zejuq9o7rU4pZa8-jPZTE/edit#slide=id.p"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Technical Interview Process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Recruiter phone screen&lt;/li&gt;
&lt;li&gt;Technical phone screen with an engineer&lt;/li&gt;
&lt;li&gt;Take-home assessment&lt;/li&gt;
&lt;li&gt;Onsite interviews'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-technical skill matters (a lot)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;problem solving&lt;/li&gt;
&lt;li&gt;ask good questions&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/good-questions/"&gt;How to Ask Good Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;understand assumption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code (obviously) matters&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;time complexity&lt;/li&gt;
&lt;li&gt;recursion&lt;ul&gt;
&lt;li&gt;base case&lt;/li&gt;
&lt;li&gt;progress …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Erin Allard&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NltGUUi23zc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/100ZV3WoR4xMH489AdGLNF6zejuq9o7rU4pZa8-jPZTE/edit#slide=id.p"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Technical Interview Process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Recruiter phone screen&lt;/li&gt;
&lt;li&gt;Technical phone screen with an engineer&lt;/li&gt;
&lt;li&gt;Take-home assessment&lt;/li&gt;
&lt;li&gt;Onsite interviews'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-technical skill matters (a lot)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;problem solving&lt;/li&gt;
&lt;li&gt;ask good questions&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/good-questions/"&gt;How to Ask Good Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;understand assumption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code (obviously) matters&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;time complexity&lt;/li&gt;
&lt;li&gt;recursion&lt;ul&gt;
&lt;li&gt;base case&lt;/li&gt;
&lt;li&gt;progress&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;object-oriented programming&lt;/li&gt;
&lt;li&gt;data structure &amp;amp; algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding challenges: quality over quantity&lt;/li&gt;
&lt;li&gt;Mindset is key&lt;ul&gt;
&lt;li&gt;Failure and rejection are part of the process&lt;/li&gt;
&lt;li&gt;You don't need every company to want to hire you&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="job"></category></entry><entry><title>API Evolution the Right Way</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;A. Jesse Jiryu Davis&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqDnB6jKzcE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emptysqua.re/blog/api-evolution-the-right-way/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Avoid Bad Features&lt;/li&gt;
&lt;li&gt;Minimize Features&lt;/li&gt;
&lt;li&gt;Keep Feature Narrow&lt;/li&gt;
&lt;li&gt;Mark Experimental Features "Provisional"&lt;/li&gt;
&lt;li&gt;Delete Feature Gently&lt;ul&gt;
&lt;li&gt;Deprecated warning&lt;/li&gt;
&lt;li&gt;Instructive error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maintain a Change Log&lt;/li&gt;
&lt;li&gt;Choose a Version Scheme&lt;ul&gt;
&lt;li&gt;Semantic Versioning&lt;/li&gt;
&lt;li&gt;Time-based Versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an Upgrade Guide&lt;/li&gt;
&lt;li&gt;Add parameter compatibly （and fail loudly …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;A. Jesse Jiryu Davis&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqDnB6jKzcE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emptysqua.re/blog/api-evolution-the-right-way/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Avoid Bad Features&lt;/li&gt;
&lt;li&gt;Minimize Features&lt;/li&gt;
&lt;li&gt;Keep Feature Narrow&lt;/li&gt;
&lt;li&gt;Mark Experimental Features "Provisional"&lt;/li&gt;
&lt;li&gt;Delete Feature Gently&lt;ul&gt;
&lt;li&gt;Deprecated warning&lt;/li&gt;
&lt;li&gt;Instructive error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maintain a Change Log&lt;/li&gt;
&lt;li&gt;Choose a Version Scheme&lt;ul&gt;
&lt;li&gt;Semantic Versioning&lt;/li&gt;
&lt;li&gt;Time-based Versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an Upgrade Guide&lt;/li&gt;
&lt;li&gt;Add parameter compatibly （and fail loudly!）&lt;ul&gt;
&lt;li&gt;Add default value for new added parameter that preserve old behavior&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;*&lt;/code&gt; &amp;lt;- all parameters after it can only be passed by name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Changing Behavior without Changing API&lt;ol&gt;
&lt;li&gt;Add a flag&lt;ul&gt;
&lt;li&gt;default False but warn if it's False&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Phrase 2. Change default to True, deprecate flag&lt;/li&gt;
&lt;li&gt;Phrase 3. Remove flag&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="api"></category></entry><entry><title>Break the Cycle: Three excellent Python tools to automate repetitive tasks</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Thea Flowers&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;goal&lt;ul&gt;
&lt;li&gt;reduce toil (redundant boring stuff)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;for automating python package testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nox.thea.codes"&gt;nox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;flexible test automation&lt;/li&gt;
&lt;li&gt;the configuration file is python &lt;code&gt;noxfile.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pyinvoke.org"&gt;invoke&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;task execution tool&lt;/li&gt;
&lt;li&gt;a tool framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;invoke example&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print all the …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Thea Flowers&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;goal&lt;ul&gt;
&lt;li&gt;reduce toil (redundant boring stuff)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;for automating python package testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nox.thea.codes"&gt;nox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;flexible test automation&lt;/li&gt;
&lt;li&gt;the configuration file is python &lt;code&gt;noxfile.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pyinvoke.org"&gt;invoke&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;task execution tool&lt;/li&gt;
&lt;li&gt;a tool framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;invoke example&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print all the authors in this project&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;git log --pretty=format:&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;%an &amp;lt;%ae&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;hide&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;changelog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;since&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print the changelog since given git ref&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git log {since}..HEAD --format=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;hide&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Changelog sine {since}:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;- {change}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="automation"></category></entry><entry><title>Escape from auto-manual testing with Hypothesis!</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/zac-hatfield-dodds-escape-from-auto-manual-testing-with-hypothesis"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="property-based-testing"&gt;Property-based testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;ul&gt;
&lt;li&gt;Describes valid input&lt;/li&gt;
&lt;li&gt;Writes tests that passes for any valid input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strategies-and-tactics"&gt;Strategies and Tactics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;strategies (&lt;code&gt;st&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;values&lt;/li&gt;
&lt;li&gt;collections&lt;/li&gt;
&lt;li&gt;map and filter methods&lt;/li&gt;
&lt;li&gt;complicated data&lt;ul&gt;
&lt;li&gt;recursive strategies&lt;/li&gt;
&lt;li&gt;combine strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;builds()&lt;/code&gt;: custom object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inferring strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypothesis.extra&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;st.data()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tactics: what do …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/zac-hatfield-dodds-escape-from-auto-manual-testing-with-hypothesis"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="property-based-testing"&gt;Property-based testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;ul&gt;
&lt;li&gt;Describes valid input&lt;/li&gt;
&lt;li&gt;Writes tests that passes for any valid input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strategies-and-tactics"&gt;Strategies and Tactics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;strategies (&lt;code&gt;st&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;values&lt;/li&gt;
&lt;li&gt;collections&lt;/li&gt;
&lt;li&gt;map and filter methods&lt;/li&gt;
&lt;li&gt;complicated data&lt;ul&gt;
&lt;li&gt;recursive strategies&lt;/li&gt;
&lt;li&gt;combine strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;builds()&lt;/code&gt;: custom object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inferring strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypothesis.extra&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;st.data()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tactics: what do we tests?&lt;ul&gt;
&lt;li&gt;auto-manual testing: &lt;code&gt;output == expected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;oracle tests (full specification)&lt;/li&gt;
&lt;li&gt;partial specification&lt;/li&gt;
&lt;li&gt;"Does not crash"&lt;ul&gt;
&lt;li&gt;Just call your function with valid input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Round trip&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;json.dumps&lt;/code&gt; / &lt;code&gt;json.loads&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metamorphic Relation&lt;ul&gt;
&lt;li&gt;Although we don't know the relation between input and output, we might know how output should change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stateful Testing&lt;ul&gt;
&lt;li&gt;(N)DFA&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RuleBasedStateMachine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observability"&gt;Observability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--hypothesis-show-statistics&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;timing stats&lt;/li&gt;
&lt;li&gt;perf breakdown&lt;/li&gt;
&lt;li&gt;exit reasons&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;note()&lt;/code&gt; if you like print-debugging&lt;/li&gt;
&lt;/ul&gt;</content><category term="test"></category></entry><entry><title>Getting Started Testing in Data Science</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jes Ford&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0ysyWk-ox-8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jesford/testing-in-data-science/blob/master/intro-to-testing-presentation.ipynb"&gt;slide-origin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/jes-ford-getting-started-testing-in-data-science"&gt;slide-flatten&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Science Workflows&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One-off analysis&lt;/li&gt;
&lt;li&gt;Exploratory&lt;/li&gt;
&lt;li&gt;Well defined problem&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Science Domain Problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with Pandas DataFrames&lt;ul&gt;
&lt;li&gt;Pandas built-in testing methods&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from pandas.util.testing import assert_frame_equal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_like&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_dtype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Working with DB&lt;ul&gt;
&lt;li&gt;mock data that should be get from database and test …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jes Ford&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0ysyWk-ox-8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jesford/testing-in-data-science/blob/master/intro-to-testing-presentation.ipynb"&gt;slide-origin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/jes-ford-getting-started-testing-in-data-science"&gt;slide-flatten&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Science Workflows&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One-off analysis&lt;/li&gt;
&lt;li&gt;Exploratory&lt;/li&gt;
&lt;li&gt;Well defined problem&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Science Domain Problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with Pandas DataFrames&lt;ul&gt;
&lt;li&gt;Pandas built-in testing methods&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from pandas.util.testing import assert_frame_equal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_like&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_dtype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Working with DB&lt;ul&gt;
&lt;li&gt;mock data that should be get from database and test only behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generating Dataframe for Testing&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hypothesis&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="data"></category></entry><entry><title>Practical decorators</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/practical-decorators" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/practical-decorators</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Reuven M. Lerner&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MjHpMCIvwsY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;usage examples&lt;ul&gt;
&lt;li&gt;timing&lt;/li&gt;
&lt;li&gt;limited call (e.g., function can be called once per minute)&lt;/li&gt;
&lt;li&gt;memoization (i.e. caching)&lt;/li&gt;
&lt;li&gt;add class attribute (e.g., better &lt;code&gt;__repr__&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Reuven M. Lerner&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MjHpMCIvwsY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;usage examples&lt;ul&gt;
&lt;li&gt;timing&lt;/li&gt;
&lt;li&gt;limited call (e.g., function can be called once per minute)&lt;/li&gt;
&lt;li&gt;memoization (i.e. caching)&lt;/li&gt;
&lt;li&gt;add class attribute (e.g., better &lt;code&gt;__repr__&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="api"></category></entry><entry><title>Scraping a Million Pokemon Battles: Distributed Systems By Example</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Duy Nguyen&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QvZqttX9uXc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/14v2huYsC5rJYUR3sWBXu0YN33b6tWRFraEgf9FwRPiE/edit#slide=id.g56f736b0fc_1_545"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scalability and 3 "Pillars"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concurrency of Resources&lt;/li&gt;
&lt;li&gt;Asserting for Correctness&lt;/li&gt;
&lt;li&gt;Resilience against Failures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New Problems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loss of determinism&lt;/li&gt;
&lt;li&gt;Long startup times (e.g., initialize message queue)&lt;/li&gt;
&lt;li&gt;Increases flakiness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correctness&lt;br&gt;
&lt;img alt="Correctness" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353098656.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resilience&lt;br&gt;
&lt;img alt="Resilience" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353190256.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Duy Nguyen&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QvZqttX9uXc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/14v2huYsC5rJYUR3sWBXu0YN33b6tWRFraEgf9FwRPiE/edit#slide=id.g56f736b0fc_1_545"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scalability and 3 "Pillars"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concurrency of Resources&lt;/li&gt;
&lt;li&gt;Asserting for Correctness&lt;/li&gt;
&lt;li&gt;Resilience against Failures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New Problems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loss of determinism&lt;/li&gt;
&lt;li&gt;Long startup times (e.g., initialize message queue)&lt;/li&gt;
&lt;li&gt;Increases flakiness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correctness&lt;br&gt;
&lt;img alt="Correctness" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353098656.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resilience&lt;br&gt;
&lt;img alt="Resilience" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353190256.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="core"></category></entry><entry><title>Solve Your Problem With Sloppy Python</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/solve-your-problem-with-sloppy-python" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-au-2018/2019/08/solve-your-problem-with-sloppy-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Larry Hastings&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Jd8ulMb6_ls&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="personal-description"&gt;Personal Description&lt;/h3&gt;
&lt;p&gt;It's an introduction for how to use python as the shell script&lt;/p&gt;
&lt;h3 id="the-rules"&gt;The rules&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;fail early and noisily&lt;/li&gt;
&lt;li&gt;stop writing the shell script&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-guidelines"&gt;The guidelines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;try automating even more&lt;/li&gt;
&lt;li&gt;try new libraries/technologies&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Larry Hastings&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Jd8ulMb6_ls&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="personal-description"&gt;Personal Description&lt;/h3&gt;
&lt;p&gt;It's an introduction for how to use python as the shell script&lt;/p&gt;
&lt;h3 id="the-rules"&gt;The rules&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;fail early and noisily&lt;/li&gt;
&lt;li&gt;stop writing the shell script&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-guidelines"&gt;The guidelines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;try automating even more&lt;/li&gt;
&lt;li&gt;try new libraries/technologies&lt;/li&gt;
&lt;/ul&gt;</content><category term="automation"></category></entry><entry><title>The Zen of Python Teams</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Adrienne Lowe&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WZ8FEB4J8-c"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beautiful is better than ugly.&lt;ul&gt;
&lt;li&gt;Be kind&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr="&gt;Accelerate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit is better than implicit&lt;ul&gt;
&lt;li&gt;Documenting process makes it easier for others to join you.&lt;ul&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;li&gt;onboard guide&lt;/li&gt;
&lt;li&gt;how to contribute&lt;/li&gt;
&lt;li&gt;where to get help&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep your conversation about work in public&lt;/li&gt;
&lt;li&gt;Document your peoeple&lt;ul&gt;
&lt;li&gt;I …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Adrienne Lowe&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WZ8FEB4J8-c"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beautiful is better than ugly.&lt;ul&gt;
&lt;li&gt;Be kind&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr="&gt;Accelerate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit is better than implicit&lt;ul&gt;
&lt;li&gt;Documenting process makes it easier for others to join you.&lt;ul&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;li&gt;onboard guide&lt;/li&gt;
&lt;li&gt;how to contribute&lt;/li&gt;
&lt;li&gt;where to get help&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep your conversation about work in public&lt;/li&gt;
&lt;li&gt;Document your peoeple&lt;ul&gt;
&lt;li&gt;I enjoy working on ...&lt;/li&gt;
&lt;li&gt;I get excited by ...&lt;/li&gt;
&lt;li&gt;I struggle when ...&lt;/li&gt;
&lt;li&gt;I feel appreciated when ...&lt;/li&gt;
&lt;li&gt;Ask me for help with ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple is better than complex.&lt;ul&gt;
&lt;li&gt;Build meaningful relationships with small interactions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error should never pass silently&lt;ul&gt;
&lt;li&gt;With humans, we have to rely on other humans to tell us when we broke them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/li&gt;
&lt;li&gt;Now is better than never.&lt;ul&gt;
&lt;li&gt;Doing and being wrong is a lot better than not doing at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="team"></category></entry><entry><title>Time to take out the rubbish: garbage collector</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CLW5Lyc1FN8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We do not use &lt;code&gt;__del__()&lt;/code&gt; to clean up. Use &lt;code&gt;with&lt;/code&gt; instead&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CLW5Lyc1FN8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We do not use &lt;code&gt;__del__()&lt;/code&gt; to clean up. Use &lt;code&gt;with&lt;/code&gt; instead&lt;/li&gt;
&lt;/ul&gt;</content><category term="core"></category></entry><entry><title>Watch out for Safety Bandits!</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Tennessee Leeuwenburg&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://2018.pycon-au.org/talks/43518-watch-out-for-safety-bandits/"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The "Essential Two" security problems&lt;ol&gt;
&lt;li&gt;Problems someone else made&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt;: Dependency Checking&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;pip install insecure-package&lt;/code&gt; to try it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Problems you made&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt;: Static Analysis (e.g., rule-based syntax / style)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Tennessee Leeuwenburg&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://2018.pycon-au.org/talks/43518-watch-out-for-safety-bandits/"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The "Essential Two" security problems&lt;ol&gt;
&lt;li&gt;Problems someone else made&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt;: Dependency Checking&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;pip install insecure-package&lt;/code&gt; to try it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Problems you made&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt;: Static Analysis (e.g., rule-based syntax / style)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="security"></category></entry><entry><title>Why you should care about types: How Python typing helped my team scale</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/why-you-should-care-about-types" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-au-2018/2019/08/why-you-should-care-about-types</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Luka Sterbic&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://2018.pycon-au.org/talks/45224-why-you-should-care-about-types-how-python-typing-helped-my-team-scale/"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="are-python-types-pythonic"&gt;Are Python types Pythonic?&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Explicit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;implicit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Readability&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;ambiguity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refuse&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;temptation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If nothing else, because Guido said so 😆&lt;/p&gt;
&lt;h3 id="type-101"&gt;Type 101&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Collection, Union, Optional, Type&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Luka Sterbic&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://2018.pycon-au.org/talks/45224-why-you-should-care-about-types-how-python-typing-helped-my-team-scale/"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="are-python-types-pythonic"&gt;Are Python types Pythonic?&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Explicit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;implicit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Readability&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;ambiguity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refuse&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;temptation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If nothing else, because Guido said so 😆&lt;/p&gt;
&lt;h3 id="type-101"&gt;Type 101&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Collection, Union, Optional, Type&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DerivedClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;claszz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="tool"&gt;Tool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Instagram/MonkeyType"&gt;GitHub - Instagram/MonkeyType: A system for Python that generates static type annotations by collecting runtime types&lt;/a&gt;&lt;/p&gt;</content><category term="type annotation"></category></entry></feed>