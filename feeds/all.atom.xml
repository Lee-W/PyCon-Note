<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/all.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2020-02-16T17:20:00+08:00</updated><entry><title>Mocking and Patching Pitfalls</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/02/mocking-and-patching-pitfalls" rel="alternate"></link><published>2020-02-16T17:20:00+08:00</published><updated>2020-02-16T17:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-16:/pycon-note/posts/pycon-us-2019/2020/02/mocking-and-patching-pitfalls</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Edwin Jung&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ldlz4V-UCFw"&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="mock-hell"&gt;Mock hell&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;complex patch targets&lt;/li&gt;
&lt;li&gt;numerous mocks or patches&lt;/li&gt;
&lt;li&gt;mocks with brittle assertions&lt;/li&gt;
&lt;li&gt;mocks with complex setup&lt;/li&gt;
&lt;li&gt;deep mocks/recursive mocks/mocks returning mocks&lt;/li&gt;
&lt;li&gt;tests that test nothing&lt;/li&gt;
&lt;li&gt;using the debugger to reverse-engineer mocks&lt;/li&gt;
&lt;li&gt;mocks that prevent refactoring&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="how-to-test-without-mock"&gt;How to test without mock&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mocks …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Edwin Jung&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ldlz4V-UCFw"&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="mock-hell"&gt;Mock hell&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;complex patch targets&lt;/li&gt;
&lt;li&gt;numerous mocks or patches&lt;/li&gt;
&lt;li&gt;mocks with brittle assertions&lt;/li&gt;
&lt;li&gt;mocks with complex setup&lt;/li&gt;
&lt;li&gt;deep mocks/recursive mocks/mocks returning mocks&lt;/li&gt;
&lt;li&gt;tests that test nothing&lt;/li&gt;
&lt;li&gt;using the debugger to reverse-engineer mocks&lt;/li&gt;
&lt;li&gt;mocks that prevent refactoring&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="how-to-test-without-mock"&gt;How to test without mock&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mocks aren't stubs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;test doubles&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;behavior&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mock&lt;/td&gt;
&lt;td&gt;records calls to the object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stub&lt;/td&gt;
&lt;td&gt;returns canned data, no logic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fake&lt;/td&gt;
&lt;td&gt;implements fake version of production logic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dummy&lt;/td&gt;
&lt;td&gt;does nothing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spy&lt;/td&gt;
&lt;td&gt;records and delegates to the real thing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;alternatives&lt;ul&gt;
&lt;li&gt;fake patch&lt;/li&gt;
&lt;li&gt;fake injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tactical questions&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Which test doubles (mock or other)?&lt;/li&gt;
&lt;li&gt;Mockist or classical?&lt;/li&gt;
&lt;li&gt;Patch or inject?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tactics&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find a Seam, Patch a Fake&lt;/li&gt;
&lt;li&gt;mock roles not objects&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;li&gt;Inject the Collaborator&lt;/li&gt;
&lt;li&gt;Go Functional&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;always be refactoring&lt;/li&gt;
&lt;li&gt;consider other test doubles&lt;/li&gt;
&lt;li&gt;patching should be rare, and the last tool you use&lt;/li&gt;
&lt;li&gt;mocks (if you use them)&lt;ul&gt;
&lt;li&gt;should target roles and not objects&lt;/li&gt;
&lt;li&gt;are not just for test isolation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="test"></category></entry><entry><title>Maintaining a Python Project When It’s Not Your Job</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/02/maintaining-a-python-project-when-It-s-not-your-job" rel="alternate"></link><published>2020-02-06T19:25:00+08:00</published><updated>2020-02-06T19:25:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-06:/pycon-note/posts/pycon-us-2019/2020/02/maintaining-a-python-project-when-It-s-not-your-job</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Hynek Schlawack&lt;/p&gt;
&lt;h2 id="materail"&gt;Materail&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9G2s1TN9QQY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/hynek/maintaining-a-python-project-when-its-not-your-job"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/talks/python-foss/"&gt;article (highly recommend)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="act-1-development"&gt;Act 1: Development&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.github/CONTRIBUTING.rst&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python-attrs/attrs/blob/master/.github/CONTRIBUTING.rst"&gt;Example - attrs/.github/CONTRIBUTING.rst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Encouragement → Everyone can contribute.&lt;/li&gt;
&lt;li&gt;Workflow outline&lt;/li&gt;
&lt;li&gt;Code, test, docs and changelog standards&lt;/li&gt;
&lt;li&gt;Local development environment setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.github/CODE_OF_CONDUCT.rst&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Expectation in behavior&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/en/github/building-a-strong-community/adding-a-code-of-conduct-to-your-project"&gt;GitHub - Adding a code of conduct to …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Hynek Schlawack&lt;/p&gt;
&lt;h2 id="materail"&gt;Materail&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9G2s1TN9QQY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/hynek/maintaining-a-python-project-when-its-not-your-job"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/talks/python-foss/"&gt;article (highly recommend)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="act-1-development"&gt;Act 1: Development&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.github/CONTRIBUTING.rst&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python-attrs/attrs/blob/master/.github/CONTRIBUTING.rst"&gt;Example - attrs/.github/CONTRIBUTING.rst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Encouragement → Everyone can contribute.&lt;/li&gt;
&lt;li&gt;Workflow outline&lt;/li&gt;
&lt;li&gt;Code, test, docs and changelog standards&lt;/li&gt;
&lt;li&gt;Local development environment setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.github/CODE_OF_CONDUCT.rst&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Expectation in behavior&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/en/github/building-a-strong-community/adding-a-code-of-conduct-to-your-project"&gt;GitHub - Adding a code of conduct to your project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run test through &lt;a href="https://github.com/tox-dev/tox"&gt;tox&lt;/a&gt;: test on different environemnt&lt;ul&gt;
&lt;li&gt;make sure that the user runs exactly the same test commands as the CI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Having a high test coverage&lt;/li&gt;
&lt;li&gt;Checkers&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8/"&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/check-manifest/"&gt;check-manifest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/twine/"&gt;twine&lt;/a&gt;: check pypi long description&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python-attrs/attrs/blob/de84609505845edc0e05c2ff918a44085816e35e/tox.ini#L63-L71"&gt;Example setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Autoformatters&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;isort&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python-attrs/attrs/blob/6fa28b3b074a935038dd701382eb67f0e953d097/setup.cfg#L20-L31"&gt;Example setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python-attrs/attrs/blob/master/.pre-commit-config.yaml"&gt;Example setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documentation&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.sphinx-doc.org"&gt;Sphinx&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slice and dice your README in your Sphinx docs to avoid information duplication  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;rst
  .. include:: ../README.rst
    :start-after: string-1
    :end-before: string-2&lt;/code&gt;&lt;br&gt;
    * &lt;a href="https://readthedocs.org/"&gt;Read the Docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="act-2-pull-request"&gt;Act 2: Pull Request&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.github/PULL_REQUEST_TEMPLATE.md&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;checklist&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-attrs/attrs/blob/master/.github/PULL_REQUEST_TEMPLATE.md"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;li&gt;Community&lt;ul&gt;
&lt;li&gt;Stack Overflow&lt;ul&gt;
&lt;li&gt;async community&lt;/li&gt;
&lt;li&gt;searchable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maintainer&lt;ul&gt;
&lt;li&gt;Say thank you to your contributors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="act-3-release"&gt;Act 3: Release&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;ISO 8601&lt;/strong&gt; (e.g., &lt;code&gt;1986-03-19&lt;/code&gt;) for datetime&lt;/li&gt;
&lt;li&gt;&lt;a href="https://test.pypi.org/"&gt;test.pypi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to maintain release information?&lt;ul&gt;
&lt;li&gt;attrs example&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python-attrs/attrs/blob/master/setup.py"&gt;setup.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-attrs/attrs/blob/6fa28b3b074a935038dd701382eb67f0e953d097/src/attr/__init__.py#L21-L33"&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="community"></category></entry><entry><title>5 Steps to Build Python Native GUI Widgets for BeeWare</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/01/5-steps-to-build-python-native-GUI-widgets-for-BeeWare" rel="alternate"></link><published>2020-01-29T11:32:00+08:00</published><updated>2020-01-29T11:32:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-29:/pycon-note/posts/pycon-us-2019/2020/01/5-steps-to-build-python-native-GUI-widgets-for-BeeWare</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dan Yeaw&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dan.yeaw.me/slides/gui-widget-for-beeware/#/"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dan.yeaw.me/posts/gui-widget-for-beeware/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sWt_sEZUiY8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga"&gt;toga&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/rubicon-objc"&gt;Rubicon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python -&amp;gt; Objective C&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/voc"&gt;VOC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python -&amp;gt; Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/batavia"&gt;Batavia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python -&amp;gt; Java Script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 0&lt;/strong&gt;: Development Platform&lt;ul&gt;
&lt;li&gt;macOS and GTK are the most developed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Research Your Widget&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Write Docs&lt;ul&gt;
&lt;li&gt;Write API documentation first&lt;/li&gt;
&lt;li&gt;Document Driven Development&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Implement …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dan Yeaw&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dan.yeaw.me/slides/gui-widget-for-beeware/#/"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dan.yeaw.me/posts/gui-widget-for-beeware/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sWt_sEZUiY8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga"&gt;toga&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/rubicon-objc"&gt;Rubicon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python -&amp;gt; Objective C&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/voc"&gt;VOC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python -&amp;gt; Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/batavia"&gt;Batavia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python -&amp;gt; Java Script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 0&lt;/strong&gt;: Development Platform&lt;ul&gt;
&lt;li&gt;macOS and GTK are the most developed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Research Your Widget&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Write Docs&lt;ul&gt;
&lt;li&gt;Write API documentation first&lt;/li&gt;
&lt;li&gt;Document Driven Development&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Implement TOGA_CORE (with TDD)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Implement TOGA_IMPL (Dummy Backend)&lt;ul&gt;
&lt;li&gt;Dummy is for automatic testing without a native platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Implement TOGA_IMPL (Your platform)&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="GUI"></category></entry><entry><title>Dataclasses: The code generator to end all code generators</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/dataclasses-the-code-generator-to-end-all-code-generators" rel="alternate"></link><published>2020-01-29T11:32:00+08:00</published><updated>2020-01-29T11:32:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-29:/pycon-note/posts/pycon-us-2018/2020/01/dataclasses-the-code-generator-to-end-all-code-generators</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Raymond Hettinger&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/hettinger.html"&gt;site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What are dataclasses for ?&lt;ul&gt;
&lt;li&gt;mutable data holder&lt;/li&gt;
&lt;li&gt;simplifying the process of writing the class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/basic.html#comparison-with-named-tuples"&gt;Comparison with Named Tuples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;dataclass&lt;ul&gt;
&lt;li&gt;mutable&lt;/li&gt;
&lt;li&gt;unhashable&lt;/li&gt;
&lt;li&gt;more memory usage&lt;/li&gt;
&lt;li&gt;more efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;named tuple&lt;ul&gt;
&lt;li&gt;immutable&lt;/li&gt;
&lt;li&gt;hashable&lt;/li&gt;
&lt;li&gt;less memory usage&lt;/li&gt;
&lt;li&gt;less efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Freezing and Ordering&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@dataclass(order=True, frozen=True …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Raymond Hettinger&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/hettinger.html"&gt;site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What are dataclasses for ?&lt;ul&gt;
&lt;li&gt;mutable data holder&lt;/li&gt;
&lt;li&gt;simplifying the process of writing the class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/basic.html#comparison-with-named-tuples"&gt;Comparison with Named Tuples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;dataclass&lt;ul&gt;
&lt;li&gt;mutable&lt;/li&gt;
&lt;li&gt;unhashable&lt;/li&gt;
&lt;li&gt;more memory usage&lt;/li&gt;
&lt;li&gt;more efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;named tuple&lt;ul&gt;
&lt;li&gt;immutable&lt;/li&gt;
&lt;li&gt;hashable&lt;/li&gt;
&lt;li&gt;less memory usage&lt;/li&gt;
&lt;li&gt;less efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Freezing and Ordering&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@dataclass(order=True, frozen=True)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gdevops.gitlab.io/tuto_python/peps/3.7/pep-0557/tutorials/hettinger/custom_fields.html"&gt;Custom Field Specifications&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;field(default_factory=list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field(hash=False)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field(repr=False)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field(compare=False)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="Core"></category></entry><entry><title>Awesome Command Line Tools</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2017/2020/01/awesome-command-line-tools" rel="alternate"></link><published>2020-01-21T13:10:00+08:00</published><updated>2020-01-21T13:10:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-21:/pycon-note/posts/pycon-us-2017/2020/01/awesome-command-line-tools</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Amjith Ramanujam&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hJhZhLg3obk&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2017/amjith-ramanujam-awesome-command-line-tools"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="core-concepts"&gt;Core Concepts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Discoverability&lt;ul&gt;
&lt;li&gt;Be forthcoming&lt;/li&gt;
&lt;li&gt;Eschew special key&lt;/li&gt;
&lt;li&gt;example&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pgcli.com/"&gt;pgcli&lt;/a&gt; (tab completion)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fishshell.com/"&gt;fish shell&lt;/a&gt; (ctrl - r: search through the history)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User Focus&lt;ul&gt;
&lt;li&gt;User come first, implementation later&lt;/li&gt;
&lt;li&gt;example&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mycli.net/"&gt;mycli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bpython-interpreter.org/"&gt;bpython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configurability&lt;ul&gt;
&lt;li&gt;subjective options only (e.g., color)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="checklist"&gt;Checklist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Persistent history&lt;/li&gt;
&lt;li&gt;History search&lt;/li&gt;
&lt;li&gt;Emacs …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Amjith Ramanujam&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hJhZhLg3obk&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2017/amjith-ramanujam-awesome-command-line-tools"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="core-concepts"&gt;Core Concepts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Discoverability&lt;ul&gt;
&lt;li&gt;Be forthcoming&lt;/li&gt;
&lt;li&gt;Eschew special key&lt;/li&gt;
&lt;li&gt;example&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pgcli.com/"&gt;pgcli&lt;/a&gt; (tab completion)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fishshell.com/"&gt;fish shell&lt;/a&gt; (ctrl - r: search through the history)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User Focus&lt;ul&gt;
&lt;li&gt;User come first, implementation later&lt;/li&gt;
&lt;li&gt;example&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mycli.net/"&gt;mycli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bpython-interpreter.org/"&gt;bpython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configurability&lt;ul&gt;
&lt;li&gt;subjective options only (e.g., color)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="checklist"&gt;Checklist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Persistent history&lt;/li&gt;
&lt;li&gt;History search&lt;/li&gt;
&lt;li&gt;Emacs Keybindings&lt;/li&gt;
&lt;li&gt;Paged Output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Auto-Completion&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimal Config&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Syntax Coloring&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="toolkit"&gt;Toolkit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/prompt-toolkit/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prompt&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hisotry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto_suggest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lexer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pygments.org/"&gt;pygements&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lexers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2017"></category><category term="cli"></category></entry><entry><title>Memory Management in Python - The Basics</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2016/2020/01/memory-management-in-python-the-basics" rel="alternate"></link><published>2020-01-20T18:20:00+08:00</published><updated>2020-01-20T18:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-20:/pycon-note/posts/pycon-us-2016/2020/01/memory-management-in-python-the-basics</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zakharenko&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=F6u5rhUQ6dU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2016/nina-zakharenko-memory-management-in-python-the-basics"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How does Python store object in memory&lt;ul&gt;
&lt;li&gt;name -&amp;gt; reference -&amp;gt; object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python Object Types&lt;ul&gt;
&lt;li&gt;Simple (e.g., numbers, strings)&lt;/li&gt;
&lt;li&gt;Containers (dict, list, user defined-class)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every Python object holds&lt;ul&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;ref count&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference Count&lt;ul&gt;
&lt;li&gt;Decrease ref count&lt;ul&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;remove the name as a reference …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zakharenko&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=F6u5rhUQ6dU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2016/nina-zakharenko-memory-management-in-python-the-basics"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How does Python store object in memory&lt;ul&gt;
&lt;li&gt;name -&amp;gt; reference -&amp;gt; object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python Object Types&lt;ul&gt;
&lt;li&gt;Simple (e.g., numbers, strings)&lt;/li&gt;
&lt;li&gt;Containers (dict, list, user defined-class)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every Python object holds&lt;ul&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;ref count&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference Count&lt;ul&gt;
&lt;li&gt;Decrease ref count&lt;ul&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;remove the name as a reference instead of delete the object&lt;/li&gt;
&lt;li&gt;decrease the reference count by 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;going out of scope&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Global Namespace&lt;ul&gt;
&lt;li&gt;never go out of scope → refcount never reach 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid putting large or complex objects in the global namespace&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Common Garbage Collection Techniques&lt;ul&gt;
&lt;li&gt;Reference Counting&lt;ul&gt;
&lt;li&gt;Concept&lt;ul&gt;
&lt;li&gt;add / remove ref&lt;/li&gt;
&lt;li&gt;delete object if refcount reaches 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The good&lt;ul&gt;
&lt;li&gt;Easy to implement&lt;/li&gt;
&lt;li&gt;When refcount is 0 objects are immediately delete.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The bad&lt;ul&gt;
&lt;li&gt;space overhead&lt;/li&gt;
&lt;li&gt;execution overhead&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The ugly&lt;ul&gt;
&lt;li&gt;not thread safe&lt;/li&gt;
&lt;li&gt;doesn't detect cyclical ref&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracing (mark and sweep)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What algorithm does Python use?&lt;ul&gt;
&lt;li&gt;Reference Counting + Generational&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__slot__&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Attribute Declarations&lt;/li&gt;
&lt;li&gt;When to use&lt;ul&gt;
&lt;li&gt;If we're going to create lots of instances&lt;/li&gt;
&lt;li&gt;If we know the properties in advance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2016"></category><category term="memory management"></category></entry><entry><title>Elegant Solutions For Everyday Python Problems</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/elegant-solutions-for-everyday-python-problems" rel="alternate"></link><published>2020-01-13T10:16:00+08:00</published><updated>2020-01-13T10:16:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-13:/pycon-note/posts/pycon-us-2018/2020/01/elegant-solutions-for-everyday-python-problems</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zaharenko (@nnja)&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WiQqqB9MlkA&amp;amp;t=1474s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/nnja/elegant-solutions-for-everyday-python-problems-pycon-2018"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="magic-methods-__func__"&gt;Magic methods: &lt;code&gt;__func__&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Custom iterator&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__iter__&lt;/code&gt;: Make classes &lt;code&gt;iterable&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;returns an iterator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__next__&lt;/code&gt;: Make class &lt;code&gt;iterator&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;raises &lt;code&gt;StopIteration&lt;/code&gt; when there is no more items to return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use a generator when your iterator doesn't need to maintain a lot of state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method magic …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zaharenko (@nnja)&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WiQqqB9MlkA&amp;amp;t=1474s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/nnja/elegant-solutions-for-everyday-python-problems-pycon-2018"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="magic-methods-__func__"&gt;Magic methods: &lt;code&gt;__func__&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Custom iterator&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__iter__&lt;/code&gt;: Make classes &lt;code&gt;iterable&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;returns an iterator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__next__&lt;/code&gt;: Make class &lt;code&gt;iterator&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;raises &lt;code&gt;StopIteration&lt;/code&gt; when there is no more items to return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use a generator when your iterator doesn't need to maintain a lot of state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method magic&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getattr(object, name, default)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;call function by &lt;code&gt;name&lt;/code&gt; string&lt;/li&gt;
&lt;li&gt;use case&lt;ul&gt;
&lt;li&gt;cli tool with dynamic commands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;functool.partial(func, *args, **kwargs)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="context-manager"&gt;Context manager&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;perform an action before and/or after an operation&lt;/li&gt;
&lt;li&gt;use case&lt;ul&gt;
&lt;li&gt;close a resource (e.g., file, network, database)&lt;/li&gt;
&lt;li&gt;perform clean up before/after function call&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feature flags: turn feature of your application on and off easily&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;A/B Testing&lt;/li&gt;
&lt;li&gt;Rolling Releases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from contextlib import contextmanager&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="decorators"&gt;Decorators&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Wrap a function in another function to do something&lt;ul&gt;
&lt;li&gt;before the call&lt;/li&gt;
&lt;li&gt;after the call&lt;/li&gt;
&lt;li&gt;with provided arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Problem: lost context using a decorator&lt;ul&gt;
&lt;li&gt;Solution: &lt;code&gt;from contextlib import wraps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use case&lt;ul&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;li&gt;timing&lt;/li&gt;
&lt;li&gt;validation&lt;/li&gt;
&lt;li&gt;rate limiting&lt;/li&gt;
&lt;li&gt;mocking/patching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="conextdecorator"&gt;ConextDecorator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;By use it, you can write classes that can be used both as decorator and context managers&lt;ul&gt;
&lt;li&gt;It's included if implemented through &lt;code&gt;from contextlib import contextmanger&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="best practices"></category></entry><entry><title>Demystifying the Patch Function</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python" rel="alternate"></link><published>2020-01-08T11:00:00+08:00</published><updated>2020-01-08T11:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-08:/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Lisa Roach&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ww1UsGZV8fQ"&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patch: temporarily replace your target with &lt;code&gt;MagicMock()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Target: &lt;code&gt;'package.modeul.ClassName'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When should you mock?&lt;ul&gt;
&lt;li&gt;When you don't want to actually call an object&lt;ul&gt;
&lt;li&gt;e.g., database, system call&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What makes it so confusing?&lt;ol&gt;
&lt;li&gt;Identifying the target&lt;/li&gt;
&lt;li&gt;Multiple ways to call&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="patch"&gt;Patch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Target must …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Lisa Roach&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ww1UsGZV8fQ"&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patch: temporarily replace your target with &lt;code&gt;MagicMock()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Target: &lt;code&gt;'package.modeul.ClassName'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When should you mock?&lt;ul&gt;
&lt;li&gt;When you don't want to actually call an object&lt;ul&gt;
&lt;li&gt;e.g., database, system call&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What makes it so confusing?&lt;ol&gt;
&lt;li&gt;Identifying the target&lt;/li&gt;
&lt;li&gt;Multiple ways to call&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="patch"&gt;Patch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Target must be importable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Patch where the object is used&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# module.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db_write&lt;/span&gt;

&lt;span class="c1"&gt;# test_module.py&lt;/span&gt;
&lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;module.db_write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How to call Patch&lt;ul&gt;
&lt;li&gt;Context Manager&lt;/li&gt;
&lt;li&gt;Function / Class Decorators&lt;/li&gt;
&lt;li&gt;Manual start/stop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="spec"&gt;Spec&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;spec&lt;/code&gt; arguments: &lt;code&gt;spec&lt;/code&gt;, &lt;code&gt;autospec&lt;/code&gt;, &lt;code&gt;spec_set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mock Problems that &lt;code&gt;spec&lt;/code&gt; can solve&lt;ol&gt;
&lt;li&gt;Misspelled asserts look like attributes&lt;/li&gt;
&lt;li&gt;Mocked objects called incorrectly pass silently&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;A MagicMock&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assert_any_call&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_called&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_called_once&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_called_once_with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_called_with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A Specced MagicMock&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec=True&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The attribute of patched object is now in MagicMock.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We can now only get attribute that exists.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It does not know the attribute of your attribute → &lt;code&gt;autospec=True&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;However, &lt;code&gt;autospec&lt;/code&gt; can be dangerous. It will run the code that will be triggered when introspected.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It doesn't know dynamicaly created attribute (including the ones in &lt;code&gt;__init__&lt;/code&gt;) → manually create it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec_set=True&lt;/code&gt; prevent you from setting attribute that does not exist&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="other-arguments"&gt;Other arguments&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new_callable&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Common Use case: Mocking property object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kwargs&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="readmore"&gt;Readmore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;patch.object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;patch.dict&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;patch.multiple&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="test"></category></entry><entry><title>Wily Python: Writing simpler and more maintainable Python</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2020/01/wily-python-writing-simpler-and-more-maintainable-python" rel="alternate"></link><published>2020-01-07T15:30:00+08:00</published><updated>2020-01-07T15:30:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-07:/pycon-note/posts/pycon-us-2019/2020/01/wily-python-writing-simpler-and-more-maintainable-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Anthony Shaw&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqdsNoApJ80&amp;amp;t=3s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/anthony-shaw-wily-python-writing-simpler-and-more-maintainable-python"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wily.readthedocs.io/en/latest/"&gt;wily&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Program Complexity&lt;ul&gt;
&lt;li&gt;Cyclomatic Complexity&lt;/li&gt;
&lt;li&gt;Halstead Metrics&lt;/li&gt;
&lt;li&gt;Maintainability Index&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radon.readthedocs.io/en/latest/"&gt;radon&lt;/a&gt;: tool to calculate program complexity&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wily.readthedocs.io/en/latest/"&gt;wily&lt;/a&gt;: tool to track complexity change over time&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wily build &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wily report &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wily graph &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take away&lt;ul&gt;
&lt;li&gt;Make sure you have good behavioral test coverage&lt;/li&gt;
&lt;li&gt;Refactor …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Anthony Shaw&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqdsNoApJ80&amp;amp;t=3s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/anthony-shaw-wily-python-writing-simpler-and-more-maintainable-python"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wily.readthedocs.io/en/latest/"&gt;wily&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Program Complexity&lt;ul&gt;
&lt;li&gt;Cyclomatic Complexity&lt;/li&gt;
&lt;li&gt;Halstead Metrics&lt;/li&gt;
&lt;li&gt;Maintainability Index&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radon.readthedocs.io/en/latest/"&gt;radon&lt;/a&gt;: tool to calculate program complexity&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wily.readthedocs.io/en/latest/"&gt;wily&lt;/a&gt;: tool to track complexity change over time&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wily build &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wily report &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wily graph &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take away&lt;ul&gt;
&lt;li&gt;Make sure you have good behavioral test coverage&lt;/li&gt;
&lt;li&gt;Refactor often&lt;/li&gt;
&lt;li&gt;Divide and Conquer → Spread complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="code quality"></category></entry><entry><title>Improving PyPI's security with Two Factor Authentication</title><link href="https://lee-w.github.io/pycon-note/posts/pygotham-2019/2019/12/improving-pypi-s-security-with-two-factor-authentication" rel="alternate"></link><published>2019-12-31T12:13:00+08:00</published><updated>2019-12-31T12:13:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-12-31:/pycon-note/posts/pygotham-2019/2019/12/improving-pypi-s-security-with-two-factor-authentication</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;William Woodruff&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xNZIxt-ABUs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyPI now supports two factor authentication&lt;/li&gt;
&lt;li&gt;Two factor authentication&lt;ul&gt;
&lt;li&gt;First factor: your password or something you know&lt;/li&gt;
&lt;li&gt;Second Factor: something that you (and only you) have&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why 2FA?&lt;ul&gt;
&lt;li&gt;Adding a second factor prevents/mitigates data leak&lt;ul&gt;
&lt;li&gt;but 2FA isn't panacea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2 FA methods&lt;ul&gt;
&lt;li&gt;SMS …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;William Woodruff&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xNZIxt-ABUs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyPI now supports two factor authentication&lt;/li&gt;
&lt;li&gt;Two factor authentication&lt;ul&gt;
&lt;li&gt;First factor: your password or something you know&lt;/li&gt;
&lt;li&gt;Second Factor: something that you (and only you) have&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why 2FA?&lt;ul&gt;
&lt;li&gt;Adding a second factor prevents/mitigates data leak&lt;ul&gt;
&lt;li&gt;but 2FA isn't panacea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2 FA methods&lt;ul&gt;
&lt;li&gt;SMS/voice &lt;strong&gt;Don't use it&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Problem: Nothing about the phone network is secure&lt;ul&gt;
&lt;li&gt;e.g., SS7 attacks, SIM ports &amp;amp; jacking, SMS interception&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;do not use it in new service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HOTP-based physical keys&lt;ul&gt;
&lt;li&gt;Special device&lt;/li&gt;
&lt;li&gt;high cost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TOTP (Time-based one-time passwords ): your baseline 2FA&lt;ul&gt;
&lt;li&gt;Symmetric cryptography with a single shared secret&lt;/li&gt;
&lt;li&gt;design suggestion&lt;ul&gt;
&lt;li&gt;do:&lt;ul&gt;
&lt;li&gt;require users to enter a TOTP code&lt;/li&gt;
&lt;li&gt;provide both a provisioning URI and a QR code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;don't&lt;ul&gt;
&lt;li&gt;use uncommon TOTP parameters (bad client support)&lt;/li&gt;
&lt;li&gt;nag users for TOTP codes on every single action&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WebAuthn (U2F)&lt;ul&gt;
&lt;li&gt;Asymmetric, public-key crpyography&lt;/li&gt;
&lt;li&gt;Hardware agnostic&lt;/li&gt;
&lt;li&gt;Supported by most browser (W3C standard)&lt;/li&gt;
&lt;li&gt;design suggestion&lt;ul&gt;
&lt;li&gt;do&lt;ul&gt;
&lt;li&gt;allow anonymous attestation (ECDAA) (e.g., TouchID)&lt;/li&gt;
&lt;li&gt;support multiple WebAuthn keys per user&lt;/li&gt;
&lt;li&gt;force user to tag/label their keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;don't&lt;ul&gt;
&lt;li&gt;make users choose between TOTP and WebAuthn → Let them do both&lt;/li&gt;
&lt;li&gt;use us2.js or any other pre-WebAuthn lib&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion&lt;ul&gt;
&lt;li&gt;You should add 2FA to your services and phasing out SMS 2FA&lt;/li&gt;
&lt;li&gt;TOTP&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyca/cryptography"&gt;pyca/crptography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WebAuthn&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/duo-labs/py_webauthn"&gt;Py_webauthn&lt;/a&gt; is a little rough, but production ready  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyGotham 2019"></category><category term="security"></category></entry><entry><title>Keynote - Russell Keith-Magee</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/12/Keynote-Russell-Keith-Magee" rel="alternate"></link><published>2019-12-30T09:40:00+08:00</published><updated>2019-12-30T09:40:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-12-30:/pycon-note/posts/pycon-us-2019/2019/12/Keynote-Russell-Keith-Magee</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Russell Keith-Magee&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ftP5BQh1-YM&amp;amp;t=1242s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="where-do-you-see-python-in-10-years"&gt;Where do you see Python in 10 years?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python's Black Swan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Black Swan&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1: Everyone uses a laptop?&lt;ul&gt;
&lt;li&gt;What happens to Python when laptop no longer exist?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2: Python can stay on the server&lt;/li&gt;
&lt;li&gt;3: Installation is a solved problem&lt;/li&gt;
&lt;li&gt;4: Code distribution doesn't matter …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Russell Keith-Magee&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ftP5BQh1-YM&amp;amp;t=1242s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="where-do-you-see-python-in-10-years"&gt;Where do you see Python in 10 years?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python's Black Swan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Black Swan&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1: Everyone uses a laptop?&lt;ul&gt;
&lt;li&gt;What happens to Python when laptop no longer exist?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2: Python can stay on the server&lt;/li&gt;
&lt;li&gt;3: Installation is a solved problem&lt;/li&gt;
&lt;li&gt;4: Code distribution doesn't matter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="america-cup"&gt;America Cup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lesson 1: It's not enough to just follow the rules. You have to ensure the competition is fair.&lt;/li&gt;
&lt;li&gt;Lesson 2: Watch out for Black Swans&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Challenge the assumption&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lesson 3: The team matters&lt;/li&gt;
&lt;li&gt;Lesson 4: Money makes things happen&lt;ul&gt;
&lt;li&gt;Expertise costs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5-call-to-action"&gt;5 Call to action&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Start thinking about Black swans (before it's too late)&lt;/li&gt;
&lt;li&gt;Improve resourcing of maintenance and R&amp;amp;D efforts&lt;/li&gt;
&lt;li&gt;Value contributors and their contributions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get out your wallet&lt;/strong&gt; xD&lt;/li&gt;
&lt;li&gt;Contribute&lt;/li&gt;
&lt;/ol&gt;</content><category term="PyCon US 2019"></category><category term="keynote"></category></entry><entry><title>Python Dependency Management</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-de-2018/2019/12/python-dependency-management" rel="alternate"></link><published>2019-12-24T11:35:00+08:00</published><updated>2019-12-24T11:35:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-12-24:/pycon-note/posts/pycon-de-2018/2019/12/python-dependency-management</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Patrick Muehlbauer&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=pA4XriRWVxQ"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Problems&lt;ul&gt;
&lt;li&gt;multiple tools for the whole workflow&lt;/li&gt;
&lt;li&gt;no real dependency resolution in pip&lt;/li&gt;
&lt;li&gt;multiple files needed for reproducible env (e.g., &lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;dev-requirements.txt&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Possible Solutions&lt;ul&gt;
&lt;li&gt;reproducible env&lt;ul&gt;
&lt;li&gt;Pipfile, Pipfile.lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;distutils/setuptools limitations&lt;ul&gt;
&lt;li&gt;pyproject.toml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python dependency managers&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pipenv.kennethreitz.org/en/latest/"&gt;pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/search?q=pip+tools&amp;amp;oq=pip+tools&amp;amp;aqs=chrome..69i57j0l7.1384j0j1&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;pip-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ofek/hatch"&gt;hatch …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Patrick Muehlbauer&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=pA4XriRWVxQ"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Problems&lt;ul&gt;
&lt;li&gt;multiple tools for the whole workflow&lt;/li&gt;
&lt;li&gt;no real dependency resolution in pip&lt;/li&gt;
&lt;li&gt;multiple files needed for reproducible env (e.g., &lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;dev-requirements.txt&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Possible Solutions&lt;ul&gt;
&lt;li&gt;reproducible env&lt;ul&gt;
&lt;li&gt;Pipfile, Pipfile.lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;distutils/setuptools limitations&lt;ul&gt;
&lt;li&gt;pyproject.toml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python dependency managers&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pipenv.kennethreitz.org/en/latest/"&gt;pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/search?q=pip+tools&amp;amp;oq=pip+tools&amp;amp;aqs=chrome..69i57j0l7.1384j0j1&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;pip-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ofek/hatch"&gt;hatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.conda.io/en/latest/"&gt;conda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cournape.github.io/Bento/"&gt;Bento&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/flit"&gt;flit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pantsbuild.org/pex.html"&gt;pants/ pex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Which to choose?&lt;ul&gt;
&lt;li&gt;It depends.&lt;/li&gt;
&lt;li&gt;Questions to ask&lt;ul&gt;
&lt;li&gt;Are building a library or an application?&lt;/li&gt;
&lt;li&gt;Doest it fit my infra?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pip-tools"&gt;pip-tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip-compile&lt;/code&gt;: generates &lt;strong&gt;requirements.txt&lt;/strong&gt; from &lt;strong&gt;setup.py&lt;/strong&gt; or &lt;strong&gt;requirements.in&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip-sync&lt;/code&gt;: dependency synchronization&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pipenv"&gt;Pipenv&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;wrapper around pip and virtual environments&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;Pipfile&lt;/strong&gt;, &lt;strong&gt;Pipfile.lock&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;for &lt;strong&gt;applications&lt;/strong&gt; rather than &lt;strong&gt;libraries&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;separate sections for dev and man dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Poetry&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;tool to manage dependencies, build and publish packasge&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;pyproject.toml&lt;/strong&gt;, &lt;strong&gt;poetry.lock&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hatch"&gt;hatch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;simplifies development workflow&lt;/li&gt;
&lt;li&gt;warps multiple tools (&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;twine&lt;/code&gt;, &lt;code&gt;pytest&lt;/code&gt;, &lt;code&gt;coverage.py&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;setup.py&lt;/strong&gt;, &lt;strong&gt;requirements.txt&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon DE 2018"></category><category term="dependencies"></category></entry><entry><title>How to Level Up</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/how-to-level-up" rel="alternate"></link><published>2019-12-23T15:48:00+08:00</published><updated>2019-12-23T15:48:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-12-23:/pycon-note/posts/pycon-ca-2019/2019/12/how-to-level-up</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Leta Montopoli&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lmontopo"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lmontopo/HowToLevelUp/blob/master/HowToLevelUp.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Be Curious&lt;ul&gt;
&lt;li&gt;What curiosity looks like&lt;ul&gt;
&lt;li&gt;ask question ← showing not ok with not understanding&lt;/li&gt;
&lt;li&gt;be open to learning from anyone&lt;/li&gt;
&lt;li&gt;contemplate if there is a better way&lt;/li&gt;
&lt;li&gt;focus on learning goals&lt;/li&gt;
&lt;li&gt;learn about the tools you use&lt;/li&gt;
&lt;li&gt;experimenting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be Brave&lt;ul&gt;
&lt;li&gt;When you get …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Leta Montopoli&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lmontopo"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lmontopo/HowToLevelUp/blob/master/HowToLevelUp.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Be Curious&lt;ul&gt;
&lt;li&gt;What curiosity looks like&lt;ul&gt;
&lt;li&gt;ask question ← showing not ok with not understanding&lt;/li&gt;
&lt;li&gt;be open to learning from anyone&lt;/li&gt;
&lt;li&gt;contemplate if there is a better way&lt;/li&gt;
&lt;li&gt;focus on learning goals&lt;/li&gt;
&lt;li&gt;learn about the tools you use&lt;/li&gt;
&lt;li&gt;experimenting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be Brave&lt;ul&gt;
&lt;li&gt;When you get that nervous / excited feeling in your stomach, that's a sign you gotta continue.&lt;/li&gt;
&lt;li&gt;What bravery looks like&lt;ul&gt;
&lt;li&gt;Volunteer for things that scare you&lt;/li&gt;
&lt;li&gt;Teach others, even if you aren't an "expert"&lt;/li&gt;
&lt;li&gt;ask basic and dumb questions&lt;/li&gt;
&lt;li&gt;read things you don't understand&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be Dissatisfied&lt;ul&gt;
&lt;li&gt;What dissatisfaction looks like&lt;ul&gt;
&lt;li&gt;Hunting for inefficiencies&lt;/li&gt;
&lt;li&gt;Have pet projects&lt;/li&gt;
&lt;li&gt;Make thins faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be reflective&lt;ul&gt;
&lt;li&gt;Bing reflective helps us learn through experience&lt;/li&gt;
&lt;li&gt;What being reflective looks like&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Journal everyday&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Learn from your successes and your failures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon CA 2019"></category><category term="Learning"></category></entry><entry><title>My Favourite Errors - Tales From The Ops Side</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/my-favourite-errors" rel="alternate"></link><published>2019-12-23T11:48:00+08:00</published><updated>2019-12-23T11:48:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-12-23:/pycon-note/posts/pycon-ca-2019/2019/12/my-favourite-errors</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/iHandroid"&gt;Hany Fahim&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devopsdays.org/events/2019-toronto/program/hany-fahim"&gt;His talk in devops day&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Errors are a part of the job&lt;/li&gt;
&lt;li&gt;Various Network related errors&lt;ul&gt;
&lt;li&gt;TCP usually easier&lt;/li&gt;
&lt;li&gt;HTTP not that easy to debug&lt;ul&gt;
&lt;li&gt;A lots of HTTP error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No errors &amp;lt; timeout errors &amp;lt; other errors&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon CA 2019"></category><category term="WIP"></category><category term="Web"></category></entry><entry><title>PySpark: avoiding common pitfalls and keeping your sanity</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/pyspark-avoiding-common-pitfalls-and-keeping-your-sanity" rel="alternate"></link><published>2019-12-23T11:48:00+08:00</published><updated>2019-12-23T11:48:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-12-23:/pycon-note/posts/pycon-ca-2019/2019/12/pyspark-avoiding-common-pitfalls-and-keeping-your-sanity</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jonathan&lt;/p&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;25 minutes of sanity&lt;ol&gt;
&lt;li&gt;Improving code readability&lt;/li&gt;
&lt;li&gt;Understand the type dichotomy&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Readability&lt;ul&gt;
&lt;li&gt;Pipelining in PySpark via method chaining&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Types dichotomy&lt;ul&gt;
&lt;li&gt;Prefer using &lt;code&gt;IntegerType()&lt;/code&gt; or &lt;code&gt;LongType()&lt;/code&gt; when dealing with integers&lt;ul&gt;
&lt;li&gt;unless you have a (very) good reason not to&lt;/li&gt;
&lt;li&gt;and are willing to test for overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take the …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jonathan&lt;/p&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;25 minutes of sanity&lt;ol&gt;
&lt;li&gt;Improving code readability&lt;/li&gt;
&lt;li&gt;Understand the type dichotomy&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Readability&lt;ul&gt;
&lt;li&gt;Pipelining in PySpark via method chaining&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Types dichotomy&lt;ul&gt;
&lt;li&gt;Prefer using &lt;code&gt;IntegerType()&lt;/code&gt; or &lt;code&gt;LongType()&lt;/code&gt; when dealing with integers&lt;ul&gt;
&lt;li&gt;unless you have a (very) good reason not to&lt;/li&gt;
&lt;li&gt;and are willing to test for overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take the time to "type" your columns&lt;/li&gt;
&lt;li&gt;Use API doc to know the required type of the column&lt;ul&gt;
&lt;li&gt;It's usually provided in the function description&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use Python's typing and PySpark's return type for UDFs&lt;/li&gt;
&lt;li&gt;Prefer schema-full data format(Parquet, Avro, ORC), avoid share CSV internally&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q &amp;amp; A&lt;ul&gt;
&lt;li&gt;Would you recommend using pyspark in small scale (e.g., a few GBs)?&lt;ul&gt;
&lt;li&gt;Won't recommend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon CA 2019"></category><category term="WIP"></category><category term="Spark"></category></entry><entry><title>Understanding autistic children using BioSensors and Python!</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/understanding-autistic-children-using-bioSensors-and-python" rel="alternate"></link><published>2019-12-23T11:48:00+08:00</published><updated>2019-12-23T11:48:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-12-23:/pycon-note/posts/pycon-ca-2019/2019/12/understanding-autistic-children-using-bioSensors-and-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/nihaaarika"&gt;Niharika Krishnan&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://in.pycon.org/cfp/posters-2019/proposals/autiglove-understanding-autistic-children-using-biosensors-and-python~b25Pa/"&gt;Her talk in PyCon India&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Emotion Recognition&lt;ul&gt;
&lt;li&gt;How others do?&lt;ul&gt;
&lt;li&gt;Facial&lt;/li&gt;
&lt;li&gt;Speech&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Both does not work for autism&lt;ul&gt;
&lt;li&gt;Facial: Difficulty in expressing&lt;/li&gt;
&lt;li&gt;Speech: Cannot be control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why not physiological signal → AutiGlove&lt;ul&gt;
&lt;li&gt;BioSensors → Capture Signal&lt;ul&gt;
&lt;li&gt;Galvanic Skin Response&lt;/li&gt;
&lt;li&gt;Pulse Sensor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Experiment&lt;ul&gt;
&lt;li&gt;Play Emotional Video&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://biosppy.readthedocs.io/en/stable/"&gt;BioSPPy&lt;/a&gt;: BioSingal Processing …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/nihaaarika"&gt;Niharika Krishnan&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://in.pycon.org/cfp/posters-2019/proposals/autiglove-understanding-autistic-children-using-biosensors-and-python~b25Pa/"&gt;Her talk in PyCon India&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Emotion Recognition&lt;ul&gt;
&lt;li&gt;How others do?&lt;ul&gt;
&lt;li&gt;Facial&lt;/li&gt;
&lt;li&gt;Speech&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Both does not work for autism&lt;ul&gt;
&lt;li&gt;Facial: Difficulty in expressing&lt;/li&gt;
&lt;li&gt;Speech: Cannot be control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why not physiological signal → AutiGlove&lt;ul&gt;
&lt;li&gt;BioSensors → Capture Signal&lt;ul&gt;
&lt;li&gt;Galvanic Skin Response&lt;/li&gt;
&lt;li&gt;Pulse Sensor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Experiment&lt;ul&gt;
&lt;li&gt;Play Emotional Video&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://biosppy.readthedocs.io/en/stable/"&gt;BioSPPy&lt;/a&gt;: BioSingal Processing in Python&lt;/li&gt;
&lt;li&gt;Q &amp;amp; A&lt;ul&gt;
&lt;li&gt;How many people work on it?&lt;ul&gt;
&lt;li&gt;Team of 2 computer science students&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon CA 2019"></category><category term="WIP"></category><category term="Machine Learning"></category></entry><entry><title>From days to minutes, from minutes to milliseconds with SQLAlchemy</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/from-days-to-minutes-from-minutes-to-milliseconds-with-SQLAlchemy" rel="alternate"></link><published>2019-11-07T11:48:00+08:00</published><updated>2019-11-07T11:48:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/from-days-to-minutes-from-minutes-to-milliseconds-with-SQLAlchemy</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Leonardo Rochael Almeida&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kEShMV4VfWE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQLAlchemy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Expression Language (a Python DSL)&lt;/li&gt;
&lt;li&gt;Object Relational Mapper (ORM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ORM Trap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sensible Python Code → Bad SQL access patterns&lt;/li&gt;
&lt;li&gt;unnoticeable at low data volumes&lt;ul&gt;
&lt;li&gt;e.g., dev and early production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Fix: Let the DB do its job&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be aware of …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Leonardo Rochael Almeida&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kEShMV4VfWE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQLAlchemy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Expression Language (a Python DSL)&lt;/li&gt;
&lt;li&gt;Object Relational Mapper (ORM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ORM Trap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sensible Python Code → Bad SQL access patterns&lt;/li&gt;
&lt;li&gt;unnoticeable at low data volumes&lt;ul&gt;
&lt;li&gt;e.g., dev and early production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Fix: Let the DB do its job&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be aware of implicit queries&lt;ul&gt;
&lt;li&gt;especially from relationships&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Aim for O(1) queries per request/job/activity&lt;ul&gt;
&lt;li&gt;Avoid looping through model instances&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="database"></category><category term="efficiency"></category></entry><entry><title>Programmatic Notebooks with papermill</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/programmatic-notebooks-with-papermill" rel="alternate"></link><published>2019-11-07T11:45:00+08:00</published><updated>2019-11-07T11:45:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/programmatic-notebooks-with-papermill</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Matthew Seal&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vBEEL274sco"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1rliRPGdcPu_6Jk9gCHbq7B_HPbraH7exYFYDr-u76MM/edit#slide=id.g2b48bd7e95_0_4"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nteract/papermill"&gt;papermill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nteract/scrapbook"&gt;scrapbook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The bad side of Jupyter notebook&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lack of history&lt;/li&gt;
&lt;li&gt;Difficult to test&lt;/li&gt;
&lt;li&gt;Mutable document&lt;/li&gt;
&lt;li&gt;Hard to parameterize&lt;/li&gt;
&lt;li&gt;Live collaboration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="filling-the-gaps-papermill"&gt;Filling the Gaps - papermill&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Things to preserve&lt;ul&gt;
&lt;li&gt;results linked to code&lt;/li&gt;
&lt;li&gt;good visuals&lt;/li&gt;
&lt;li&gt;easy to share&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Things to improve&lt;ul&gt;
&lt;li&gt;not versioned&lt;/li&gt;
&lt;li&gt;mutable …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Matthew Seal&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vBEEL274sco"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1rliRPGdcPu_6Jk9gCHbq7B_HPbraH7exYFYDr-u76MM/edit#slide=id.g2b48bd7e95_0_4"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nteract/papermill"&gt;papermill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nteract/scrapbook"&gt;scrapbook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The bad side of Jupyter notebook&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lack of history&lt;/li&gt;
&lt;li&gt;Difficult to test&lt;/li&gt;
&lt;li&gt;Mutable document&lt;/li&gt;
&lt;li&gt;Hard to parameterize&lt;/li&gt;
&lt;li&gt;Live collaboration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="filling-the-gaps-papermill"&gt;Filling the Gaps - papermill&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Things to preserve&lt;ul&gt;
&lt;li&gt;results linked to code&lt;/li&gt;
&lt;li&gt;good visuals&lt;/li&gt;
&lt;li&gt;easy to share&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Things to improve&lt;ul&gt;
&lt;li&gt;not versioned&lt;/li&gt;
&lt;li&gt;mutable state&lt;/li&gt;
&lt;li&gt;templating&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-users-extensions"&gt;New Users &amp;amp; Extensions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Easy to extend&lt;ul&gt;
&lt;li&gt;They're all component&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="data"></category><category term="jupyter"></category></entry><entry><title>Everything at Once: Python's Many Concurrency Models</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/everything-at-once-python-s-many-concurrency-models" rel="alternate"></link><published>2019-11-07T11:41:00+08:00</published><updated>2019-11-07T11:41:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/everything-at-once-python-s-many-concurrency-models</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jess Shapiro&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=w2nKIGhXPAM"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;available options in Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asyncio&lt;/li&gt;
&lt;li&gt;Python threads&lt;/li&gt;
&lt;li&gt;GIL-released thread&lt;/li&gt;
&lt;li&gt;multiprocessing&lt;/li&gt;
&lt;li&gt;distributed tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parallelism&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do things actually happen simultaneously?&lt;/li&gt;
&lt;li&gt;How does performance scale when you add more CPUs?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;minimum schedulable unit&lt;ul&gt;
&lt;li&gt;How big are the code can be run independently?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;data sharing and isolation&lt;ul&gt;
&lt;li&gt;how …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jess Shapiro&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=w2nKIGhXPAM"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;available options in Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asyncio&lt;/li&gt;
&lt;li&gt;Python threads&lt;/li&gt;
&lt;li&gt;GIL-released thread&lt;/li&gt;
&lt;li&gt;multiprocessing&lt;/li&gt;
&lt;li&gt;distributed tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parallelism&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do things actually happen simultaneously?&lt;/li&gt;
&lt;li&gt;How does performance scale when you add more CPUs?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;minimum schedulable unit&lt;ul&gt;
&lt;li&gt;How big are the code can be run independently?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;data sharing and isolation&lt;ul&gt;
&lt;li&gt;how isolated is data between tasks?&lt;/li&gt;
&lt;li&gt;how long does data stay the same for?&lt;/li&gt;
&lt;li&gt;what tools can be used to share data?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asyncio"&gt;asyncio&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;one coroutine runs at a time&lt;ul&gt;
&lt;li&gt;event loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;global state is shared and consistent within each block&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="python-threads"&gt;Python threads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One thread runs (GIL)&lt;/li&gt;
&lt;li&gt;Global state is shared but consistent only for single bytecodes ops&lt;ul&gt;
&lt;li&gt;e.g,&lt;ul&gt;
&lt;li&gt;single bytecodes ops: &lt;code&gt;func(**kw)&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;non-single bytecodes ops: &lt;code&gt;x += 1&lt;/code&gt;, &lt;code&gt;dict,items()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;combined scheduling&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="gil-released-threads"&gt;GIL-released threads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;multiple threads run simultaneously&lt;/li&gt;
&lt;li&gt;Global state is shared but unreliable&lt;/li&gt;
&lt;li&gt;OS-scheduled&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="multiprocessing"&gt;multiprocessing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;multiple processes run simultaneously&lt;/li&gt;
&lt;li&gt;global state starts the same as parent, but evolves independently&lt;/li&gt;
&lt;li&gt;OS-scheduled&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="distributed-tasks"&gt;Distributed Tasks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiple tasks run simultaneously&lt;/li&gt;
&lt;li&gt;Global state totally independent&lt;/li&gt;
&lt;li&gt;Central orchestrator&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="concurrency"></category></entry><entry><title>Does remote work really work?</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/does-remote-work-really-work" rel="alternate"></link><published>2019-11-07T11:35:00+08:00</published><updated>2019-11-07T11:35:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/does-remote-work-really-work</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Lauren Schaefer&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Lauren Schaefer"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/LaurenHaywardSchaefe/does-remote-work-really-work"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Think about a time you were fabulously productive.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Open offices spaces&lt;/code&gt;, &lt;code&gt;Working remotely&lt;/code&gt; and &lt;code&gt;Cubeland&lt;/code&gt; all can be &lt;strong&gt;THE WORST.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="why-do-you-want-to-work-remotely"&gt;Why do you want to work remotely?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unable to relocate&lt;/li&gt;
&lt;li&gt;lengthy commutes&lt;/li&gt;
&lt;li&gt;availability for children or aging parents&lt;/li&gt;
&lt;li&gt;distracting office environments&lt;/li&gt;
&lt;li&gt;travel the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Lauren Schaefer&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Lauren Schaefer"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/LaurenHaywardSchaefe/does-remote-work-really-work"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Think about a time you were fabulously productive.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Open offices spaces&lt;/code&gt;, &lt;code&gt;Working remotely&lt;/code&gt; and &lt;code&gt;Cubeland&lt;/code&gt; all can be &lt;strong&gt;THE WORST.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="why-do-you-want-to-work-remotely"&gt;Why do you want to work remotely?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unable to relocate&lt;/li&gt;
&lt;li&gt;lengthy commutes&lt;/li&gt;
&lt;li&gt;availability for children or aging parents&lt;/li&gt;
&lt;li&gt;distracting office environments&lt;/li&gt;
&lt;li&gt;travel the world&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="why-do-employers-offer-remote-job"&gt;Why do employers offer remote job?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;attract and retain top talent&lt;/li&gt;
&lt;li&gt;increate employee morale&lt;/li&gt;
&lt;li&gt;save money&lt;/li&gt;
&lt;li&gt;increase employee productivity&lt;ul&gt;
&lt;li&gt;Fewer sick days&lt;/li&gt;
&lt;li&gt;Shorter breaks&lt;/li&gt;
&lt;li&gt;Fewer distractions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="what-does-the-research-say"&gt;What does the research say?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The more experience you have, the more likely you can have a remote job.&lt;/li&gt;
&lt;li&gt;The down side&lt;ul&gt;
&lt;li&gt;professional isolation negatively impacts job performance&lt;/li&gt;
&lt;li&gt;having a remote manager may negatively impact you&lt;/li&gt;
&lt;li&gt;remote employees fear&lt;ul&gt;
&lt;li&gt;stalling careers&lt;/li&gt;
&lt;li&gt;isolation&lt;/li&gt;
&lt;li&gt;distractions&lt;/li&gt;
&lt;li&gt;blurred lines between work and home life&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;remote work encourages employees to "overwork and to allow their work to infringe on their family role"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-to-convince-your-boss-to-let-you-work-remotely"&gt;How to convince your boss to let you work remotely?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Propose an experiment&lt;ul&gt;
&lt;li&gt;But what about collaboration and water-cooler conversations?&lt;ul&gt;
&lt;li&gt;When all else fails, talk about the bottom line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-to-be-a-successful-remote-employee-important"&gt;How to be a successful remote employee (&lt;strong&gt;Important&lt;/strong&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Join the right team&lt;ul&gt;
&lt;li&gt;e.g., fully distributed team&lt;/li&gt;
&lt;li&gt;consider the communication styles&lt;/li&gt;
&lt;li&gt;schedule one-on-one for each member&lt;ul&gt;
&lt;li&gt;Show picture of yourself&lt;/li&gt;
&lt;li&gt;For becoming the real person&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be productive&lt;ul&gt;
&lt;li&gt;Set daily goal&lt;/li&gt;
&lt;li&gt;Create a work space suitable&lt;/li&gt;
&lt;li&gt;Don't work on your couch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Communicate with you team&lt;ul&gt;
&lt;li&gt;Make sure you're making thing person as you're in office&lt;/li&gt;
&lt;li&gt;Be a great PR agent for yourself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Travel&lt;ul&gt;
&lt;li&gt;Get out your home office&lt;/li&gt;
&lt;li&gt;Get a chance to meet a coworker in person&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actively prevent burnout&lt;ul&gt;
&lt;li&gt;Take a lunch break&lt;/li&gt;
&lt;li&gt;Stretch before meeting&lt;/li&gt;
&lt;li&gt;Turn off your computer after work&lt;ul&gt;
&lt;li&gt;Include notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="remote"></category><category term="job"></category></entry><entry><title>Life Is Better Painted Black, or: How to Stop Worrying and Embrace Auto-Formatting</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting" rel="alternate"></link><published>2019-11-07T10:51:00+08:00</published><updated>2019-11-07T10:51:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Łukasz Langa&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=esZLCuWs_2Y"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Problem Statement&lt;ul&gt;
&lt;li&gt;From Style Guide (PEP 8) to Code Style&lt;ul&gt;
&lt;li&gt;Sol 1: Linters&lt;ul&gt;
&lt;li&gt;It still has human labor involves.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sol 2: Auto-formatting&lt;ul&gt;
&lt;li&gt;Why people don't like auto-formatting? → too destructive&lt;/li&gt;
&lt;li&gt;What we can learn from Go Community? → &lt;code&gt;Uniformity Trumps Perfection&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The good enough uniform format …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Łukasz Langa&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=esZLCuWs_2Y"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Problem Statement&lt;ul&gt;
&lt;li&gt;From Style Guide (PEP 8) to Code Style&lt;ul&gt;
&lt;li&gt;Sol 1: Linters&lt;ul&gt;
&lt;li&gt;It still has human labor involves.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sol 2: Auto-formatting&lt;ul&gt;
&lt;li&gt;Why people don't like auto-formatting? → too destructive&lt;/li&gt;
&lt;li&gt;What we can learn from Go Community? → &lt;code&gt;Uniformity Trumps Perfection&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The good enough uniform format style is better than having a lot of different formatting that are locally better but is inconsistence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Auto-formatter in different languages&lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;gofmt&lt;/a&gt; for go&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; for javascript&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; for Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design and implementation&lt;ul&gt;
&lt;li&gt;Goal&lt;ul&gt;
&lt;li&gt;Opinionated&lt;/li&gt;
&lt;li&gt;Deterministic&lt;/li&gt;
&lt;li&gt;Consistent&lt;/li&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tips for adoption&lt;ul&gt;
&lt;li&gt;&lt;a href="https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/git-hyper-blame.html"&gt;git-hyper-blame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="code quality"></category><category term="automation"></category></entry><entry><title>Pipenv: The Future of Python Dependency Management</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management" rel="alternate"></link><published>2019-11-06T13:21:00+08:00</published><updated>2019-11-06T13:21:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-06:/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kenneth Reitz&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GBQAKldqgZs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Packaging History&lt;ol&gt;
&lt;li&gt;unzip and install from &lt;code&gt;setup.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;easy_install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Python has no lock files!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv-fork.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pipfile&lt;ul&gt;
&lt;li&gt;TOML: easy to read/ write manually&lt;/li&gt;
&lt;li&gt;Two groups: &lt;code&gt;[package]&lt;/code&gt;, &lt;code&gt;[dev-package]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipfile.lock&lt;ul&gt;
&lt;li&gt;JSON: machine readible&lt;/li&gt;
&lt;li&gt;transitive dependencies pinned with all acceptable hashes for each …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kenneth Reitz&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GBQAKldqgZs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Packaging History&lt;ol&gt;
&lt;li&gt;unzip and install from &lt;code&gt;setup.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;easy_install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Python has no lock files!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv-fork.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pipfile&lt;ul&gt;
&lt;li&gt;TOML: easy to read/ write manually&lt;/li&gt;
&lt;li&gt;Two groups: &lt;code&gt;[package]&lt;/code&gt;, &lt;code&gt;[dev-package]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipfile.lock&lt;ul&gt;
&lt;li&gt;JSON: machine readible&lt;/li&gt;
&lt;li&gt;transitive dependencies pinned with all acceptable hashes for each releases&lt;/li&gt;
&lt;li&gt;Two groups: &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install packages concurrently&lt;/li&gt;
&lt;li&gt;Support multiple source&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv --venv&lt;/code&gt;: show you the venv created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv --graph&lt;/code&gt;: show dependency tree&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;: check the vulnerability of packages&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;pipenv install django==1.4.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv install --deploy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv install --ignore-pipfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv --python &amp;lt;version&amp;gt;&lt;/code&gt;: automatically install certain python version if you have &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; installed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv lock -r&lt;/code&gt;: generate &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We should put the lock file on source control.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv uninstall&lt;/code&gt; uninstall only the package. &lt;code&gt;pipenv sync&lt;/code&gt; is needed to uninstall all its transitive dependencies.&lt;/li&gt;
&lt;li&gt;Pipenv finds created venv through path of the directory. Thus, if you move the directory, you'll have to create a new virtual environment.&lt;/li&gt;
&lt;li&gt;Pipenv won't be a replacement for &lt;code&gt;setup.py&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Pipenv is for application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup.py&lt;/code&gt; is for lib.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="dependencies"></category><category term="virtual environment"></category></entry><entry><title>Pytest: Rapid Simple Testing</title><link href="https://lee-w.github.io/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing" rel="alternate"></link><published>2019-11-06T12:00:00+08:00</published><updated>2019-11-06T12:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-06:/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Florian Bruhin&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rCBHkQ_LVIs"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why pytest&lt;ul&gt;
&lt;li&gt;assertion rewrite&lt;/li&gt;
&lt;li&gt;parameterize&lt;/li&gt;
&lt;li&gt;fixtures&lt;ul&gt;
&lt;li&gt;build-in fixtures&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmpdir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monkeypatch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;plugins&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-bdd"&gt;pytest-bdd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pivotfinland.com/pytest-sugar/"&gt;pytest-sugar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Swiss Python Summit 2016"></category><category term="test"></category></entry><entry><title>Python Security Tool</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool" rel="alternate"></link><published>2019-10-26T11:10:00+08:00</published><updated>2019-10-26T11:10:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-10-26:/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Terri Oda&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=e7zzdl8OXCU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="detecting-known-vulnerability"&gt;Detecting Known Vulnerability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cve.mitre.org"&gt;CVE&lt;/a&gt;: database with known software vulerability&lt;/li&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Free db: update monthly&lt;/li&gt;
&lt;li&gt;Paid db: update realtime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Safety vs Pipenv: Which one is better?&lt;ul&gt;
&lt;li&gt;Neither! They use the same database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-quality"&gt;Code Quality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/search?client=firefox-b-d&amp;amp;q=pylint"&gt;pylint&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Security Value: Low&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Goal: find security issues …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Terri Oda&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=e7zzdl8OXCU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="detecting-known-vulnerability"&gt;Detecting Known Vulnerability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cve.mitre.org"&gt;CVE&lt;/a&gt;: database with known software vulerability&lt;/li&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Free db: update monthly&lt;/li&gt;
&lt;li&gt;Paid db: update realtime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Safety vs Pipenv: Which one is better?&lt;ul&gt;
&lt;li&gt;Neither! They use the same database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-quality"&gt;Code Quality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/search?client=firefox-b-d&amp;amp;q=pylint"&gt;pylint&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Security Value: Low&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Goal: find security issues&lt;/li&gt;
&lt;li&gt;Security Value: High&lt;/li&gt;
&lt;li&gt;Sometimes you don't want to fix all your Bandit warnings&lt;/li&gt;
&lt;li&gt;Use them as a way to focus code review instead&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-quality-some-anti-patterns"&gt;Code Quality - some anti-patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sans.org/top25-software-errors/"&gt;What Errors Are Included in the Top 25 Software Errors?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-these-tools"&gt;Use these tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;li&gt;During code review&lt;/li&gt;
&lt;li&gt;Before release&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="how-do-i-secure-python"&gt;How do I secure python?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Check for known vulnerabilities&lt;ul&gt;
&lt;li&gt;&lt;code&gt;safety check&lt;/code&gt; or &lt;code&gt;pipenv check&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for code quality&lt;ul&gt;
&lt;li&gt;pylint for basic linting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bandit&lt;/code&gt; for security linting&lt;/li&gt;
&lt;li&gt;other static analysis for more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review secure coding guidelines for python to improve code reviews&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="security"></category></entry><entry><title>這樣的開發環境沒問題嗎？</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-tw-2018/2019/10/is-your-dev-env-alright" rel="alternate"></link><published>2019-10-18T23:59:00+08:00</published><updated>2019-10-18T23:59:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-10-18:/pycon-note/posts/pycon-tw-2018/2019/10/is-your-dev-env-alright</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Tzu-ping Chung&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6Nl0IYkU0hU&amp;amp;t=204s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/uranusjr/zhe-yang-de-kai-fa-huan-jing-mei-wen-ti-ma"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;interpreter → tools → dependencies → application&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Try Pipenv&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tools"&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mitsuhiko/pipsi"&gt;pipsi&lt;/a&gt; can be an option. But, it has not been updated for a while.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p ~/.local/bin ~/.local/venvs
python3 -m venv ~/.local/venvs/pipenv
~/.local/venvs/pipenv/bin/pip install pipenv
ln -s …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Tzu-ping Chung&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6Nl0IYkU0hU&amp;amp;t=204s"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/uranusjr/zhe-yang-de-kai-fa-huan-jing-mei-wen-ti-ma"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;interpreter → tools → dependencies → application&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Try Pipenv&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tools"&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mitsuhiko/pipsi"&gt;pipsi&lt;/a&gt; can be an option. But, it has not been updated for a while.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p ~/.local/bin ~/.local/venvs
python3 -m venv ~/.local/venvs/pipenv
~/.local/venvs/pipenv/bin/pip install pipenv
ln -s ~/.local/venvs/pipenv/bin/pipenv ~/.local/bin
pipenv --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Rule of Thumb&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Do not use &lt;code&gt;sudo&lt;/code&gt;. Ever.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Always use virtual environements&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;--user&lt;/code&gt; when desperate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="interpreter"&gt;Interpreter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;Ubuntu: use "deadsnakes" PPA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;macOS&lt;ul&gt;
&lt;li&gt;Do not use System Python, Homebrew Python&lt;/li&gt;
&lt;li&gt;Must compile your own&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;Just download it from &lt;a href="https://www.python.org/"&gt;python.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or use &lt;a href="https://github.com/uranusjr/pythonup-windows"&gt;pythonup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon TW 2018"></category><category term="virtual environment"></category></entry><entry><title>Modern development environments for Pythonistas</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-jp-2019/2019/10/modern-development-environments-for-pythonistas" rel="alternate"></link><published>2019-10-02T16:20:00+08:00</published><updated>2019-10-02T16:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-10-02:/pycon-note/posts/pycon-jp-2019/2019/10/modern-development-environments-for-pythonistas</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dustin Ingram&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=d3cj4f63u-A"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Speaker&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dustin Ingram (&lt;a href="https://twitter.com/di_codes"&gt;twitter&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Organize PyTexas&lt;/li&gt;
&lt;li&gt;PyPi contributor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dev, test env&lt;/li&gt;
&lt;li&gt;dependency workflows&lt;/li&gt;
&lt;li&gt;linting &amp;amp; autoformatting&lt;/li&gt;
&lt;li&gt;go to prod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Focus: anything that's not code and will be check into code base&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dev-test-environment"&gt;dev, test environment&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Your development environment.&lt;br&gt;
"But it works on my machine"&lt;/p&gt;
&lt;p&gt;You …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dustin Ingram&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=d3cj4f63u-A"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Speaker&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dustin Ingram (&lt;a href="https://twitter.com/di_codes"&gt;twitter&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Organize PyTexas&lt;/li&gt;
&lt;li&gt;PyPi contributor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dev, test env&lt;/li&gt;
&lt;li&gt;dependency workflows&lt;/li&gt;
&lt;li&gt;linting &amp;amp; autoformatting&lt;/li&gt;
&lt;li&gt;go to prod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Focus: anything that's not code and will be check into code base&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dev-test-environment"&gt;dev, test environment&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Your development environment.&lt;br&gt;
"But it works on my machine"&lt;/p&gt;
&lt;p&gt;You laptop is not production.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Problem: &lt;code&gt;virtualenv&lt;/code&gt; only isolate Python. Platform-level stuff are still shared.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fully isolate a reproducible environments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;containerization (e.g., docker)&lt;ul&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-modern-workflow-for-dependencies"&gt;A modern workflow for dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Problems: When install a new package and it depends on newer version of old dependency, it might upgrade unnoticeably.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; anymore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bad&lt;ul&gt;
&lt;li&gt;Get everything from your system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Good&lt;ul&gt;
&lt;li&gt;Version pinning&lt;/li&gt;
&lt;li&gt;Managing sub-dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pip-tools"&gt;pip-tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jazzband/pip-tools/"&gt;pip-tools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pin and compile the dependencies and sub-dependencies&lt;br&gt;
&lt;code&gt;sh
    pip-compile requirements.in&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Pinning and compiling only get 90%&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Artifact hashing&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip compile --generate-hashes requirements.in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install --require-hashes -r requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Now our deps are 100% frozen&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="when-how-to-upgrade-dependencies"&gt;When / How to upgrade dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When: early and often&lt;/li&gt;
&lt;li&gt;How: automated dependency services → scan you repo and see your deps&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pyup.io"&gt;pyup.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dependabot.com"&gt;dependabot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="linting-and-autoformatting"&gt;Linting and autoformatting&lt;/h2&gt;
&lt;p&gt;Use &lt;a href="https://github.com/ambv/black"&gt;black&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="taking-your-env-to-prod"&gt;Taking your env to prod&lt;/h2&gt;
&lt;p&gt;Through services that supports deployment through container&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Use docker&lt;/li&gt;
&lt;li&gt;Use docker-compose&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;pip-compile&lt;/code&gt; from &lt;code&gt;pip-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://dependabot.com"&gt;dependabot&lt;/a&gt; / &lt;a href="https://pyup.io"&gt;pyup.io&lt;/a&gt;&lt;br&gt;
 for auto-upgrade deps&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://dependabot.com"&gt;dependabot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deploy your docker container to prod&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="q-a"&gt;Q &amp;amp; A&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Q: pipenv, poetry or pip-tools&lt;ul&gt;
&lt;li&gt;A: Personal perference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon JP 2019"></category><category term="best practices"></category></entry><entry><title>Automating Code Quality</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality" rel="alternate"></link><published>2019-09-30T18:55:00+08:00</published><updated>2019-09-30T18:55:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-09-30:/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kyle Knapp&lt;/p&gt;
&lt;h2 id="materials"&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G1lDk_WKXvY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/chalice"&gt;aws/chalice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steps to automation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;flake8&lt;ul&gt;
&lt;li&gt;pycodestyle → style&lt;/li&gt;
&lt;li&gt;pyflakes → bug&lt;/li&gt;
&lt;li&gt;mccabe → complexity&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flake8 --max-complexity ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pylint&lt;ul&gt;
&lt;li&gt;similar but stricter and more optional than flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;li&gt;other tools: &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;doc8&lt;/code&gt;, &lt;code&gt;pydocstyle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;automation on local env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-dev.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;atuomation on prod env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-prod …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kyle Knapp&lt;/p&gt;
&lt;h2 id="materials"&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G1lDk_WKXvY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/chalice"&gt;aws/chalice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steps to automation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;flake8&lt;ul&gt;
&lt;li&gt;pycodestyle → style&lt;/li&gt;
&lt;li&gt;pyflakes → bug&lt;/li&gt;
&lt;li&gt;mccabe → complexity&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flake8 --max-complexity ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pylint&lt;ul&gt;
&lt;li&gt;similar but stricter and more optional than flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;li&gt;other tools: &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;doc8&lt;/code&gt;, &lt;code&gt;pydocstyle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;automation on local env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-dev.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;atuomation on prod env&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements-prod.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="pylint-vs-flake8" src="https://lee-w.github.io/pycon-note/images/post-images/automating-code-quality/15698391534086.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best practices&lt;ol&gt;
&lt;li&gt;Always improve quality check&lt;/li&gt;
&lt;li&gt;Avoid compromising existing quality checks&lt;/li&gt;
&lt;li&gt;Be aware automated quality checks does not guarantee code quality&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2018"></category><category term="code quality"></category><category term="automation"></category></entry><entry><title>Ace Your Technical Interview Using Python</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Erin Allard&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NltGUUi23zc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/100ZV3WoR4xMH489AdGLNF6zejuq9o7rU4pZa8-jPZTE/edit#slide=id.p"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Technical Interview Process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Recruiter phone screen&lt;/li&gt;
&lt;li&gt;Technical phone screen with an engineer&lt;/li&gt;
&lt;li&gt;Take-home assessment&lt;/li&gt;
&lt;li&gt;Onsite interviews'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-technical skill matters (a lot)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;problem solving&lt;/li&gt;
&lt;li&gt;ask good questions&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/good-questions/"&gt;How to Ask Good Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;understand assumption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code (obviously) matters&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;time complexity&lt;/li&gt;
&lt;li&gt;recursion&lt;ul&gt;
&lt;li&gt;base case&lt;/li&gt;
&lt;li&gt;progress …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Erin Allard&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NltGUUi23zc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/100ZV3WoR4xMH489AdGLNF6zejuq9o7rU4pZa8-jPZTE/edit#slide=id.p"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Technical Interview Process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Recruiter phone screen&lt;/li&gt;
&lt;li&gt;Technical phone screen with an engineer&lt;/li&gt;
&lt;li&gt;Take-home assessment&lt;/li&gt;
&lt;li&gt;Onsite interviews'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-technical skill matters (a lot)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;problem solving&lt;/li&gt;
&lt;li&gt;ask good questions&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/good-questions/"&gt;How to Ask Good Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;understand assumption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code (obviously) matters&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;time complexity&lt;/li&gt;
&lt;li&gt;recursion&lt;ul&gt;
&lt;li&gt;base case&lt;/li&gt;
&lt;li&gt;progress&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;object-oriented programming&lt;/li&gt;
&lt;li&gt;data structure &amp;amp; algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding challenges: quality over quantity&lt;/li&gt;
&lt;li&gt;Mindset is key&lt;ul&gt;
&lt;li&gt;Failure and rejection are part of the process&lt;/li&gt;
&lt;li&gt;You don't need every company to want to hire you&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="job"></category></entry><entry><title>API Evolution the Right Way</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;A. Jesse Jiryu Davis&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqDnB6jKzcE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emptysqua.re/blog/api-evolution-the-right-way/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Avoid Bad Features&lt;/li&gt;
&lt;li&gt;Minimize Features&lt;/li&gt;
&lt;li&gt;Keep Feature Narrow&lt;/li&gt;
&lt;li&gt;Mark Experimental Features "Provisional"&lt;/li&gt;
&lt;li&gt;Delete Feature Gently&lt;ul&gt;
&lt;li&gt;Deprecated warning&lt;/li&gt;
&lt;li&gt;Instructive error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maintain a Change Log&lt;/li&gt;
&lt;li&gt;Choose a Version Scheme&lt;ul&gt;
&lt;li&gt;Semantic Versioning&lt;/li&gt;
&lt;li&gt;Time-based Versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an Upgrade Guide&lt;/li&gt;
&lt;li&gt;Add parameter compatibly （and fail loudly …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;A. Jesse Jiryu Davis&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqDnB6jKzcE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emptysqua.re/blog/api-evolution-the-right-way/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Avoid Bad Features&lt;/li&gt;
&lt;li&gt;Minimize Features&lt;/li&gt;
&lt;li&gt;Keep Feature Narrow&lt;/li&gt;
&lt;li&gt;Mark Experimental Features "Provisional"&lt;/li&gt;
&lt;li&gt;Delete Feature Gently&lt;ul&gt;
&lt;li&gt;Deprecated warning&lt;/li&gt;
&lt;li&gt;Instructive error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maintain a Change Log&lt;/li&gt;
&lt;li&gt;Choose a Version Scheme&lt;ul&gt;
&lt;li&gt;Semantic Versioning&lt;/li&gt;
&lt;li&gt;Time-based Versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an Upgrade Guide&lt;/li&gt;
&lt;li&gt;Add parameter compatibly （and fail loudly!）&lt;ul&gt;
&lt;li&gt;Add default value for new added parameter that preserve old behavior&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;*&lt;/code&gt; &amp;lt;- all parameters after it can only be passed by name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Changing Behavior without Changing API&lt;ol&gt;
&lt;li&gt;Add a flag&lt;ul&gt;
&lt;li&gt;default False but warn if it's False&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Phrase 2. Change default to True, deprecate flag&lt;/li&gt;
&lt;li&gt;Phrase 3. Remove flag&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="PyCon US 2019"></category><category term="api"></category></entry><entry><title>Break the Cycle: Three excellent Python tools to automate repetitive tasks</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Thea Flowers&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;goal&lt;ul&gt;
&lt;li&gt;reduce toil (redundant boring stuff)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;for automating python package testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nox.thea.codes"&gt;nox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;flexible test automation&lt;/li&gt;
&lt;li&gt;the configuration file is python &lt;code&gt;noxfile.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pyinvoke.org"&gt;invoke&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;task execution tool&lt;/li&gt;
&lt;li&gt;a tool framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;invoke example&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print all the …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Thea Flowers&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;goal&lt;ul&gt;
&lt;li&gt;reduce toil (redundant boring stuff)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;for automating python package testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nox.thea.codes"&gt;nox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;flexible test automation&lt;/li&gt;
&lt;li&gt;the configuration file is python &lt;code&gt;noxfile.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pyinvoke.org"&gt;invoke&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;task execution tool&lt;/li&gt;
&lt;li&gt;a tool framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;invoke example&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print all the authors in this project&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;git log --pretty=format:&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%a&lt;/span&gt;&lt;span class="s2"&gt;n &amp;lt;&lt;/span&gt;&lt;span class="si"&gt;%a&lt;/span&gt;&lt;span class="s2"&gt;e&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;hide&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;changelog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;since&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print the changelog since given git ref&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git log &lt;/span&gt;&lt;span class="si"&gt;{since}&lt;/span&gt;&lt;span class="s2"&gt;..HEAD --format=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;hide&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Changelog sine &lt;/span&gt;&lt;span class="si"&gt;{since}&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;- &lt;/span&gt;&lt;span class="si"&gt;{change}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="PyCon US 2019"></category><category term="automation"></category></entry><entry><title>Escape from auto-manual testing with Hypothesis!</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/zac-hatfield-dodds-escape-from-auto-manual-testing-with-hypothesis"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="property-based-testing"&gt;Property-based testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;ul&gt;
&lt;li&gt;Describes valid input&lt;/li&gt;
&lt;li&gt;Writes tests that passes for any valid input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strategies-and-tactics"&gt;Strategies and Tactics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;strategies (&lt;code&gt;st&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;values&lt;/li&gt;
&lt;li&gt;collections&lt;/li&gt;
&lt;li&gt;map and filter methods&lt;/li&gt;
&lt;li&gt;complicated data&lt;ul&gt;
&lt;li&gt;recursive strategies&lt;/li&gt;
&lt;li&gt;combine strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;builds()&lt;/code&gt;: custom object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inferring strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypothesis.extra&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;st.data()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tactics: what do …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/zac-hatfield-dodds-escape-from-auto-manual-testing-with-hypothesis"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="property-based-testing"&gt;Property-based testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;ul&gt;
&lt;li&gt;Describes valid input&lt;/li&gt;
&lt;li&gt;Writes tests that passes for any valid input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strategies-and-tactics"&gt;Strategies and Tactics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;strategies (&lt;code&gt;st&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;values&lt;/li&gt;
&lt;li&gt;collections&lt;/li&gt;
&lt;li&gt;map and filter methods&lt;/li&gt;
&lt;li&gt;complicated data&lt;ul&gt;
&lt;li&gt;recursive strategies&lt;/li&gt;
&lt;li&gt;combine strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;builds()&lt;/code&gt;: custom object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inferring strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypothesis.extra&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;st.data()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tactics: what do we tests?&lt;ul&gt;
&lt;li&gt;auto-manual testing: &lt;code&gt;output == expected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;oracle tests (full specification)&lt;/li&gt;
&lt;li&gt;partial specification&lt;/li&gt;
&lt;li&gt;"Does not crash"&lt;ul&gt;
&lt;li&gt;Just call your function with valid input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Round trip&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;json.dumps&lt;/code&gt; / &lt;code&gt;json.loads&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metamorphic Relation&lt;ul&gt;
&lt;li&gt;Although we don't know the relation between input and output, we might know how output should change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stateful Testing&lt;ul&gt;
&lt;li&gt;(N)DFA&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RuleBasedStateMachine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observability"&gt;Observability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--hypothesis-show-statistics&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;timing stats&lt;/li&gt;
&lt;li&gt;perf breakdown&lt;/li&gt;
&lt;li&gt;exit reasons&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;note()&lt;/code&gt; if you like print-debugging&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="test"></category></entry><entry><title>Getting Started Testing in Data Science</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jes Ford&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0ysyWk-ox-8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jesford/testing-in-data-science/blob/master/intro-to-testing-presentation.ipynb"&gt;slide-origin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/jes-ford-getting-started-testing-in-data-science"&gt;slide-flatten&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Science Workflows&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One-off analysis&lt;/li&gt;
&lt;li&gt;Exploratory&lt;/li&gt;
&lt;li&gt;Well defined problem&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Science Domain Problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with Pandas DataFrames&lt;ul&gt;
&lt;li&gt;Pandas built-in testing methods&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from pandas.util.testing import assert_frame_equal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_like&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_dtype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Working with DB&lt;ul&gt;
&lt;li&gt;mock data that should be get from database and test …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jes Ford&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0ysyWk-ox-8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jesford/testing-in-data-science/blob/master/intro-to-testing-presentation.ipynb"&gt;slide-origin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/jes-ford-getting-started-testing-in-data-science"&gt;slide-flatten&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Science Workflows&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One-off analysis&lt;/li&gt;
&lt;li&gt;Exploratory&lt;/li&gt;
&lt;li&gt;Well defined problem&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Science Domain Problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with Pandas DataFrames&lt;ul&gt;
&lt;li&gt;Pandas built-in testing methods&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from pandas.util.testing import assert_frame_equal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_like&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_dtype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Working with DB&lt;ul&gt;
&lt;li&gt;mock data that should be get from database and test only behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generating Dataframe for Testing&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hypothesis&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="data"></category></entry><entry><title>Practical decorators</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/practical-decorators" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/practical-decorators</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Reuven M. Lerner&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MjHpMCIvwsY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;usage examples&lt;ul&gt;
&lt;li&gt;timing&lt;/li&gt;
&lt;li&gt;limited call (e.g., function can be called once per minute)&lt;/li&gt;
&lt;li&gt;memoization (i.e. caching)&lt;/li&gt;
&lt;li&gt;add class attribute (e.g., better &lt;code&gt;__repr__&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="api"></category></entry><entry><title>Scraping a Million Pokemon Battles: Distributed Systems By Example</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Duy Nguyen&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QvZqttX9uXc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/14v2huYsC5rJYUR3sWBXu0YN33b6tWRFraEgf9FwRPiE/edit#slide=id.g56f736b0fc_1_545"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scalability and 3 "Pillars"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concurrency of Resources&lt;/li&gt;
&lt;li&gt;Asserting for Correctness&lt;/li&gt;
&lt;li&gt;Resilience against Failures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New Problems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loss of determinism&lt;/li&gt;
&lt;li&gt;Long startup times (e.g., initialize message queue)&lt;/li&gt;
&lt;li&gt;Increases flakiness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correctness&lt;br&gt;
&lt;img alt="Correctness" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353098656.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resilience&lt;br&gt;
&lt;img alt="Resilience" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353190256.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="core"></category></entry><entry><title>Solve Your Problem With Sloppy Python</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/solve-your-problem-with-sloppy-python" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-au-2018/2019/08/solve-your-problem-with-sloppy-python</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Larry Hastings&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Jd8ulMb6_ls&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="personal-description"&gt;Personal Description&lt;/h3&gt;
&lt;p&gt;It's an introduction for how to use python as the shell script&lt;/p&gt;
&lt;h3 id="the-rules"&gt;The rules&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;fail early and noisily&lt;/li&gt;
&lt;li&gt;stop writing the shell script&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-guidelines"&gt;The guidelines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;try automating even more&lt;/li&gt;
&lt;li&gt;try new libraries/technologies&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon AU 2018"></category><category term="automation"></category></entry><entry><title>The Zen of Python Teams</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Adrienne Lowe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leadingwithspoons.com"&gt;Leading with Spoons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/adriennefriend"&gt;adriennefriend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WZ8FEB4J8-c"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beautiful is better than ugly.&lt;ul&gt;
&lt;li&gt;Be kind&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr="&gt;Accelerate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit is better than implicit&lt;ul&gt;
&lt;li&gt;Documenting process makes it easier for others to join you.&lt;ul&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;li&gt;onboard guide&lt;/li&gt;
&lt;li&gt;how to contribute&lt;/li&gt;
&lt;li&gt;where to get help&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep your conversation about work in public …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Adrienne Lowe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leadingwithspoons.com"&gt;Leading with Spoons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/adriennefriend"&gt;adriennefriend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WZ8FEB4J8-c"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beautiful is better than ugly.&lt;ul&gt;
&lt;li&gt;Be kind&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr="&gt;Accelerate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit is better than implicit&lt;ul&gt;
&lt;li&gt;Documenting process makes it easier for others to join you.&lt;ul&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;li&gt;onboard guide&lt;/li&gt;
&lt;li&gt;how to contribute&lt;/li&gt;
&lt;li&gt;where to get help&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep your conversation about work in public&lt;/li&gt;
&lt;li&gt;Document your peoeple&lt;ul&gt;
&lt;li&gt;I enjoy working on ...&lt;/li&gt;
&lt;li&gt;I get excited by ...&lt;/li&gt;
&lt;li&gt;I struggle when ...&lt;/li&gt;
&lt;li&gt;I feel appreciated when ...&lt;/li&gt;
&lt;li&gt;Ask me for help with ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple is better than complex.&lt;ul&gt;
&lt;li&gt;Build meaningful relationships with small interactions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error should never pass silently&lt;ul&gt;
&lt;li&gt;With humans, we have to rely on other humans to tell us when we broke them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/li&gt;
&lt;li&gt;Now is better than never.&lt;ul&gt;
&lt;li&gt;Doing and being wrong is a lot better than not doing at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="team"></category></entry><entry><title>Time to take out the rubbish: garbage collector</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CLW5Lyc1FN8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We do not use &lt;code&gt;__del__()&lt;/code&gt; to clean up. Use &lt;code&gt;with&lt;/code&gt; instead&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2019"></category><category term="core"></category></entry><entry><title>Watch out for Safety Bandits!</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Tennessee Leeuwenburg&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://2018.pycon-au.org/talks/43518-watch-out-for-safety-bandits/"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The "Essential Two" security problems&lt;ol&gt;
&lt;li&gt;Problems someone else made&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt;: Dependency Checking&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;pip install insecure-package&lt;/code&gt; to try it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Problems you made&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt;: Static Analysis (e.g., rule-based syntax / style)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon AU 2018"></category><category term="security"></category></entry><entry><title>Why you should care about types: How Python typing helped my team scale</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/why-you-should-care-about-types" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-au-2018/2019/08/why-you-should-care-about-types</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Luka Sterbic&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://2018.pycon-au.org/talks/45224-why-you-should-care-about-types-how-python-typing-helped-my-team-scale/"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="are-python-types-pythonic"&gt;Are Python types Pythonic?&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Explicit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;implicit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Readability&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;ambiguity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refuse&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;temptation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If nothing else, because Guido said so 😆&lt;/p&gt;
&lt;h3 id="type-101"&gt;Type 101&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Collection, Union, Optional, Type&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Luka Sterbic&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://2018.pycon-au.org/talks/45224-why-you-should-care-about-types-how-python-typing-helped-my-team-scale/"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="are-python-types-pythonic"&gt;Are Python types Pythonic?&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Explicit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;implicit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Readability&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;ambiguity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refuse&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;temptation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If nothing else, because Guido said so 😆&lt;/p&gt;
&lt;h3 id="type-101"&gt;Type 101&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Collection, Union, Optional, Type&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DerivedClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;claszz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="tool"&gt;Tool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Instagram/MonkeyType"&gt;GitHub - Instagram/MonkeyType: A system for Python that generates static type annotations by collecting runtime types&lt;/a&gt;&lt;/p&gt;</content><category term="PyCon AU 2018"></category><category term="type annotation"></category></entry></feed>