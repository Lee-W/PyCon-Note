<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note - PyCon US 2020</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/pycon-us-2020.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2020-06-03T11:00:00+08:00</updated><entry><title>Building Docs like Code: Continuous Integration for Documentation</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/06/building-docs-like-code-continuous-integration-for-documentation" rel="alternate"></link><published>2020-06-03T11:00:00+08:00</published><updated>2020-06-03T11:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-06-03:/pycon-note/posts/pycon-us-2020/2020/06/building-docs-like-code-continuous-integration-for-documentation</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Mason Egger&lt;/p&gt;
&lt;h2 id="materials"&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4SwdVMKhbn4&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://masonegger.com/speaking/ci-docs/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Types of docs&lt;ul&gt;
&lt;li&gt;Long form documentation: User Guides, Getting Started, FAQs, etc.&lt;/li&gt;
&lt;li&gt;Functional documentation: RESTful APIs, SDKs, man pages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;Static site generators&lt;/li&gt;
&lt;li&gt;Source code based documentation generators&lt;ul&gt;
&lt;li&gt;e.g., pydoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System documentation generator&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rtomayko.github.io/ronn/ronn.1"&gt;ronn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mkdocs.org/"&gt;Mkdocs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Markdown based documentation&lt;/li&gt;
&lt;li&gt;yaml based config file …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Mason Egger&lt;/p&gt;
&lt;h2 id="materials"&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4SwdVMKhbn4&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://masonegger.com/speaking/ci-docs/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Types of docs&lt;ul&gt;
&lt;li&gt;Long form documentation: User Guides, Getting Started, FAQs, etc.&lt;/li&gt;
&lt;li&gt;Functional documentation: RESTful APIs, SDKs, man pages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;Static site generators&lt;/li&gt;
&lt;li&gt;Source code based documentation generators&lt;ul&gt;
&lt;li&gt;e.g., pydoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System documentation generator&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rtomayko.github.io/ronn/ronn.1"&gt;ronn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mkdocs.org/"&gt;Mkdocs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Markdown based documentation&lt;/li&gt;
&lt;li&gt;yaml based config file&lt;/li&gt;
&lt;li&gt;Python based → Easy to extend&lt;/li&gt;
&lt;li&gt;Extension&lt;ul&gt;
&lt;li&gt;UML&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;reStructured Text based documentation with support for Markdown&lt;/li&gt;
&lt;li&gt;Most common tool for creating SDK from in-code documentatoin&lt;/li&gt;
&lt;li&gt;Documentation Testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2020"></category><category term="documentation"></category></entry><entry><title>Multiply your Testing Effectiveness with Parameterized Testing</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/multiply-your-testing-effectiveness-with-parameterized-testing" rel="alternate"></link><published>2020-05-26T10:45:00+08:00</published><updated>2020-05-26T10:45:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-05-26:/pycon-note/posts/pycon-us-2020/2020/05/multiply-your-testing-effectiveness-with-parameterized-testing</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Brian K Okken&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2R1HELARjUk&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/okken/talks/blob/master/2020/pycon_2020/"&gt;repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;metafunc&lt;ul&gt;
&lt;li&gt;pytest_generate_tests&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/latest/parametrize.html#basic-pytest-generate-tests-example"&gt;Basic pytest_generate_tests example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;indirect parameter&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/latest/example/parametrize.html#apply-indirect-on-particular-arguments"&gt;Apply indirect on particular arguments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2020"></category><category term="test"></category></entry><entry><title>Goodbye Print, Hello Debugger!</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/goodbye-print-hello-debugger" rel="alternate"></link><published>2020-05-20T09:50:00+08:00</published><updated>2020-05-20T09:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-05-20:/pycon-note/posts/pycon-us-2020/2020/05/goodbye-print-hello-debugger</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zakharenko&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5AYIe-3cD-s&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/nnja/pycon-2020-goodbye-print-hello-debugger"&gt;post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cli debuggers&lt;ul&gt;
&lt;li&gt;pdb&lt;/li&gt;
&lt;li&gt;ipdb&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export PYTHONBREAKPOINT=ipdb.set_trace&lt;/code&gt; (after Python 3.7)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5 most important commands&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;l&lt;/strong&gt;[ist]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n&lt;/strong&gt;[ext]: next line&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;[tep]: into&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c&lt;/strong&gt;[ontinue]: util next breakpoint&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;h&lt;/strong&gt;[help]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tip and Tricks&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.pdbrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gotcha&lt;ul&gt;
&lt;li&gt;Don't use breakpoints in production code …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Nina Zakharenko&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5AYIe-3cD-s&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/nnja/pycon-2020-goodbye-print-hello-debugger"&gt;post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cli debuggers&lt;ul&gt;
&lt;li&gt;pdb&lt;/li&gt;
&lt;li&gt;ipdb&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export PYTHONBREAKPOINT=ipdb.set_trace&lt;/code&gt; (after Python 3.7)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5 most important commands&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;l&lt;/strong&gt;[ist]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n&lt;/strong&gt;[ext]: next line&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;[tep]: into&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c&lt;/strong&gt;[ontinue]: util next breakpoint&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;h&lt;/strong&gt;[help]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tip and Tricks&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.pdbrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gotcha&lt;ul&gt;
&lt;li&gt;Don't use breakpoints in production code&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;debug-statements&lt;/code&gt; from &lt;a href="https://github.com/pre-commit/pre-commit-hooks"&gt;pre-commit-hooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2020"></category><category term="debugger"></category></entry><entry><title>Docker and Python: making them play nicely and securely for Data Science and ML</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/docker-and-python-making-them-play-nicely-and-securely-for-data-science-and-ml" rel="alternate"></link><published>2020-05-15T16:00:00+08:00</published><updated>2020-05-15T16:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-05-15:/pycon-note/posts/pycon-us-2020/2020/05/docker-and-python-making-them-play-nicely-and-securely-for-data-science-and-ml</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Tania Allard&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Jq68axbKIbg&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/trallard/docker-and-python-making-them-play-nicely-and-securely-for-data-science-and-machine-learning"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;common pain points in DS and ML&lt;ul&gt;
&lt;li&gt;complex setup / deps&lt;/li&gt;
&lt;li&gt;reliance on data / database&lt;/li&gt;
&lt;li&gt;fast evolving projects&lt;/li&gt;
&lt;li&gt;are containers secure enough?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;how is it different from web apps?&lt;/li&gt;
&lt;li&gt;not every deliverable is an app or a model&lt;/li&gt;
&lt;li&gt;relies on data&lt;/li&gt;
&lt;li&gt;Mixture of wheels …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Tania Allard&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Jq68axbKIbg&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/trallard/docker-and-python-making-them-play-nicely-and-securely-for-data-science-and-machine-learning"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;common pain points in DS and ML&lt;ul&gt;
&lt;li&gt;complex setup / deps&lt;/li&gt;
&lt;li&gt;reliance on data / database&lt;/li&gt;
&lt;li&gt;fast evolving projects&lt;/li&gt;
&lt;li&gt;are containers secure enough?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;how is it different from web apps?&lt;/li&gt;
&lt;li&gt;not every deliverable is an app or a model&lt;/li&gt;
&lt;li&gt;relies on data&lt;/li&gt;
&lt;li&gt;Mixture of wheels and compiled packages&lt;/li&gt;
&lt;li&gt;Security access levels - for data and software&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mixture of stakeholders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data scientists&lt;/li&gt;
&lt;li&gt;software engineers&lt;/li&gt;
&lt;li&gt;ML engineers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;best practices&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Split complex &lt;code&gt;RUN&lt;/code&gt; statements and sort them&lt;/li&gt;
&lt;li&gt;Prefer &lt;code&gt;COPY&lt;/code&gt; to add files&lt;/li&gt;
&lt;li&gt;install only necessary packages&lt;/li&gt;
&lt;li&gt;explicitly ignore files&lt;ul&gt;
&lt;li&gt;documentations&lt;/li&gt;
&lt;li&gt;never add data&lt;/li&gt;
&lt;li&gt;secrets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cookiecutter template&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/docker-science/cookiecutter-docker-science"&gt;docker-science/cookiecutter-docker-science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="top-tips"&gt;Top Tips&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Rebuild your images frequently - get security updates for system packages&lt;/li&gt;
&lt;li&gt;Never work as root / minimize the privileges&lt;ul&gt;
&lt;li&gt;run as non-root user&lt;/li&gt;
&lt;li&gt;minimize capability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You do not want to use Alpine Linux (go for buster, stretch or the Jupyter stack)&lt;/li&gt;
&lt;li&gt;pin / version EVERYTHING (use pip-tools, conda, poetry or pipenv)&lt;/li&gt;
&lt;li&gt;Leverage build cache&lt;/li&gt;
&lt;li&gt;Use one Dockerfile per project&lt;/li&gt;
&lt;li&gt;Use multi-stage builds&lt;ul&gt;
&lt;li&gt;fetch and manage secrets in an intermediate layer&lt;/li&gt;
&lt;li&gt;creates smaller image&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make your images identifiable (test, production, R&amp;amp;D) - also be careful when accessing databases and using ENV variables / build variables&lt;ul&gt;
&lt;li&gt;Provide context with &lt;code&gt;LABELS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do not reinvent the wheel! Use repo2docker&lt;/li&gt;
&lt;li&gt;Automate - no need to build and push manually&lt;/li&gt;
&lt;li&gt;Use a linter&lt;/li&gt;
&lt;/ol&gt;</content><category term="PyCon US 2020"></category><category term="data"></category><category term="container"></category></entry><entry><title>Static Typing in Python</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/static-typing-in-python" rel="alternate"></link><published>2020-05-06T12:55:00+08:00</published><updated>2020-05-06T12:55:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-05-06:/pycon-note/posts/pycon-us-2020/2020/05/static-typing-in-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dustin Ingram&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ST33zDM9vOE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="peps"&gt;PEPs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;PEP 3107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0483/"&gt;PEP 483&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="types"&gt;Types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gradual typing&lt;ul&gt;
&lt;li&gt;not do it all at once&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Special type consturcts&lt;ul&gt;
&lt;li&gt;Existing types&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;NoneType&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New types: (&lt;code&gt;from typing import ...&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Union[t1, t2, ...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optional[t1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tuple[t1, t2, ...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Callable[[t1, t2 …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dustin Ingram&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ST33zDM9vOE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="peps"&gt;PEPs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;PEP 3107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0483/"&gt;PEP 483&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="types"&gt;Types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gradual typing&lt;ul&gt;
&lt;li&gt;not do it all at once&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Special type consturcts&lt;ul&gt;
&lt;li&gt;Existing types&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;NoneType&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New types: (&lt;code&gt;from typing import ...&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Union[t1, t2, ...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optional[t1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tuple[t1, t2, ...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Callable[[t1, t2, ...], tr]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Container types&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;List[int]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic types&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;from typing import Iterable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type aliases&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;Number = Union[int, float, complex, Decimal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="when-you-shouldnt-use-static-typing"&gt;When you shouldn't use static typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;basically never&lt;/li&gt;
&lt;li&gt;not a replacement for unit tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="when-you-should-use-static-typing"&gt;When you should use static typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;basically always&lt;/li&gt;
&lt;li&gt;especially&lt;ul&gt;
&lt;li&gt;if your project is for public consumption&lt;/li&gt;
&lt;li&gt;before migrating or refactoring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="when-you-will-migrate" src="https://lee-w.github.io/pycon-note/images/post-images/static-typing-in-python/when-you-will-migrate.jpg"&gt;&lt;/p&gt;
&lt;h3 id="how"&gt;How&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Migrate to Python &amp;gt;= 3.6 [Optional]&lt;/li&gt;
&lt;li&gt;Install a typechecker locally&lt;/li&gt;
&lt;li&gt;Start optionally typing your codebase&lt;/li&gt;
&lt;li&gt;Run a typecheker with your linting and CI&lt;/li&gt;
&lt;li&gt;Convince all your coworkers to join you&lt;/li&gt;
&lt;/ol&gt;</content><category term="PyCon US 2020"></category><category term="typing"></category></entry><entry><title>What is deployment, anyway?</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/what-is-deployment-anyway" rel="alternate"></link><published>2020-05-06T11:23:00+08:00</published><updated>2020-05-06T11:23:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-05-06:/pycon-note/posts/pycon-us-2020/2020/05/what-is-deployment-anyway</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Katie McLaughlin&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8vstov3Y7uE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What is django deployment anyway?&lt;ol&gt;
&lt;li&gt;copy code to host&lt;/li&gt;
&lt;li&gt;update database, if needed&lt;/li&gt;
&lt;li&gt;update static, if needed&lt;/li&gt;
&lt;li&gt;start web server&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1-run-django"&gt;1. Run Django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Host&lt;ul&gt;
&lt;li&gt;Platform as a Service&lt;ul&gt;
&lt;li&gt;your responsibility: django app, data&lt;/li&gt;
&lt;li&gt;managed for you: web server, os, hardware, storage, networking&lt;/li&gt;
&lt;li&gt;e.g …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Katie McLaughlin&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8vstov3Y7uE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What is django deployment anyway?&lt;ol&gt;
&lt;li&gt;copy code to host&lt;/li&gt;
&lt;li&gt;update database, if needed&lt;/li&gt;
&lt;li&gt;update static, if needed&lt;/li&gt;
&lt;li&gt;start web server&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1-run-django"&gt;1. Run Django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Host&lt;ul&gt;
&lt;li&gt;Platform as a Service&lt;ul&gt;
&lt;li&gt;your responsibility: django app, data&lt;/li&gt;
&lt;li&gt;managed for you: web server, os, hardware, storage, networking&lt;/li&gt;
&lt;li&gt;e.g., Heroku&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Infrastructure as a Service&lt;ul&gt;
&lt;li&gt;your responsibility: django app, data, web server os&lt;/li&gt;
&lt;li&gt;managed for you: hardware, storage, networking&lt;/li&gt;
&lt;li&gt;e.g., AWS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-connect-to-a-database"&gt;2. Connect to a database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No opinion?&lt;ul&gt;
&lt;li&gt;Use postgres&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Database hosting&lt;ul&gt;
&lt;li&gt;DBaaS&lt;ul&gt;
&lt;li&gt;your responsibility:&lt;/li&gt;
&lt;li&gt;django's responsibility: migrations&lt;/li&gt;
&lt;li&gt;managed for you: storage, backups, persistence, maintenance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-serve-static-file"&gt;3. Serve static file&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;simple assets&lt;/li&gt;
&lt;li&gt;cloud storage&lt;ul&gt;
&lt;li&gt;&lt;a href="https://django-storages.readthedocs.io/en/latest/"&gt;django-storages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;media uploads&lt;/li&gt;
&lt;li&gt;asset compilation&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2020"></category><category term="deployment"></category></entry><entry><title>Beautiful Python Refactoring</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/04/beautiful-python-refactoring" rel="alternate"></link><published>2020-04-24T18:21:00+08:00</published><updated>2020-04-24T18:21:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-04-24:/pycon-note/posts/pycon-us-2020/2020/04/beautiful-python-refactoring</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Conor Hoekstra&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=W-lZttZhsUY&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/codereport/Talks/blob/master/2020-04-PyCon/BeautifulPythonRefactoring/BeautifulPythonRefactoring.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/codereport/Talks/tree/master/2020-04-PyCon/BeautifulPythonRefactoring"&gt;code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Just follow the refactor process in the video&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2020"></category><category term="refactor"></category></entry><entry><title>Snakes in a case: Packaging Python apps for distribution</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/04/snakes-in-a-case-packaging-python-apps-for-distribution" rel="alternate"></link><published>2020-04-24T17:02:00+08:00</published><updated>2020-04-24T17:02:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-04-24:/pycon-note/posts/pycon-us-2020/2020/04/snakes-in-a-case-packaging-python-apps-for-distribution</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Russell Keith-Magee&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WjMDXDHBn1I&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase"&gt;Breifcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What it is?&lt;ul&gt;
&lt;li&gt;PEP518 compliant build tool&lt;/li&gt;
&lt;li&gt;multiple platform support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What it isn't&lt;ul&gt;
&lt;li&gt;Dependent on the rest of beeware suite&lt;/li&gt;
&lt;li&gt;A solution for cli tool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How?&lt;ul&gt;
&lt;li&gt;ship a full independent Python interpreter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What's the different?&lt;ul&gt;
&lt;li&gt;Doesn't try to be clever&lt;ul&gt;
&lt;li&gt;PyInstallers try to …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Russell Keith-Magee&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WjMDXDHBn1I&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase"&gt;Breifcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What it is?&lt;ul&gt;
&lt;li&gt;PEP518 compliant build tool&lt;/li&gt;
&lt;li&gt;multiple platform support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What it isn't&lt;ul&gt;
&lt;li&gt;Dependent on the rest of beeware suite&lt;/li&gt;
&lt;li&gt;A solution for cli tool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How?&lt;ul&gt;
&lt;li&gt;ship a full independent Python interpreter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What's the different?&lt;ul&gt;
&lt;li&gt;Doesn't try to be clever&lt;ul&gt;
&lt;li&gt;PyInstallers try to make Python something it isn't&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Crossplatform&lt;/li&gt;
&lt;li&gt;supports iOS and Android&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What's bad&lt;ul&gt;
&lt;li&gt;Some platform support could be improved&lt;/li&gt;
&lt;li&gt;Support packages are large&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;support_package&lt;/code&gt; to specify custom support package&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2020"></category><category term="packaging"></category></entry></feed>