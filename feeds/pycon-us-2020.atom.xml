<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note - PyCon US 2020</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/pycon-us-2020.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2020-05-06T12:55:00+08:00</updated><entry><title>Static Typing in Python</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/static-typing-in-python" rel="alternate"></link><published>2020-05-06T12:55:00+08:00</published><updated>2020-05-06T12:55:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-05-06:/pycon-note/posts/pycon-us-2020/2020/05/static-typing-in-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dustin Ingram&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ST33zDM9vOE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="peps"&gt;PEPs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;PEP 3107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0483/"&gt;PEP 483&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="types"&gt;Types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gradual typing&lt;ul&gt;
&lt;li&gt;not do it all at once&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Special type consturcts&lt;ul&gt;
&lt;li&gt;Existing types&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;NoneType&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New types: (&lt;code&gt;from typing import ...&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Union[t1, t2, ...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optional[t1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tuple[t1, t2, ...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Callable[[t1, t2 …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dustin Ingram&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ST33zDM9vOE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="peps"&gt;PEPs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;PEP 3107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0483/"&gt;PEP 483&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="types"&gt;Types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gradual typing&lt;ul&gt;
&lt;li&gt;not do it all at once&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Special type consturcts&lt;ul&gt;
&lt;li&gt;Existing types&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;NoneType&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New types: (&lt;code&gt;from typing import ...&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Union[t1, t2, ...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optional[t1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tuple[t1, t2, ...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Callable[[t1, t2, ...], tr]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Container types&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;List[int]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic types&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;from typing import Iterable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type aliases&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;Number = Union[int, float, complex, Decimal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="when-you-shouldnt-use-static-typing"&gt;When you shouldn't use static typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;basically never&lt;/li&gt;
&lt;li&gt;not a replacement for unit tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="when-you-should-use-static-typing"&gt;When you should use static typing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;basically always&lt;/li&gt;
&lt;li&gt;especially&lt;ul&gt;
&lt;li&gt;if your project is for public consumption&lt;/li&gt;
&lt;li&gt;before migrating or refactoring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="when-you-will-migrate" src="https://lee-w.github.io/pycon-note/images/post-images/static-typing-in-python/when-you-will-migrate.jpg"&gt;&lt;/p&gt;
&lt;h3 id="how"&gt;How&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Migrate to Python &amp;gt;= 3.6 [Optional]&lt;/li&gt;
&lt;li&gt;Install a typechecker locally&lt;/li&gt;
&lt;li&gt;Start optionally typing your codebase&lt;/li&gt;
&lt;li&gt;Run a typecheker with your linting and CI&lt;/li&gt;
&lt;li&gt;Convince all your coworkers to join you&lt;/li&gt;
&lt;/ol&gt;</content><category term="PyCon US 2020"></category><category term="typing"></category></entry><entry><title>What is deployment, anyway?</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/what-is-deployment-anyway" rel="alternate"></link><published>2020-05-06T11:23:00+08:00</published><updated>2020-05-06T11:23:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-05-06:/pycon-note/posts/pycon-us-2020/2020/05/what-is-deployment-anyway</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Katie McLaughlin&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8vstov3Y7uE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What is django deployment anyway?&lt;ol&gt;
&lt;li&gt;copy code to host&lt;/li&gt;
&lt;li&gt;update database, if needed&lt;/li&gt;
&lt;li&gt;update static, if needed&lt;/li&gt;
&lt;li&gt;start web server&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1-run-django"&gt;1. Run Django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Host&lt;ul&gt;
&lt;li&gt;Platform as a Service&lt;ul&gt;
&lt;li&gt;your responsibility: django app, data&lt;/li&gt;
&lt;li&gt;managed for you: web server, os, hardware, storage, networking&lt;/li&gt;
&lt;li&gt;e.g …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Katie McLaughlin&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8vstov3Y7uE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What is django deployment anyway?&lt;ol&gt;
&lt;li&gt;copy code to host&lt;/li&gt;
&lt;li&gt;update database, if needed&lt;/li&gt;
&lt;li&gt;update static, if needed&lt;/li&gt;
&lt;li&gt;start web server&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1-run-django"&gt;1. Run Django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Host&lt;ul&gt;
&lt;li&gt;Platform as a Service&lt;ul&gt;
&lt;li&gt;your responsibility: django app, data&lt;/li&gt;
&lt;li&gt;managed for you: web server, os, hardware, storage, networking&lt;/li&gt;
&lt;li&gt;e.g., Heroku&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Infrastructure as a Service&lt;ul&gt;
&lt;li&gt;your responsibility: django app, data, web server os&lt;/li&gt;
&lt;li&gt;managed for you: hardware, storage, networking&lt;/li&gt;
&lt;li&gt;e.g., AWS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-connect-to-a-database"&gt;2. Connect to a database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No opinion?&lt;ul&gt;
&lt;li&gt;Use postgres&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Database hosting&lt;ul&gt;
&lt;li&gt;DBaaS&lt;ul&gt;
&lt;li&gt;your responsibility:&lt;/li&gt;
&lt;li&gt;django's responsibility: migrations&lt;/li&gt;
&lt;li&gt;managed for you: storage, backups, persistence, maintenance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-serve-static-file"&gt;3. Serve static file&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;simple assets&lt;/li&gt;
&lt;li&gt;cloud storage&lt;ul&gt;
&lt;li&gt;&lt;a href="https://django-storages.readthedocs.io/en/latest/"&gt;django-storages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;media uploads&lt;/li&gt;
&lt;li&gt;asset compilation&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2020"></category><category term="deployment"></category></entry><entry><title>Beautiful Python Refactoring</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/04/beautiful-python-refactoring" rel="alternate"></link><published>2020-04-24T18:21:00+08:00</published><updated>2020-04-24T18:21:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-04-24:/pycon-note/posts/pycon-us-2020/2020/04/beautiful-python-refactoring</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Conor Hoekstra&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=W-lZttZhsUY&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/codereport/Talks/blob/master/2020-04-PyCon/BeautifulPythonRefactoring/BeautifulPythonRefactoring.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/codereport/Talks/tree/master/2020-04-PyCon/BeautifulPythonRefactoring"&gt;code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Just follow the refactor process in the video&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2020"></category><category term="refactor"></category></entry><entry><title>Snakes in a case: Packaging Python apps for distribution</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/04/snakes-in-a-case-packaging-python-apps-for-distribution" rel="alternate"></link><published>2020-04-24T17:02:00+08:00</published><updated>2020-04-24T17:02:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-04-24:/pycon-note/posts/pycon-us-2020/2020/04/snakes-in-a-case-packaging-python-apps-for-distribution</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Russell Keith-Magee&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WjMDXDHBn1I&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase"&gt;Breifcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What it is?&lt;ul&gt;
&lt;li&gt;PEP518 compliant build tool&lt;/li&gt;
&lt;li&gt;multiple platform support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What it isn't&lt;ul&gt;
&lt;li&gt;Dependent on the rest of beeware suite&lt;/li&gt;
&lt;li&gt;A solution for cli tool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How?&lt;ul&gt;
&lt;li&gt;ship a full independent Python interpreter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What's the different?&lt;ul&gt;
&lt;li&gt;Doesn't try to be clever&lt;ul&gt;
&lt;li&gt;PyInstallers try to …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Russell Keith-Magee&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WjMDXDHBn1I&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase"&gt;Breifcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What it is?&lt;ul&gt;
&lt;li&gt;PEP518 compliant build tool&lt;/li&gt;
&lt;li&gt;multiple platform support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What it isn't&lt;ul&gt;
&lt;li&gt;Dependent on the rest of beeware suite&lt;/li&gt;
&lt;li&gt;A solution for cli tool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How?&lt;ul&gt;
&lt;li&gt;ship a full independent Python interpreter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What's the different?&lt;ul&gt;
&lt;li&gt;Doesn't try to be clever&lt;ul&gt;
&lt;li&gt;PyInstallers try to make Python something it isn't&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Crossplatform&lt;/li&gt;
&lt;li&gt;supports iOS and Android&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What's bad&lt;ul&gt;
&lt;li&gt;Some platform support could be improved&lt;/li&gt;
&lt;li&gt;Support packages are large&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;support_package&lt;/code&gt; to specify custom support package&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon US 2020"></category><category term="packaging"></category></entry></feed>