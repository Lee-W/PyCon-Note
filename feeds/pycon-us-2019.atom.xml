<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note - PyCon US 2019</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/pycon-us-2019.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2019-11-07T11:48:00+08:00</updated><entry><title>From days to minutes, from minutes to milliseconds with SQLAlchemy</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/from-days-to-minutes-from-minutes-to-milliseconds-with-SQLAlchemy" rel="alternate"></link><published>2019-11-07T11:48:00+08:00</published><updated>2019-11-07T11:48:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/from-days-to-minutes-from-minutes-to-milliseconds-with-SQLAlchemy</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Leonardo Rochael Almeida&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kEShMV4VfWE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQLAlchemy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Expression Language (a Python DSL)&lt;/li&gt;
&lt;li&gt;Object Relational Mapper (ORM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ORM Trap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sensible Python Code → Bad SQL access patterns&lt;/li&gt;
&lt;li&gt;unnoticeable at low data volumes&lt;ul&gt;
&lt;li&gt;e.g., dev and early production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Fix: Let the DB do its job&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be aware of …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Leonardo Rochael Almeida&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kEShMV4VfWE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQLAlchemy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Expression Language (a Python DSL)&lt;/li&gt;
&lt;li&gt;Object Relational Mapper (ORM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ORM Trap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sensible Python Code → Bad SQL access patterns&lt;/li&gt;
&lt;li&gt;unnoticeable at low data volumes&lt;ul&gt;
&lt;li&gt;e.g., dev and early production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Fix: Let the DB do its job&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be aware of implicit queries&lt;ul&gt;
&lt;li&gt;especially from relationships&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Aim for O(1) queries per request/job/activity&lt;ul&gt;
&lt;li&gt;Avoid looping through model instances&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="database"></category><category term="efficiency"></category></entry><entry><title>Programmatic Notebooks with papermill</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/programmatic-notebooks-with-papermill" rel="alternate"></link><published>2019-11-07T11:45:00+08:00</published><updated>2019-11-07T11:45:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/programmatic-notebooks-with-papermill</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Matthew Seal&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vBEEL274sco"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1rliRPGdcPu_6Jk9gCHbq7B_HPbraH7exYFYDr-u76MM/edit#slide=id.g2b48bd7e95_0_4"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nteract/papermill"&gt;papermill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nteract/scrapbook"&gt;scrapbook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The bad side of Jupyter notebook&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lack of history&lt;/li&gt;
&lt;li&gt;Difficult to test&lt;/li&gt;
&lt;li&gt;Mutable document&lt;/li&gt;
&lt;li&gt;Hard to parameterize&lt;/li&gt;
&lt;li&gt;Live collaboration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="filling-the-gaps-papermill"&gt;Filling the Gaps - papermill&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Things to preserve&lt;ul&gt;
&lt;li&gt;results linked to code&lt;/li&gt;
&lt;li&gt;good visuals&lt;/li&gt;
&lt;li&gt;easy to share&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Things to improve&lt;ul&gt;
&lt;li&gt;not versioned&lt;/li&gt;
&lt;li&gt;mutable …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Matthew Seal&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vBEEL274sco"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1rliRPGdcPu_6Jk9gCHbq7B_HPbraH7exYFYDr-u76MM/edit#slide=id.g2b48bd7e95_0_4"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nteract/papermill"&gt;papermill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nteract/scrapbook"&gt;scrapbook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The bad side of Jupyter notebook&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lack of history&lt;/li&gt;
&lt;li&gt;Difficult to test&lt;/li&gt;
&lt;li&gt;Mutable document&lt;/li&gt;
&lt;li&gt;Hard to parameterize&lt;/li&gt;
&lt;li&gt;Live collaboration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="filling-the-gaps-papermill"&gt;Filling the Gaps - papermill&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Things to preserve&lt;ul&gt;
&lt;li&gt;results linked to code&lt;/li&gt;
&lt;li&gt;good visuals&lt;/li&gt;
&lt;li&gt;easy to share&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Things to improve&lt;ul&gt;
&lt;li&gt;not versioned&lt;/li&gt;
&lt;li&gt;mutable state&lt;/li&gt;
&lt;li&gt;templating&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-users-extensions"&gt;New Users &amp;amp; Extensions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Easy to extend&lt;ul&gt;
&lt;li&gt;They're all component&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="data"></category><category term="jupyter"></category></entry><entry><title>Everything at Once: Python's Many Concurrency Models</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/everything-at-once-python-s-many-concurrency-models" rel="alternate"></link><published>2019-11-07T11:41:00+08:00</published><updated>2019-11-07T11:41:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/everything-at-once-python-s-many-concurrency-models</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jess Shapiro&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=w2nKIGhXPAM"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;available options in Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asyncio&lt;/li&gt;
&lt;li&gt;Python threads&lt;/li&gt;
&lt;li&gt;GIL-released thread&lt;/li&gt;
&lt;li&gt;multiprocessing&lt;/li&gt;
&lt;li&gt;distributed tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parallelism&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do things actually happen simultaneously?&lt;/li&gt;
&lt;li&gt;How does performance scale when you add more CPUs?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;minimum schedulable unit&lt;ul&gt;
&lt;li&gt;How big are the code can be run independently?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;data sharing and isolation&lt;ul&gt;
&lt;li&gt;how …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jess Shapiro&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=w2nKIGhXPAM"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;available options in Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asyncio&lt;/li&gt;
&lt;li&gt;Python threads&lt;/li&gt;
&lt;li&gt;GIL-released thread&lt;/li&gt;
&lt;li&gt;multiprocessing&lt;/li&gt;
&lt;li&gt;distributed tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parallelism&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do things actually happen simultaneously?&lt;/li&gt;
&lt;li&gt;How does performance scale when you add more CPUs?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;minimum schedulable unit&lt;ul&gt;
&lt;li&gt;How big are the code can be run independently?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;data sharing and isolation&lt;ul&gt;
&lt;li&gt;how isolated is data between tasks?&lt;/li&gt;
&lt;li&gt;how long does data stay the same for?&lt;/li&gt;
&lt;li&gt;what tools can be used to share data?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asyncio"&gt;asyncio&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;one coroutine runs at a time&lt;ul&gt;
&lt;li&gt;event loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;global state is shared and consistent within each block&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="python-threads"&gt;Python threads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One thread runs (GIL)&lt;/li&gt;
&lt;li&gt;Global state is shared but consistent only for single bytecodes ops&lt;ul&gt;
&lt;li&gt;e.g,&lt;ul&gt;
&lt;li&gt;single bytecodes ops: &lt;code&gt;func(**kw)&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;non-single bytecodes ops: &lt;code&gt;x += 1&lt;/code&gt;, &lt;code&gt;dict,items()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;combined scheduling&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="gil-released-threads"&gt;GIL-released threads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;multiple threads run simultaneously&lt;/li&gt;
&lt;li&gt;Global state is shared but unreliable&lt;/li&gt;
&lt;li&gt;OS-scheduled&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="multiprocessing"&gt;multiprocessing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;multiple processes run simultaneously&lt;/li&gt;
&lt;li&gt;global state starts the same as parent, but evolves independently&lt;/li&gt;
&lt;li&gt;OS-scheduled&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="distributed-tasks"&gt;Distributed Tasks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiple tasks run simultaneously&lt;/li&gt;
&lt;li&gt;Global state totally independent&lt;/li&gt;
&lt;li&gt;Central orchestrator&lt;/li&gt;
&lt;/ul&gt;</content><category term="concurrency"></category></entry><entry><title>Does remote work really work?</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/does-remote-work-really-work" rel="alternate"></link><published>2019-11-07T11:35:00+08:00</published><updated>2019-11-07T11:35:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/does-remote-work-really-work</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Lauren Schaefer&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Lauren Schaefer"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/LaurenHaywardSchaefe/does-remote-work-really-work"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Think about a time you were fabulously productive.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Open offices spaces&lt;/code&gt;, &lt;code&gt;Working remotely&lt;/code&gt; and &lt;code&gt;Cubeland&lt;/code&gt; all can be &lt;strong&gt;THE WORST.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="why-do-you-want-to-work-remotely"&gt;Why do you want to work remotely?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unable to relocate&lt;/li&gt;
&lt;li&gt;lengthy commutes&lt;/li&gt;
&lt;li&gt;availability for children or aging parents&lt;/li&gt;
&lt;li&gt;distracting office environments&lt;/li&gt;
&lt;li&gt;travel the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Lauren Schaefer&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Lauren Schaefer"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/LaurenHaywardSchaefe/does-remote-work-really-work"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Think about a time you were fabulously productive.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Open offices spaces&lt;/code&gt;, &lt;code&gt;Working remotely&lt;/code&gt; and &lt;code&gt;Cubeland&lt;/code&gt; all can be &lt;strong&gt;THE WORST.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="why-do-you-want-to-work-remotely"&gt;Why do you want to work remotely?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unable to relocate&lt;/li&gt;
&lt;li&gt;lengthy commutes&lt;/li&gt;
&lt;li&gt;availability for children or aging parents&lt;/li&gt;
&lt;li&gt;distracting office environments&lt;/li&gt;
&lt;li&gt;travel the world&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="why-do-employers-offer-remote-job"&gt;Why do employers offer remote job?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;attract and retain top talent&lt;/li&gt;
&lt;li&gt;increate employee morale&lt;/li&gt;
&lt;li&gt;save money&lt;/li&gt;
&lt;li&gt;increase employee productivity&lt;ul&gt;
&lt;li&gt;Fewer sick days&lt;/li&gt;
&lt;li&gt;Shorter breaks&lt;/li&gt;
&lt;li&gt;Fewer distractions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="what-does-the-research-say"&gt;What does the research say?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The more experience you have, the more likely you can have a remote job.&lt;/li&gt;
&lt;li&gt;The down side&lt;ul&gt;
&lt;li&gt;professional isolation negatively impacts job performance&lt;/li&gt;
&lt;li&gt;having a remote manager may negatively impact you&lt;/li&gt;
&lt;li&gt;remote employees fear&lt;ul&gt;
&lt;li&gt;stalling careers&lt;/li&gt;
&lt;li&gt;isolation&lt;/li&gt;
&lt;li&gt;distractions&lt;/li&gt;
&lt;li&gt;blurred lines between work and home life&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;remote work encourages employees to "overwork and to allow their work to infringe on their family role"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-to-convince-your-boss-to-let-you-work-remotely"&gt;How to convince your boss to let you work remotely?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Propose an experiment&lt;ul&gt;
&lt;li&gt;But what about collaboration and water-cooler conversations?&lt;ul&gt;
&lt;li&gt;When all else fails, talk about the bottom line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-to-be-a-successful-remote-employee-important"&gt;How to be a successful remote employee (&lt;strong&gt;Important&lt;/strong&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Join the right team&lt;ul&gt;
&lt;li&gt;e.g., fully distributed team&lt;/li&gt;
&lt;li&gt;consider the communication styles&lt;/li&gt;
&lt;li&gt;schedule one-on-one for each member&lt;ul&gt;
&lt;li&gt;Show picture of yourself&lt;/li&gt;
&lt;li&gt;For becoming the real person&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be productive&lt;ul&gt;
&lt;li&gt;Set daily goal&lt;/li&gt;
&lt;li&gt;Create a work space suitable&lt;/li&gt;
&lt;li&gt;Don't work on your couch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Communicate with you team&lt;ul&gt;
&lt;li&gt;Make sure you're making thing person as you're in office&lt;/li&gt;
&lt;li&gt;Be a great PR agent for yourself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Travel&lt;ul&gt;
&lt;li&gt;Get out your home office&lt;/li&gt;
&lt;li&gt;Get a chance to meet a coworker in person&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actively prevent burnout&lt;ul&gt;
&lt;li&gt;Take a lunch break&lt;/li&gt;
&lt;li&gt;Stretch before meeting&lt;/li&gt;
&lt;li&gt;Turn off your computer after work&lt;ul&gt;
&lt;li&gt;Include notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="remote"></category><category term="job"></category></entry><entry><title>Life Is Better Painted Black, or: How to Stop Worrying and Embrace Auto-Formatting</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting" rel="alternate"></link><published>2019-11-07T10:51:00+08:00</published><updated>2019-11-07T10:51:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-11-07:/pycon-note/posts/pycon-us-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Łukasz Langa&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=esZLCuWs_2Y"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Problem Statement&lt;ul&gt;
&lt;li&gt;From Style Guide (PEP 8) to Code Style&lt;ul&gt;
&lt;li&gt;Sol 1: Linters&lt;ul&gt;
&lt;li&gt;It still has human labor involves.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sol 2: Auto-formatting&lt;ul&gt;
&lt;li&gt;Why people don't like auto-formatting? → too destructive&lt;/li&gt;
&lt;li&gt;What we can learn from Go Community? → &lt;code&gt;Uniformity Trumps Perfection&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The good enough uniform format …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Łukasz Langa&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=esZLCuWs_2Y"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Problem Statement&lt;ul&gt;
&lt;li&gt;From Style Guide (PEP 8) to Code Style&lt;ul&gt;
&lt;li&gt;Sol 1: Linters&lt;ul&gt;
&lt;li&gt;It still has human labor involves.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sol 2: Auto-formatting&lt;ul&gt;
&lt;li&gt;Why people don't like auto-formatting? → too destructive&lt;/li&gt;
&lt;li&gt;What we can learn from Go Community? → &lt;code&gt;Uniformity Trumps Perfection&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The good enough uniform format style is better than having a lot of different formatting that are locally better but is inconsistence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Auto-formatter in different languages&lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/gofmt/"&gt;gofmt&lt;/a&gt; for go&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; for javascript&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; for Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design and implementation&lt;ul&gt;
&lt;li&gt;Goal&lt;ul&gt;
&lt;li&gt;Opinionated&lt;/li&gt;
&lt;li&gt;Deterministic&lt;/li&gt;
&lt;li&gt;Consistent&lt;/li&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tips for adoption&lt;ul&gt;
&lt;li&gt;&lt;a href="https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/git-hyper-blame.html"&gt;git-hyper-blame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="code quality"></category><category term="automation"></category></entry><entry><title>Python Security Tool</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool" rel="alternate"></link><published>2019-10-26T11:10:00+08:00</published><updated>2019-10-26T11:10:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-10-26:/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Terri Oda&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=e7zzdl8OXCU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="detecting-known-vulnerability"&gt;Detecting Known Vulnerability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cve.mitre.org"&gt;CVE&lt;/a&gt;: database with known software vulerability&lt;/li&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Free db: update monthly&lt;/li&gt;
&lt;li&gt;Paid db: update realtime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Safety vs Pipenv: Which one is better?&lt;ul&gt;
&lt;li&gt;Neither! They use the same database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-quality"&gt;Code Quality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/search?client=firefox-b-d&amp;amp;q=pylint"&gt;pylint&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Security Value: Low&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Goal: find security issues …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Terri Oda&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=e7zzdl8OXCU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="detecting-known-vulnerability"&gt;Detecting Known Vulnerability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cve.mitre.org"&gt;CVE&lt;/a&gt;: database with known software vulerability&lt;/li&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Free db: update monthly&lt;/li&gt;
&lt;li&gt;Paid db: update realtime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Safety vs Pipenv: Which one is better?&lt;ul&gt;
&lt;li&gt;Neither! They use the same database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-quality"&gt;Code Quality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/search?client=firefox-b-d&amp;amp;q=pylint"&gt;pylint&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Security Value: Low&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Goal: find security issues&lt;/li&gt;
&lt;li&gt;Security Value: High&lt;/li&gt;
&lt;li&gt;Sometimes you don't want to fix all your Bandit warnings&lt;/li&gt;
&lt;li&gt;Use them as a way to focus code review instead&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-quality-some-anti-patterns"&gt;Code Quality - some anti-patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sans.org/top25-software-errors/"&gt;What Errors Are Included in the Top 25 Software Errors?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-these-tools"&gt;Use these tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;li&gt;During code review&lt;/li&gt;
&lt;li&gt;Before release&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="how-do-i-secure-python"&gt;How do I secure python?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Check for known vulnerabilities&lt;ul&gt;
&lt;li&gt;&lt;code&gt;safety check&lt;/code&gt; or &lt;code&gt;pipenv check&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for code quality&lt;ul&gt;
&lt;li&gt;pylint for basic linting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bandit&lt;/code&gt; for security linting&lt;/li&gt;
&lt;li&gt;other static analysis for more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review secure coding guidelines for python to improve code reviews&lt;/li&gt;
&lt;/ul&gt;</content><category term="security"></category></entry><entry><title>Ace Your Technical Interview Using Python</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/ace-your-technical-interview-using-python</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Erin Allard&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NltGUUi23zc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/100ZV3WoR4xMH489AdGLNF6zejuq9o7rU4pZa8-jPZTE/edit#slide=id.p"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Technical Interview Process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Recruiter phone screen&lt;/li&gt;
&lt;li&gt;Technical phone screen with an engineer&lt;/li&gt;
&lt;li&gt;Take-home assessment&lt;/li&gt;
&lt;li&gt;Onsite interviews'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-technical skill matters (a lot)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;problem solving&lt;/li&gt;
&lt;li&gt;ask good questions&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/good-questions/"&gt;How to Ask Good Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;understand assumption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code (obviously) matters&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;time complexity&lt;/li&gt;
&lt;li&gt;recursion&lt;ul&gt;
&lt;li&gt;base case&lt;/li&gt;
&lt;li&gt;progress …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Erin Allard&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NltGUUi23zc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/100ZV3WoR4xMH489AdGLNF6zejuq9o7rU4pZa8-jPZTE/edit#slide=id.p"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Technical Interview Process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Recruiter phone screen&lt;/li&gt;
&lt;li&gt;Technical phone screen with an engineer&lt;/li&gt;
&lt;li&gt;Take-home assessment&lt;/li&gt;
&lt;li&gt;Onsite interviews'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-technical skill matters (a lot)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;problem solving&lt;/li&gt;
&lt;li&gt;ask good questions&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/good-questions/"&gt;How to Ask Good Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;understand assumption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code (obviously) matters&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;time complexity&lt;/li&gt;
&lt;li&gt;recursion&lt;ul&gt;
&lt;li&gt;base case&lt;/li&gt;
&lt;li&gt;progress&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;object-oriented programming&lt;/li&gt;
&lt;li&gt;data structure &amp;amp; algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding challenges: quality over quantity&lt;/li&gt;
&lt;li&gt;Mindset is key&lt;ul&gt;
&lt;li&gt;Failure and rejection are part of the process&lt;/li&gt;
&lt;li&gt;You don't need every company to want to hire you&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="job"></category></entry><entry><title>API Evolution the Right Way</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/api-evolution-the-right-way</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;A. Jesse Jiryu Davis&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqDnB6jKzcE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emptysqua.re/blog/api-evolution-the-right-way/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Avoid Bad Features&lt;/li&gt;
&lt;li&gt;Minimize Features&lt;/li&gt;
&lt;li&gt;Keep Feature Narrow&lt;/li&gt;
&lt;li&gt;Mark Experimental Features "Provisional"&lt;/li&gt;
&lt;li&gt;Delete Feature Gently&lt;ul&gt;
&lt;li&gt;Deprecated warning&lt;/li&gt;
&lt;li&gt;Instructive error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maintain a Change Log&lt;/li&gt;
&lt;li&gt;Choose a Version Scheme&lt;ul&gt;
&lt;li&gt;Semantic Versioning&lt;/li&gt;
&lt;li&gt;Time-based Versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an Upgrade Guide&lt;/li&gt;
&lt;li&gt;Add parameter compatibly （and fail loudly …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;A. Jesse Jiryu Davis&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqDnB6jKzcE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emptysqua.re/blog/api-evolution-the-right-way/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Avoid Bad Features&lt;/li&gt;
&lt;li&gt;Minimize Features&lt;/li&gt;
&lt;li&gt;Keep Feature Narrow&lt;/li&gt;
&lt;li&gt;Mark Experimental Features "Provisional"&lt;/li&gt;
&lt;li&gt;Delete Feature Gently&lt;ul&gt;
&lt;li&gt;Deprecated warning&lt;/li&gt;
&lt;li&gt;Instructive error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maintain a Change Log&lt;/li&gt;
&lt;li&gt;Choose a Version Scheme&lt;ul&gt;
&lt;li&gt;Semantic Versioning&lt;/li&gt;
&lt;li&gt;Time-based Versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write an Upgrade Guide&lt;/li&gt;
&lt;li&gt;Add parameter compatibly （and fail loudly!）&lt;ul&gt;
&lt;li&gt;Add default value for new added parameter that preserve old behavior&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;*&lt;/code&gt; &amp;lt;- all parameters after it can only be passed by name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Changing Behavior without Changing API&lt;ol&gt;
&lt;li&gt;Add a flag&lt;ul&gt;
&lt;li&gt;default False but warn if it's False&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Phrase 2. Change default to True, deprecate flag&lt;/li&gt;
&lt;li&gt;Phrase 3. Remove flag&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="api"></category></entry><entry><title>Break the Cycle: Three excellent Python tools to automate repetitive tasks</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Thea Flowers&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;goal&lt;ul&gt;
&lt;li&gt;reduce toil (redundant boring stuff)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;for automating python package testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nox.thea.codes"&gt;nox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;flexible test automation&lt;/li&gt;
&lt;li&gt;the configuration file is python &lt;code&gt;noxfile.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pyinvoke.org"&gt;invoke&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;task execution tool&lt;/li&gt;
&lt;li&gt;a tool framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;invoke example&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print all the …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Thea Flowers&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;goal&lt;ul&gt;
&lt;li&gt;reduce toil (redundant boring stuff)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;for automating python package testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nox.thea.codes"&gt;nox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;flexible test automation&lt;/li&gt;
&lt;li&gt;the configuration file is python &lt;code&gt;noxfile.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pyinvoke.org"&gt;invoke&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;task execution tool&lt;/li&gt;
&lt;li&gt;a tool framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;invoke example&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print all the authors in this project&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;git log --pretty=format:&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;%an &amp;lt;%ae&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;hide&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;changelog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;since&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print the changelog since given git ref&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git log {since}..HEAD --format=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;hide&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Changelog sine {since}:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;- {change}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="automation"></category></entry><entry><title>Escape from auto-manual testing with Hypothesis!</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/zac-hatfield-dodds-escape-from-auto-manual-testing-with-hypothesis"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="property-based-testing"&gt;Property-based testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;ul&gt;
&lt;li&gt;Describes valid input&lt;/li&gt;
&lt;li&gt;Writes tests that passes for any valid input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strategies-and-tactics"&gt;Strategies and Tactics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;strategies (&lt;code&gt;st&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;values&lt;/li&gt;
&lt;li&gt;collections&lt;/li&gt;
&lt;li&gt;map and filter methods&lt;/li&gt;
&lt;li&gt;complicated data&lt;ul&gt;
&lt;li&gt;recursive strategies&lt;/li&gt;
&lt;li&gt;combine strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;builds()&lt;/code&gt;: custom object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inferring strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypothesis.extra&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;st.data()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tactics: what do …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/zac-hatfield-dodds-escape-from-auto-manual-testing-with-hypothesis"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="property-based-testing"&gt;Property-based testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;ul&gt;
&lt;li&gt;Describes valid input&lt;/li&gt;
&lt;li&gt;Writes tests that passes for any valid input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strategies-and-tactics"&gt;Strategies and Tactics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;strategies (&lt;code&gt;st&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;values&lt;/li&gt;
&lt;li&gt;collections&lt;/li&gt;
&lt;li&gt;map and filter methods&lt;/li&gt;
&lt;li&gt;complicated data&lt;ul&gt;
&lt;li&gt;recursive strategies&lt;/li&gt;
&lt;li&gt;combine strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;builds()&lt;/code&gt;: custom object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inferring strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypothesis.extra&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;st.data()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tactics: what do we tests?&lt;ul&gt;
&lt;li&gt;auto-manual testing: &lt;code&gt;output == expected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;oracle tests (full specification)&lt;/li&gt;
&lt;li&gt;partial specification&lt;/li&gt;
&lt;li&gt;"Does not crash"&lt;ul&gt;
&lt;li&gt;Just call your function with valid input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Round trip&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;json.dumps&lt;/code&gt; / &lt;code&gt;json.loads&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metamorphic Relation&lt;ul&gt;
&lt;li&gt;Although we don't know the relation between input and output, we might know how output should change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stateful Testing&lt;ul&gt;
&lt;li&gt;(N)DFA&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RuleBasedStateMachine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observability"&gt;Observability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--hypothesis-show-statistics&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;timing stats&lt;/li&gt;
&lt;li&gt;perf breakdown&lt;/li&gt;
&lt;li&gt;exit reasons&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;note()&lt;/code&gt; if you like print-debugging&lt;/li&gt;
&lt;/ul&gt;</content><category term="test"></category></entry><entry><title>Getting Started Testing in Data Science</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/getting-started-testing-in-data-science</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jes Ford&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0ysyWk-ox-8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jesford/testing-in-data-science/blob/master/intro-to-testing-presentation.ipynb"&gt;slide-origin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/jes-ford-getting-started-testing-in-data-science"&gt;slide-flatten&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Science Workflows&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One-off analysis&lt;/li&gt;
&lt;li&gt;Exploratory&lt;/li&gt;
&lt;li&gt;Well defined problem&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Science Domain Problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with Pandas DataFrames&lt;ul&gt;
&lt;li&gt;Pandas built-in testing methods&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from pandas.util.testing import assert_frame_equal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_like&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_dtype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Working with DB&lt;ul&gt;
&lt;li&gt;mock data that should be get from database and test …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jes Ford&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0ysyWk-ox-8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jesford/testing-in-data-science/blob/master/intro-to-testing-presentation.ipynb"&gt;slide-origin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2019/jes-ford-getting-started-testing-in-data-science"&gt;slide-flatten&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Science Workflows&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One-off analysis&lt;/li&gt;
&lt;li&gt;Exploratory&lt;/li&gt;
&lt;li&gt;Well defined problem&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Science Domain Problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with Pandas DataFrames&lt;ul&gt;
&lt;li&gt;Pandas built-in testing methods&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from pandas.util.testing import assert_frame_equal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_like&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_dtype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Working with DB&lt;ul&gt;
&lt;li&gt;mock data that should be get from database and test only behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generating Dataframe for Testing&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hypothesis&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="data"></category></entry><entry><title>Practical decorators</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/practical-decorators" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/practical-decorators</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Reuven M. Lerner&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MjHpMCIvwsY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;usage examples&lt;ul&gt;
&lt;li&gt;timing&lt;/li&gt;
&lt;li&gt;limited call (e.g., function can be called once per minute)&lt;/li&gt;
&lt;li&gt;memoization (i.e. caching)&lt;/li&gt;
&lt;li&gt;add class attribute (e.g., better &lt;code&gt;__repr__&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Reuven M. Lerner&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MjHpMCIvwsY"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;usage examples&lt;ul&gt;
&lt;li&gt;timing&lt;/li&gt;
&lt;li&gt;limited call (e.g., function can be called once per minute)&lt;/li&gt;
&lt;li&gt;memoization (i.e. caching)&lt;/li&gt;
&lt;li&gt;add class attribute (e.g., better &lt;code&gt;__repr__&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="api"></category></entry><entry><title>Scraping a Million Pokemon Battles: Distributed Systems By Example</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/scraping-a-million-pokemon-battles-distributed-systems-by-example</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Duy Nguyen&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QvZqttX9uXc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/14v2huYsC5rJYUR3sWBXu0YN33b6tWRFraEgf9FwRPiE/edit#slide=id.g56f736b0fc_1_545"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scalability and 3 "Pillars"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concurrency of Resources&lt;/li&gt;
&lt;li&gt;Asserting for Correctness&lt;/li&gt;
&lt;li&gt;Resilience against Failures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New Problems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loss of determinism&lt;/li&gt;
&lt;li&gt;Long startup times (e.g., initialize message queue)&lt;/li&gt;
&lt;li&gt;Increases flakiness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correctness&lt;br&gt;
&lt;img alt="Correctness" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353098656.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resilience&lt;br&gt;
&lt;img alt="Resilience" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353190256.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Duy Nguyen&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QvZqttX9uXc"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/14v2huYsC5rJYUR3sWBXu0YN33b6tWRFraEgf9FwRPiE/edit#slide=id.g56f736b0fc_1_545"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scalability and 3 "Pillars"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concurrency of Resources&lt;/li&gt;
&lt;li&gt;Asserting for Correctness&lt;/li&gt;
&lt;li&gt;Resilience against Failures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New Problems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loss of determinism&lt;/li&gt;
&lt;li&gt;Long startup times (e.g., initialize message queue)&lt;/li&gt;
&lt;li&gt;Increases flakiness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correctness&lt;br&gt;
&lt;img alt="Correctness" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353098656.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resilience&lt;br&gt;
&lt;img alt="Resilience" src="https://lee-w.github.io/pycon-note/images/post-images/scraping-a-million-pokemon-battles-distributed-systems-by-example/15647353190256.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="core"></category></entry><entry><title>The Zen of Python Teams</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/the-zen-of-python-teams</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Adrienne Lowe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leadingwithspoons.com"&gt;Leading with Spoons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/adriennefriend"&gt;adriennefriend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WZ8FEB4J8-c"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beautiful is better than ugly.&lt;ul&gt;
&lt;li&gt;Be kind&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr="&gt;Accelerate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit is better than implicit&lt;ul&gt;
&lt;li&gt;Documenting process makes it easier for others to join you.&lt;ul&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;li&gt;onboard guide&lt;/li&gt;
&lt;li&gt;how to contribute&lt;/li&gt;
&lt;li&gt;where to get help&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep your conversation about work in public …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Adrienne Lowe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leadingwithspoons.com"&gt;Leading with Spoons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/adriennefriend"&gt;adriennefriend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WZ8FEB4J8-c"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beautiful is better than ugly.&lt;ul&gt;
&lt;li&gt;Be kind&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr="&gt;Accelerate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit is better than implicit&lt;ul&gt;
&lt;li&gt;Documenting process makes it easier for others to join you.&lt;ul&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;li&gt;onboard guide&lt;/li&gt;
&lt;li&gt;how to contribute&lt;/li&gt;
&lt;li&gt;where to get help&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep your conversation about work in public&lt;/li&gt;
&lt;li&gt;Document your peoeple&lt;ul&gt;
&lt;li&gt;I enjoy working on ...&lt;/li&gt;
&lt;li&gt;I get excited by ...&lt;/li&gt;
&lt;li&gt;I struggle when ...&lt;/li&gt;
&lt;li&gt;I feel appreciated when ...&lt;/li&gt;
&lt;li&gt;Ask me for help with ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple is better than complex.&lt;ul&gt;
&lt;li&gt;Build meaningful relationships with small interactions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error should never pass silently&lt;ul&gt;
&lt;li&gt;With humans, we have to rely on other humans to tell us when we broke them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/li&gt;
&lt;li&gt;Now is better than never.&lt;ul&gt;
&lt;li&gt;Doing and being wrong is a lot better than not doing at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="team"></category></entry><entry><title>Time to take out the rubbish: garbage collector</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector" rel="alternate"></link><published>2019-08-13T15:20:00+08:00</published><updated>2019-08-13T15:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/pycon-note/posts/pycon-us-2019/2019/08/time-to-take-out-the-rubbish-garbage-collector</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CLW5Lyc1FN8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We do not use &lt;code&gt;__del__()&lt;/code&gt; to clean up. Use &lt;code&gt;with&lt;/code&gt; instead&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CLW5Lyc1FN8"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We do not use &lt;code&gt;__del__()&lt;/code&gt; to clean up. Use &lt;code&gt;with&lt;/code&gt; instead&lt;/li&gt;
&lt;/ul&gt;</content><category term="core"></category></entry></feed>