<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note - EuroPython 2019</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/europython-2019.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2020-07-29T10:45:00+08:00</updated><entry><title>Python Performance: Past, Present and Future</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/07/python-performance-past-present-and-future" rel="alternate"></link><published>2020-07-29T10:45:00+08:00</published><updated>2020-07-29T10:45:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-07-29:/pycon-note/posts/europython-2019/2020/07/python-performance-past-present-and-future</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Victor Stinner&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=TXRPCZ7Nmh4&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vstinner/talks/blob/master/2019-EuroPython/python_performance.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="present"&gt;Present&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pypy.org/"&gt;PyPy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;fully compatible with CPython&lt;/li&gt;
&lt;li&gt;issues&lt;ul&gt;
&lt;li&gt;slower when involving C extension&lt;/li&gt;
&lt;li&gt;larger memory footprint&lt;/li&gt;
&lt;li&gt;longer startup time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multiprocessing&lt;ul&gt;
&lt;li&gt;Work around the GIL limitation&lt;/li&gt;
&lt;li&gt;Shared memory (Python 3.8) avoids memory copies between workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Easy way to write C extension&lt;/li&gt;
&lt;li&gt;Support multiple …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Victor Stinner&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=TXRPCZ7Nmh4&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vstinner/talks/blob/master/2019-EuroPython/python_performance.pdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="present"&gt;Present&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pypy.org/"&gt;PyPy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;fully compatible with CPython&lt;/li&gt;
&lt;li&gt;issues&lt;ul&gt;
&lt;li&gt;slower when involving C extension&lt;/li&gt;
&lt;li&gt;larger memory footprint&lt;/li&gt;
&lt;li&gt;longer startup time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multiprocessing&lt;ul&gt;
&lt;li&gt;Work around the GIL limitation&lt;/li&gt;
&lt;li&gt;Shared memory (Python 3.8) avoids memory copies between workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Easy way to write C extension&lt;/li&gt;
&lt;li&gt;Support multiple Python versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba&lt;ul&gt;
&lt;li&gt;JIT compiler tranlating subset of Python and NumPy&lt;/li&gt;
&lt;li&gt;Simplified Threading (release GIL)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Summary&lt;ul&gt;
&lt;li&gt;PyPy doesn't require any code change&lt;/li&gt;
&lt;li&gt;multiprocessing scales&lt;/li&gt;
&lt;li&gt;Use Cython, don't use C API&lt;/li&gt;
&lt;li&gt;Numba makes numpy faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="future"&gt;Future&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pythoncapi.readthedocs.io/pyhandle.html"&gt;New PyHandle C API&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;CPython&lt;ul&gt;
&lt;li&gt;on top of the current C API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PyPy&lt;ul&gt;
&lt;li&gt;More efficient that the current C API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cython&lt;ul&gt;
&lt;li&gt;no need to change your code, Cython will handle it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference counting&lt;/li&gt;
&lt;li&gt;Gilectomy&lt;/li&gt;
&lt;li&gt;Tracing CG&lt;/li&gt;
&lt;li&gt;Subinterpreters (WIP)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0545/"&gt;PEP 545&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GIL -&amp;gt; on lock per interpreter&lt;/li&gt;
&lt;li&gt;Expectation&lt;ul&gt;
&lt;li&gt;lower memory footprint&lt;/li&gt;
&lt;li&gt;faster locks&lt;/li&gt;
&lt;li&gt;limitation: python object cannot be shared between interpreters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="performance"></category></entry><entry><title>How Thinking in Python Made Me a Better Software Engineer</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/07/how-thinking-in-python-made-me-a-better-software-engineer" rel="alternate"></link><published>2020-07-15T10:00:00+08:00</published><updated>2020-07-15T10:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-07-15:/pycon-note/posts/europython-2019/2020/07/how-thinking-in-python-made-me-a-better-software-engineer</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Johnny Dude&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jGseHScYdSg&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/1crqJaP65jdl0QnOpMV_U5Cdq34fWNHcC/view"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task Switching reduce your productivity time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Immediate Feedback&lt;ul&gt;
&lt;li&gt;Catching bugs earlier reduces task switching&lt;/li&gt;
&lt;li&gt;Learn faster&lt;/li&gt;
&lt;li&gt;Confidence that your code works&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Standard Representation &amp;amp; API&lt;/li&gt;
&lt;li&gt;Composability&lt;ul&gt;
&lt;li&gt;Type hint&lt;ul&gt;
&lt;li&gt;Do we really want to define types and structures before understanding problems?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prototyping&lt;ul&gt;
&lt;li&gt;You write it …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Johnny Dude&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jGseHScYdSg&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/1crqJaP65jdl0QnOpMV_U5Cdq34fWNHcC/view"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task Switching reduce your productivity time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Immediate Feedback&lt;ul&gt;
&lt;li&gt;Catching bugs earlier reduces task switching&lt;/li&gt;
&lt;li&gt;Learn faster&lt;/li&gt;
&lt;li&gt;Confidence that your code works&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Standard Representation &amp;amp; API&lt;/li&gt;
&lt;li&gt;Composability&lt;ul&gt;
&lt;li&gt;Type hint&lt;ul&gt;
&lt;li&gt;Do we really want to define types and structures before understanding problems?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prototyping&lt;ul&gt;
&lt;li&gt;You write it once, gaining experience in both, understanding the problem, and understanding a solution.&lt;/li&gt;
&lt;li&gt;You write it again, with less things to worry about and attention to finer details.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="other"></category></entry><entry><title>Exceptional Exceptions</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/07/exceptional-exceptions" rel="alternate"></link><published>2020-07-08T09:20:00+08:00</published><updated>2020-07-08T09:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-07-08:/pycon-note/posts/europython-2019/2020/07/exceptional-exceptions</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Mario Corchero&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ac5b8LyHJcQ&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Logging exception&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logging.exception("")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logging.info("", exc_info=True)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception techniques&lt;ul&gt;
&lt;li&gt;Reraise&lt;/li&gt;
&lt;li&gt;Chaining exception&lt;ul&gt;
&lt;li&gt;&lt;code&gt;raise Exception() from e&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eliding previous exception&lt;ul&gt;
&lt;li&gt;&lt;code&gt;raise Exception() from None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;False friends: &lt;code&gt;NotImpelmented&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;raise NotImplementedError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception attributes&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__traceback__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New magic in 3.8&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.unraisablehook&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threading.excepthook&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="core"></category></entry><entry><title>Software patterns for productive teams</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/04/software-patterns-for-productive-teams" rel="alternate"></link><published>2020-04-17T16:52:00+08:00</published><updated>2020-04-17T16:52:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-04-17:/pycon-note/posts/europython-2019/2020/04/software-patterns-for-productive-teams</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Radoslav Georgiev&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fEy68VRmOeQ"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="team-leaders-perspective"&gt;Team Leader's perspective&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Productivity&lt;/li&gt;
&lt;li&gt;Confidence (keep product stable)&lt;/li&gt;
&lt;li&gt;Independence&lt;/li&gt;
&lt;li&gt;Well-being&lt;/li&gt;
&lt;li&gt;Less context switching&lt;/li&gt;
&lt;li&gt;Someone being blocked&lt;/li&gt;
&lt;li&gt;Morale&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="software-development"&gt;Software Development&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;constant regression&lt;/li&gt;
&lt;li&gt;constant merge conflicts&lt;ul&gt;
&lt;li&gt;split python modules by domain&lt;/li&gt;
&lt;li&gt;split big test files into test file per thing that you are testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;local setup …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Radoslav Georgiev&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fEy68VRmOeQ"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="team-leaders-perspective"&gt;Team Leader's perspective&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Productivity&lt;/li&gt;
&lt;li&gt;Confidence (keep product stable)&lt;/li&gt;
&lt;li&gt;Independence&lt;/li&gt;
&lt;li&gt;Well-being&lt;/li&gt;
&lt;li&gt;Less context switching&lt;/li&gt;
&lt;li&gt;Someone being blocked&lt;/li&gt;
&lt;li&gt;Morale&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="software-development"&gt;Software Development&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;constant regression&lt;/li&gt;
&lt;li&gt;constant merge conflicts&lt;ul&gt;
&lt;li&gt;split python modules by domain&lt;/li&gt;
&lt;li&gt;split big test files into test file per thing that you are testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;local setup&lt;ul&gt;
&lt;li&gt;accounts&lt;ul&gt;
&lt;li&gt;make sure everyone has an account/access/keys for everything needed before they need it&lt;/li&gt;
&lt;li&gt;keep a spreadsheet of accounts &amp;amp; 3td parties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;documentation&lt;ul&gt;
&lt;li&gt;relentlessly document&lt;/li&gt;
&lt;li&gt;test it&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onboarding new people is your final test&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;setup scripts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;speed of tests&lt;ul&gt;
&lt;li&gt;pytest-xdist&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clients often don't know the exact details of the things they want, so ask them a lot of questions!&lt;/li&gt;
&lt;li&gt;Make sure everyone on your team reads the features description fully, before starting to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="explicit-is-better-than-implicit"&gt;Explicit is better than implicit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bug&lt;ul&gt;
&lt;li&gt;Have an explicitly "firefighter" for the week&lt;/li&gt;
&lt;li&gt;Rotate everyone on that position&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit Git &amp;amp; GitHub workflows&lt;/li&gt;
&lt;li&gt;Refactoring PRs separated from feature PRs&lt;/li&gt;
&lt;li&gt;Team rules&lt;ul&gt;
&lt;li&gt;Better visibility at explicit expeetation&lt;/li&gt;
&lt;li&gt;Onboard new people&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have an explicit team lead&lt;ul&gt;
&lt;li&gt;leads should focus on enabling their teams do their job well&lt;/li&gt;
&lt;li&gt;Rotate team leads every week, so everyone knows what its' like to be on that position.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conflict&lt;ul&gt;
&lt;li&gt;over communicate with all parties involved&lt;/li&gt;
&lt;li&gt;Read books on management &amp;amp; leadership&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adapt&lt;ul&gt;
&lt;li&gt;Establish processes but don't follow them blindly.&lt;/li&gt;
&lt;li&gt;Things change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="team"></category></entry><entry><title>Static typing: beyond the basics of def foo(x: int) -str:</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/static-typing-beyond-the-basics-of-def-foo-x-int-str" rel="alternate"></link><published>2020-03-27T19:08:00+08:00</published><updated>2020-03-27T19:08:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-03-27:/pycon-note/posts/europython-2019/2020/03/static-typing-beyond-the-basics-of-def-foo-x-int-str</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Vita Smid&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UQo-ebJk4a4&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qntln.github.io/europython2019/#/"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="1-strategy-how-to-approach-a-large-code-base"&gt;1. Strategy: how to approach a large code base&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;try to start with strict configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ensure full coverage&lt;/span&gt;
&lt;span class="na"&gt;disallow_untyped_calls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;disallow_untyped_defs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;disallow_incomplete_defs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;disallow_untyped_decorators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Restrict dynamic typing&lt;/span&gt;
&lt;span class="na"&gt;disallow_any_generics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;disallow_subclassing_any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;warn_return_any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Know exactly what you&amp;#39;re doing&lt;/span&gt;
&lt;span class="na"&gt;warn_redundant_casts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Vita Smid&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UQo-ebJk4a4&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qntln.github.io/europython2019/#/"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="1-strategy-how-to-approach-a-large-code-base"&gt;1. Strategy: how to approach a large code base&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;try to start with strict configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ensure full coverage&lt;/span&gt;
&lt;span class="na"&gt;disallow_untyped_calls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;disallow_untyped_defs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;disallow_incomplete_defs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;disallow_untyped_decorators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Restrict dynamic typing&lt;/span&gt;
&lt;span class="na"&gt;disallow_any_generics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;disallow_subclassing_any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;warn_return_any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Know exactly what you&amp;#39;re doing&lt;/span&gt;
&lt;span class="na"&gt;warn_redundant_casts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;warn_unused_ignores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;warn_unused_configs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# imports&lt;/span&gt;
&lt;span class="na"&gt;ignore_missing_imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;follow_imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;silent  # do not use &amp;#39;follow_import = skip&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;gradual coverage&lt;ul&gt;
&lt;li&gt;opt-in: only explicitly listed modules are checked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tests&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;# type: ignore&lt;/code&gt; on mocks and monkey patching&lt;/li&gt;
&lt;li&gt;don't give up on test code completely&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[mypy-*.tests.*]&lt;/span&gt;
&lt;span class="na"&gt;disallow_untyped_decorators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;False  # pytest decorators are untyped.&lt;/span&gt;
&lt;span class="na"&gt;disallow_untyped_defs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;False      # Properly typing *all* fixtures&lt;/span&gt;
&lt;span class="na"&gt;disallow_incomplete_defs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;False   # and tests is hard and noisy.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;your own package&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;package_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;your_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;py.typed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;3rd party packages&lt;ul&gt;
&lt;li&gt;explicitly ignore those are not typed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[mypy-&amp;quot;package.to.ignore&amp;quot;]&lt;/span&gt;
&lt;span class="na"&gt;ignore_missing_imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;follow_imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;silent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="2-tactics-dealing-with-complex-code"&gt;2. Tactics: Dealing with complex code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Generics and type variables&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TypeVar&lt;/code&gt; with restriction (e.g., &lt;code&gt;AlgebraType = TypeVar('AlgebraType', float, Decimal)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nominal typing v.s. structural typing&lt;ul&gt;
&lt;li&gt;Structural typing: describe capabilities, not ancestry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Defining you own types&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NewType&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write your own mypy plugin&lt;ul&gt;
&lt;li&gt;e.g., &lt;a href="https://github.com/qntln/fastenum/blob/master/fastenum/mypy_plugin.py"&gt; github.com/qntln/fastenum/fastenum/mypy_plugin.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;overloading functions&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="typing"></category></entry><entry><title>From Python script to Open Source Project</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/from-python-script-to-open-source-project" rel="alternate"></link><published>2020-03-12T11:44:00+08:00</published><updated>2020-03-12T11:44:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-03-12:/pycon-note/posts/europython-2019/2020/03/from-python-script-to-open-source-project</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://michal.karzynski.pl/"&gt;Michał Karzyński&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=25P5apB4XWM&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/postrational/from-python-script-to-open-source-project"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michal.karzynski.pl/blog/2019/05/26/python-project-maturity-checklist/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Stages&lt;ul&gt;
&lt;li&gt;Code Prep&lt;/li&gt;
&lt;li&gt;Automate&lt;/li&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Specs&lt;ul&gt;
&lt;li&gt;PEP8&lt;/li&gt;
&lt;li&gt;GNU/POSIX&lt;/li&gt;
&lt;li&gt;PyPA&lt;/li&gt;
&lt;li&gt;PyCQA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pip install&lt;ul&gt;
&lt;li&gt;pytest&lt;/li&gt;
&lt;li&gt;mypy&lt;/li&gt;
&lt;li&gt;docopt&lt;/li&gt;
&lt;li&gt;setuptools&lt;/li&gt;
&lt;li&gt;tox&lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;li&gt;wheel&lt;/li&gt;
&lt;li&gt;black&lt;/li&gt;
&lt;li&gt;pre-commit&lt;/li&gt;
&lt;li&gt;flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Services&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;TravisCI&lt;/li&gt;
&lt;li&gt;Coverall.io&lt;/li&gt;
&lt;li&gt;Dependabot&lt;/li&gt;
&lt;li&gt;codeclimate.com&lt;/li&gt;
&lt;li&gt;codacy.com&lt;/li&gt;
&lt;li&gt;mergify.io&lt;/li&gt;
&lt;li&gt;pyup.io&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="check-list"&gt;Check list&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CLI: &lt;a href="http://docopt.org/"&gt;docopt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://michal.karzynski.pl/"&gt;Michał Karzyński&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=25P5apB4XWM&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/postrational/from-python-script-to-open-source-project"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michal.karzynski.pl/blog/2019/05/26/python-project-maturity-checklist/"&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Stages&lt;ul&gt;
&lt;li&gt;Code Prep&lt;/li&gt;
&lt;li&gt;Automate&lt;/li&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Specs&lt;ul&gt;
&lt;li&gt;PEP8&lt;/li&gt;
&lt;li&gt;GNU/POSIX&lt;/li&gt;
&lt;li&gt;PyPA&lt;/li&gt;
&lt;li&gt;PyCQA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pip install&lt;ul&gt;
&lt;li&gt;pytest&lt;/li&gt;
&lt;li&gt;mypy&lt;/li&gt;
&lt;li&gt;docopt&lt;/li&gt;
&lt;li&gt;setuptools&lt;/li&gt;
&lt;li&gt;tox&lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;li&gt;wheel&lt;/li&gt;
&lt;li&gt;black&lt;/li&gt;
&lt;li&gt;pre-commit&lt;/li&gt;
&lt;li&gt;flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Services&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;TravisCI&lt;/li&gt;
&lt;li&gt;Coverall.io&lt;/li&gt;
&lt;li&gt;Dependabot&lt;/li&gt;
&lt;li&gt;codeclimate.com&lt;/li&gt;
&lt;li&gt;codacy.com&lt;/li&gt;
&lt;li&gt;mergify.io&lt;/li&gt;
&lt;li&gt;pyup.io&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="check-list"&gt;Check list&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CLI: &lt;a href="http://docopt.org/"&gt;docopt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code directory layout&lt;/li&gt;
&lt;li&gt;Code Structure&lt;ul&gt;
&lt;li&gt;meaningful name&lt;/li&gt;
&lt;li&gt;single responsibility&lt;/li&gt;
&lt;li&gt;up to 2 parameters&lt;/li&gt;
&lt;li&gt;preferably no side-effects&lt;/li&gt;
&lt;li&gt;write unit tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Define your main function&lt;/li&gt;
&lt;li&gt;Preparing your setup.py file&lt;/li&gt;
&lt;li&gt;Using your setup.py&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python setup.py sdist&lt;/code&gt; (source package)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python setup.py bdist_wheel&lt;/code&gt; (binary wheel for distribution)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;entry_points&lt;/code&gt; to &lt;code&gt;setup.py&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;entry_points={"console_scripts": ["my-command = my_module.main:main"]}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;requirements.txt&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements_dev.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use Black to format you code&lt;/li&gt;
&lt;li&gt;Use pre-commit to run formatter&lt;/li&gt;
&lt;li&gt;Use flake8 to check your code&lt;/li&gt;
&lt;li&gt;Use MyPy for static type analysis&lt;/li&gt;
&lt;li&gt;Use tox to test all the things&lt;/li&gt;
&lt;li&gt;Write unit tests (pytest)&lt;/li&gt;
&lt;li&gt;Setup a Git repository&lt;/li&gt;
&lt;li&gt;Setup continuous integration&lt;/li&gt;
&lt;li&gt;Requirements updater&lt;ul&gt;
&lt;li&gt;pyup&lt;/li&gt;
&lt;li&gt;dependbot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test coverage checker&lt;/li&gt;
&lt;li&gt;Automated code review&lt;/li&gt;
&lt;li&gt;Automated PR merge&lt;ul&gt;
&lt;li&gt;add rules&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Publish your project on PyPI (twine)&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="code quality"></category></entry><entry><title>Zen of Python Dependency Management ... and package release automation</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/zen-of-python-dependency-management" rel="alternate"></link><published>2020-03-11T09:52:00+08:00</published><updated>2020-03-11T09:52:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-03-11:/pycon-note/posts/europython-2019/2020/03/zen-of-python-dependency-management</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Justin Mayer&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=asL0dbN6pAY&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://justinmayer.com/talks/dependency-management-release-automation/assets/player/KeynoteDHTMLPlayer.html#0"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why is it important?&lt;ul&gt;
&lt;li&gt;reproducible builds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PEP 518: pyproject.toml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[build-system]&lt;/span&gt;
&lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;[&amp;quot;setuptools&amp;quot;, &amp;quot;wheel&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[build-system]&lt;/span&gt;
&lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;[&amp;quot;poetry&amp;gt;=0.12&amp;quot;]&lt;/span&gt;
&lt;span class="n"&gt;build-backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;poetry.mansonry.api&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.poerty.dependencies]&lt;/span&gt;
&lt;span class="na"&gt;python&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^3.7&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="dependency-management-tools"&gt;Dependency Management Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Release Early and Often&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip-tools&lt;/li&gt;
&lt;li&gt;pipenv&lt;/li&gt;
&lt;li&gt;poetry&lt;/li&gt;
&lt;li&gt;DepHell …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Justin Mayer&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=asL0dbN6pAY&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://justinmayer.com/talks/dependency-management-release-automation/assets/player/KeynoteDHTMLPlayer.html#0"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why is it important?&lt;ul&gt;
&lt;li&gt;reproducible builds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PEP 518: pyproject.toml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[build-system]&lt;/span&gt;
&lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;[&amp;quot;setuptools&amp;quot;, &amp;quot;wheel&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[build-system]&lt;/span&gt;
&lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;[&amp;quot;poetry&amp;gt;=0.12&amp;quot;]&lt;/span&gt;
&lt;span class="n"&gt;build-backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;poetry.mansonry.api&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.poerty.dependencies]&lt;/span&gt;
&lt;span class="na"&gt;python&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^3.7&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="dependency-management-tools"&gt;Dependency Management Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Release Early and Often&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip-tools&lt;/li&gt;
&lt;li&gt;pipenv&lt;/li&gt;
&lt;li&gt;poetry&lt;/li&gt;
&lt;li&gt;DepHell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="release-management"&gt;Release Management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Auto-Publish Releases Upon PR Merge&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/autopub/autopub"&gt;AutoPub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="dependencies"></category></entry><entry><title>Optimizing Docker builds for Python applications</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/optimizing-docker-builds-for-python-applications" rel="alternate"></link><published>2020-03-06T13:15:00+08:00</published><updated>2020-03-06T13:15:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-03-06:/pycon-note/posts/europython-2019/2020/03/optimizing-docker-builds-for-python-applications</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dmitry Figol&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eRzMJuwuYpU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slides.com/dmfigol/optimizing-docker-builds-for-python-applications"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker Concept&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="-w817" src="https://lee-w.github.io/pycon-note/images/post-images/optimizing-docker-builds-for-python-applications/docker-concept.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optimize Goal&lt;ol&gt;
&lt;li&gt;Reducing image size&lt;/li&gt;
&lt;li&gt;Reducing build time&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Priority&lt;ul&gt;
&lt;li&gt;Fast build during development → Use slim-stretch&lt;/li&gt;
&lt;li&gt;Small size during production → Use alpine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="build-deps-are-only-needed-when-compiling-but-not-runtimeimprovement"&gt;build deps are only needed when compiling but not runtimeImprovement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use specific &lt;code&gt;COPY&lt;/code&gt; statement instead of &lt;code&gt;COPY ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dockerignore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="delete-build-deps-doesnt-shrink-image-size"&gt;delete build …&lt;/h3&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dmitry Figol&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eRzMJuwuYpU"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slides.com/dmfigol/optimizing-docker-builds-for-python-applications"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker Concept&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="-w817" src="https://lee-w.github.io/pycon-note/images/post-images/optimizing-docker-builds-for-python-applications/docker-concept.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optimize Goal&lt;ol&gt;
&lt;li&gt;Reducing image size&lt;/li&gt;
&lt;li&gt;Reducing build time&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Priority&lt;ul&gt;
&lt;li&gt;Fast build during development → Use slim-stretch&lt;/li&gt;
&lt;li&gt;Small size during production → Use alpine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="build-deps-are-only-needed-when-compiling-but-not-runtimeimprovement"&gt;build deps are only needed when compiling but not runtimeImprovement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use specific &lt;code&gt;COPY&lt;/code&gt; statement instead of &lt;code&gt;COPY ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dockerignore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="delete-build-deps-doesnt-shrink-image-size"&gt;delete build deps doesn't shrink image size&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Layer&lt;ul&gt;
&lt;li&gt;Instructions create read-only layers&lt;/li&gt;
&lt;li&gt;A new layer can't be smaller than the previous layer&lt;/li&gt;
&lt;li&gt;Layers are cached and can be re-used for subsequent builds&lt;/li&gt;
&lt;li&gt;Layers introduce some overhead&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tips&lt;ul&gt;
&lt;li&gt;Combine multiple &lt;strong&gt;RUN&lt;/strong&gt; statements into one&lt;/li&gt;
&lt;li&gt;delete files in the same layer (instruction) where they were added&lt;/li&gt;
&lt;li&gt;arrangement statement from the least changing to the most changing (system-level -&amp;gt; tools -&amp;gt; Python deps -&amp;gt; source code)&lt;/li&gt;
&lt;li&gt;don't save deps to cache&lt;ul&gt;
&lt;li&gt;pip: &lt;code&gt;--no-cache-dir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;apk: &lt;code&gt;--no-cache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="complicate-dockerfile-and-no-cache-during-build"&gt;complicate Dockerfile and no cache during build&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker multi-stage&lt;ul&gt;
&lt;li&gt;Build an intermediate image with all build deps and install your app&lt;/li&gt;
&lt;li&gt;Copy the result to a fresh image&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="other-tips"&gt;Other Tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bind mount source code instead of COPY in local dev env&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PYTHONUNBUFFERED=1&lt;/code&gt; -&amp;gt; print to stdout without buffering&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PYTHONDONTWRITEBYTECODE=1&lt;/code&gt; -&amp;gt; no &lt;code&gt;*.pyc&lt;/code&gt; files&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="container"></category></entry><entry><title>Publish a (Perfect) Python Package on PyPI</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/publish-a-perfetc-python-package-on-pypi" rel="alternate"></link><published>2020-03-04T13:08:00+08:00</published><updated>2020-03-04T13:08:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-03-04:/pycon-note/posts/europython-2019/2020/03/publish-a-perfetc-python-package-on-pypi</id><summary type="html">
&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Mark Smith&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-WDV0-OB4fE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/judy2k/publishing_python_packages_talk"&gt;resource&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="basic-usage"&gt;Basic Usage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;minimal &lt;code&gt;setup.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"helloworld"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Say hello!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;py_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"helloworld"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;package_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;build wheel&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python setup.py bdist_wheel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;test installation locally&lt;ul&gt;
&lt;li&gt;Links to the code instead of add it to &lt;code&gt;site-packages&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Mark Smith&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-WDV0-OB4fE&amp;amp;feature=youtu.be"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/judy2k/publishing_python_packages_talk"&gt;resource&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="basic-usage"&gt;Basic Usage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;minimal &lt;code&gt;setup.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"helloworld"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Say hello!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;py_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"helloworld"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;package_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;build wheel&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python setup.py bdist_wheel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;test installation locally&lt;ul&gt;
&lt;li&gt;Links to the code instead of add it to &lt;code&gt;site-packages&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install -e .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="documentation"&gt;Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compare ReStructured Text and markdown&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ReStructured Text&lt;/th&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pythonic&lt;/td&gt;
&lt;td&gt;More Widespread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Powerful&lt;/td&gt;
&lt;td&gt;Simply&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.mkdocs.org/"&gt;mkdocs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;keys added to &lt;code&gt;setup.py&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;classifiers&lt;/li&gt;
&lt;li&gt;long_description&lt;/li&gt;
&lt;li&gt;long_description_content_type="text/markdown"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;install_required&lt;/th&gt;
&lt;th&gt;extras_require&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;production dependencies&lt;/td&gt;
&lt;td&gt;optional requirements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;relaxed versions (users can install without conflicts with other packages)&lt;/td&gt;
&lt;td&gt;specific versions (developers can have identical develop environment)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;keys added to &lt;code&gt;setup.py&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;install_requires&lt;/li&gt;
&lt;li&gt;extras_require&lt;ul&gt;
&lt;li&gt;dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;install package with extras_require&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install -e .&lt;span class="o"&gt;[&lt;/span&gt;dev&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="source-distribution"&gt;Source Distribution&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python setup.py sdist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;keys added to &lt;code&gt;setup.py&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;url&lt;/li&gt;
&lt;li&gt;author&lt;/li&gt;
&lt;li&gt;author_email&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ideally, everything should be included for source distribution&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://github.com/mgedmin/check-manifest"&gt;check-manifest&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;check-manifest --create&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="publish"&gt;Publish&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python setup.py bdist_wheel sdist
twine upload dist/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="other-stuffs-to-add"&gt;Other Stuffs to add&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Must Do&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nice to have&lt;ul&gt;
&lt;li&gt;badges&lt;ul&gt;
&lt;li&gt;code coverage&lt;/li&gt;
&lt;li&gt;quality metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;test on macOS &amp;amp; windows&lt;/li&gt;
&lt;li&gt;more document&lt;ul&gt;
&lt;li&gt;contributors section&lt;/li&gt;
&lt;li&gt;Code of Conduct&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dont-do-any-thing-mention-above"&gt;Don't do any thing mention above&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use cookiecutter&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ionelmc/cookiecutter-pylibrary"&gt;cookiecutter-pylibrary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="things-are-changing"&gt;Things are changing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;move metadata from &lt;code&gt;setup.py&lt;/code&gt; to &lt;code&gt;setup.cfg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;move to &lt;code&gt;pyprojec.toml&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/flit"&gt;flit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ofek/hatch"&gt;hatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="packaging"></category></entry><entry><title>Why You Should Pursue Public Speaking and How to Get There</title><link href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/02/why-you-should-pursue-public-speaking-and-how-to-get-there" rel="alternate"></link><published>2020-02-28T15:30:00+08:00</published><updated>2020-02-28T15:30:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-28:/pycon-note/posts/europython-2019/2020/02/why-you-should-pursue-public-speaking-and-how-to-get-there</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/yennycheung"&gt;Yenny Cheung&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=a5WIMg5sunw"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/yennycheung/ghc-why-you-should-pursue-public-speaking-and-how-to-get-there"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="why"&gt;Why?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Present&lt;/strong&gt; better in front of the company&lt;/li&gt;
&lt;li&gt;Being a software engineer is much more than coding, its about good &lt;strong&gt;communication&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Getting better at &lt;strong&gt;crucial conversation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Great trick for &lt;strong&gt;introverts&lt;/strong&gt; to meet people&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="overcoming-our-fear"&gt;Overcoming our fear&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;nervous&lt;ul&gt;
&lt;li&gt;find your &lt;strong&gt;harbor&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;forget something to …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/yennycheung"&gt;Yenny Cheung&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=a5WIMg5sunw"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/yennycheung/ghc-why-you-should-pursue-public-speaking-and-how-to-get-there"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="why"&gt;Why?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Present&lt;/strong&gt; better in front of the company&lt;/li&gt;
&lt;li&gt;Being a software engineer is much more than coding, its about good &lt;strong&gt;communication&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Getting better at &lt;strong&gt;crucial conversation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Great trick for &lt;strong&gt;introverts&lt;/strong&gt; to meet people&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="overcoming-our-fear"&gt;Overcoming our fear&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;nervous&lt;ul&gt;
&lt;li&gt;find your &lt;strong&gt;harbor&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;forget something to say&lt;ul&gt;
&lt;li&gt;practice your &lt;strong&gt;comeback&lt;/strong&gt; if you forget what to say&lt;/li&gt;
&lt;li&gt;rehearse potential problem (e.g., projector not working)&lt;/li&gt;
&lt;li&gt;blank out on stage&lt;ul&gt;
&lt;li&gt;"Let's skip this for now"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Drink water&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;being exposed as a fraud&lt;ul&gt;
&lt;li&gt;the art of saying "I don't know"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;not being good enough&lt;ul&gt;
&lt;li&gt;imposter syndrome&lt;/li&gt;
&lt;li&gt;But, how good is good enough?&lt;ul&gt;
&lt;li&gt;Attend conference talks. You need reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="how-to-get-better"&gt;How to get better?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Lean Startup model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build&lt;/li&gt;
&lt;li&gt;Measure&lt;/li&gt;
&lt;li&gt;Learn&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building the proposal and the talk&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pick topics you're truly &lt;strong&gt;interested&lt;/strong&gt; in&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;call for proposal&lt;/strong&gt; from first&lt;ul&gt;
&lt;li&gt;also show how you can &lt;strong&gt;modify your talk for a short slot&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who, what and how&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;tell about your own &lt;strong&gt;experience&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;apply again&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Measure / Learn&lt;ul&gt;
&lt;li&gt;Gather feedback from audience&lt;/li&gt;
&lt;li&gt;Watch your presentation&lt;/li&gt;
&lt;li&gt;Take notes on what questions are being asked. They're what people interested in.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat&lt;ul&gt;
&lt;li&gt;reuse your talk in different occasions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="EuroPython 2019"></category><category term="speaking"></category><category term="Keynote"></category></entry></feed>