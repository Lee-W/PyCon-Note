<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Note - PyCon APAC 2022</title><link href="https://lee-w.github.io/pycon-note/" rel="alternate"></link><link href="https://lee-w.github.io/pycon-note/feeds/pycon-apac-2022.atom.xml" rel="self"></link><id>https://lee-w.github.io/pycon-note/</id><updated>2022-10-17T17:38:00+08:00</updated><entry><title>The Journey of AI Product Development and Improvement</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-apac-2022/2022/10/the-journey-of-ai-product-development-and-improvement" rel="alternate"></link><published>2022-10-17T17:38:00+08:00</published><updated>2022-10-17T17:38:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2022-10-17:/pycon-note/posts/pycon-apac-2022/2022/10/the-journey-of-ai-product-development-and-improvement</id><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;張仲樸 Enzo Chang&lt;/li&gt;
&lt;li&gt;黃奕鳴 Polo Huang&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=L00UMsORp6Q&amp;amp;list=PLEmLItlqGe4MYJFJq-JEZmtypkFZFvoJ1"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/1puUky1GHzn3L9Snv_Z3h4BI4Z6q-5szl/view"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ML Product Team&lt;ul&gt;
&lt;li&gt;ML eng&lt;/li&gt;
&lt;li&gt;data eng&lt;/li&gt;
&lt;li&gt;ML backend eng&lt;/li&gt;
&lt;li&gt;data scientist &amp;amp; data Analyst&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon APAC 2022"></category><category term="MLOps"></category></entry><entry><title>Building large scale data pipelines by Apache Airflow</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-apac-2022/2022/09/building-large-scale-data-pipelines-by-apache-airflow" rel="alternate"></link><published>2022-09-12T18:05:00+08:00</published><updated>2022-09-12T18:05:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2022-09-12:/pycon-note/posts/pycon-apac-2022/2022/09/building-large-scale-data-pipelines-by-apache-airflow</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;黃泰瑋 (Tai-Wei Huang)&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=V97gqcgFcCE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/17J_4FKu1s26rfpTO6MGmq1Qh5jUrkiJh/view"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="design-large-scale-pipeline"&gt;design large scale pipeline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;separate business logic from DAG&lt;/li&gt;
&lt;li&gt;reduce DAG processing time&lt;ul&gt;
&lt;li&gt;don't import global module&lt;ul&gt;
&lt;li&gt;import them in function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use    &lt;code&gt;.airflowignore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;customize operator&lt;ul&gt;
&lt;li&gt;don't do heavy computations in &lt;code&gt;__init__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre_execute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post_execute()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use the jinja template over Variable&lt;ul&gt;
&lt;li&gt;decouple logic …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;黃泰瑋 (Tai-Wei Huang)&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=V97gqcgFcCE"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/17J_4FKu1s26rfpTO6MGmq1Qh5jUrkiJh/view"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="design-large-scale-pipeline"&gt;design large scale pipeline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;separate business logic from DAG&lt;/li&gt;
&lt;li&gt;reduce DAG processing time&lt;ul&gt;
&lt;li&gt;don't import global module&lt;ul&gt;
&lt;li&gt;import them in function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use    &lt;code&gt;.airflowignore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;customize operator&lt;ul&gt;
&lt;li&gt;don't do heavy computations in &lt;code&gt;__init__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre_execute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post_execute()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use the jinja template over Variable&lt;ul&gt;
&lt;li&gt;decouple logic from airflow → make unit tests easier to write&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DAG generator&lt;ul&gt;
&lt;li&gt;extract similar parts among data pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="run-large-scale-pipeline"&gt;run large-scale pipeline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Runner&lt;ul&gt;
&lt;li&gt;Celery Executor&lt;ul&gt;
&lt;li&gt;scale up&lt;ul&gt;
&lt;li&gt;&lt;code&gt;worker_concurrency&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;worker_autoscale&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scale out&lt;ul&gt;
&lt;li&gt;run more workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes Executor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;airflow level parameter&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max_active_tasks_per_dag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_active_runs_per_dag&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DAG level parameter&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max_active_runs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_active_tasks&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;task level parameter&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max_active_tis_per_dag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="manage-large-scale-pipeline"&gt;manage large scale pipeline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;setup &lt;code&gt;access_control&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;separate runtime environment → &lt;code&gt;executor_config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cluster policy&lt;ul&gt;
&lt;li&gt;&lt;code&gt;task_policy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dag_policy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;task_instance_mutation_hook&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;failure management&lt;ul&gt;
&lt;li&gt;&lt;code&gt;retires&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sla&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sla_miss_callback&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_failure_callback&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon APAC 2022"></category><category term="data"></category><category term="pipeline"></category><category term="airflow"></category></entry><entry><title>Distributing your pandas ETL job using Ray and Modin</title><link href="https://lee-w.github.io/pycon-note/posts/pycon-apac-2022/2022/09/distributing-your-pandas-ETL-job-using-ray-and-modin" rel="alternate"></link><published>2022-09-12T11:50:00+08:00</published><updated>2022-09-12T11:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2022-09-12:/pycon-note/posts/pycon-apac-2022/2022/09/distributing-your-pandas-ETL-job-using-ray-and-modin</id><summary type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;李泓旻 (Andrew)&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yEviapotudA"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/AndrewLi55/distributing-your-pandas-etl-job-using-modin-and-raypdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="problem-to-solve"&gt;Problem to solve&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;many small datasets -&amp;gt; &lt;a href="https://github.com/ray-project/ray"&gt;ray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;out-of-core dataset -&amp;gt; &lt;a href="https://github.com/modin-project/modin"&gt;modin&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="ray"&gt;Ray&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;core concept&lt;ol&gt;
&lt;li&gt;tasks&lt;ul&gt;
&lt;li&gt;stateless&lt;/li&gt;
&lt;li&gt;return a &lt;code&gt;future&lt;/code&gt;: the result of the tasks&lt;/li&gt;
&lt;li&gt;idempotence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;actors&lt;ul&gt;
&lt;li&gt;stateful&lt;/li&gt;
&lt;li&gt;can be passed to other actors or tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# initialize a ray cluster (by default your local machine …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="speaker"&gt;Speaker&lt;/h2&gt;
&lt;p&gt;李泓旻 (Andrew)&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yEviapotudA"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/AndrewLi55/distributing-your-pandas-etl-job-using-modin-and-raypdf"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note"&gt;Note&lt;/h2&gt;
&lt;h3 id="problem-to-solve"&gt;Problem to solve&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;many small datasets -&amp;gt; &lt;a href="https://github.com/ray-project/ray"&gt;ray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;out-of-core dataset -&amp;gt; &lt;a href="https://github.com/modin-project/modin"&gt;modin&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="ray"&gt;Ray&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;core concept&lt;ol&gt;
&lt;li&gt;tasks&lt;ul&gt;
&lt;li&gt;stateless&lt;/li&gt;
&lt;li&gt;return a &lt;code&gt;future&lt;/code&gt;: the result of the tasks&lt;/li&gt;
&lt;li&gt;idempotence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;actors&lt;ul&gt;
&lt;li&gt;stateful&lt;/li&gt;
&lt;li&gt;can be passed to other actors or tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# initialize a ray cluster (by default your local machine)&lt;/span&gt;
&lt;span class="n"&gt;ray&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;components&lt;ul&gt;
&lt;li&gt;global control store&lt;ul&gt;
&lt;li&gt;maintain the control state&lt;/li&gt;
&lt;li&gt;key-value store with pub-sub functionality&lt;/li&gt;
&lt;li&gt;benefits&lt;ul&gt;
&lt;li&gt;fault tolerance&lt;/li&gt;
&lt;li&gt;low latency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;global scheduler&lt;/li&gt;
&lt;li&gt;local scheduler&lt;/li&gt;
&lt;li&gt;in-memory object store&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.plasmapy.org/"&gt;plasma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;store&lt;ul&gt;
&lt;li&gt;inputs&lt;/li&gt;
&lt;li&gt;outputs&lt;/li&gt;
&lt;li&gt;stateless computation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;on each node, Ray has the object store via shared memory&lt;/li&gt;
&lt;li&gt;external storage is also supported&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="ray" src="/images/post-images/distributing-your-pandas-ETL-job-using-ray-and-modin/ray.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to handle python dependency?&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments"&gt;runtime_env&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ray&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runtime_env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;runtime_env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="modin"&gt;Modin&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;modin.pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Why modin?&lt;ul&gt;
&lt;li&gt;high pandas API coverage (90% up)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What if some pandas API is not supported?&lt;ul&gt;
&lt;li&gt;fallback to &lt;code&gt;default to pandas&lt;/code&gt; mode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="PyCon APAC 2022"></category><category term="data"></category><category term="pipeline"></category><category term="distributed"></category></entry></feed>